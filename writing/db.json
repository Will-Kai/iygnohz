{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/arm.jpg","path":"images/arm.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/cloudera-manager.jpeg","path":"images/cloudera-manager.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"d0b6b80320de3c88c7ab7f853fa28f67b86da81c","modified":1481089263000},{"_id":"source/CNAME","hash":"0ced25c3f4ab05d5aa86c37754cff479c3122fca","modified":1481089263000},{"_id":"source/googlea36ef2ce923df200.html","hash":"d8e59a8affb4ff34499ab615de71fc547a6ec880","modified":1481089263000},{"_id":"source/favicon.ico","hash":"07f145521133d2732377b9fa131cfbe0f618cc79","modified":1481089263000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1481089263000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1481089263000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1481089263000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1481089263000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1481089263000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1481089263000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1481089263000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1481089263000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1481089263000},{"_id":"themes/next/_config.yml","hash":"eac09d5caffc6c34ed253e3f70042d19f9fc47f6","modified":1481811903000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1481089263000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1481089263000},{"_id":"source/_posts/macOS-linux-cheat-sheet.md","hash":"01af6d97448f42b45f1097a1e29861a40a24b99d","modified":1481089263000},{"_id":"source/_drafts/build-application-cross-platform.md","hash":"2dfe57fce83d3e91ca5c1967b13a560fe14480c7","modified":1481089263000},{"_id":"source/_drafts/what-I-want.md","hash":"a4c44c43c8a83682dde68d759cd039f3c8944ca7","modified":1481089263000},{"_id":"source/_posts/the-art-of-command-line.md","hash":"b246ea23e076ce62c44f0998510b4d769da9606b","modified":1481089263000},{"_id":"source/_posts/tor.md","hash":"98ccc22c33427d3ab79fcc2e2d4c125f57f4176c","modified":1481812851000},{"_id":"source/_posts/如何使用Cloudera-Manager快速构建大数据平台.md","hash":"84252a8246b8b978e102f66d4bc859dceece91c9","modified":1481811976000},{"_id":"source/_posts/我在普林.md","hash":"da4efe200ecc776204694473d50c2cb53f6555f6","modified":1481089263000},{"_id":"source/_posts/时速云面试总结.md","hash":"f6c4bb22a18d790e63f523e25b19b9efbcb3d716","modified":1481089263000},{"_id":"source/about/index.md","hash":"b3ed45270ce160c6721704f4475fbb52cf8f17a9","modified":1481089263000},{"_id":"source/categories/index.md","hash":"b337923f94406dcf17f733944b573b6e6bbf09ae","modified":1481089263000},{"_id":"source/tags/index.md","hash":"1cbd58f48bd9020387757d3be208b27b3bc80bc4","modified":1481089263000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1481089263000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1481089263000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1481089263000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1481089263000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1481089263000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1481089263000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1481089263000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1481089263000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1481089263000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1481089263000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1481089263000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1481089263000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1481089263000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1481089263000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1481089263000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1481089263000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1481089263000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1481089263000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1481089263000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1481089263000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1481089263000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1481089264000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1481089264000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1481089264000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481089263000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1481089263000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1481089263000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1481089263000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1481089263000},{"_id":"source/images/arm.jpg","hash":"92acb3496e40e242163d37c36be0d22ce2df13e7","modified":1481089263000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1481089263000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1481089263000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1481089263000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1481089263000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1481089263000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1481089263000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1481089263000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1481089263000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1481089263000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1481089263000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1481089263000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1481089263000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1481089263000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1481089263000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1481089263000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1481089263000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1481089263000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1481089263000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1481089263000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1481089263000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1481089263000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1481089263000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1481089263000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1481089263000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1481089263000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1481089263000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1481089263000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1481089263000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1481089263000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481089263000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481089263000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481089263000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481089263000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481089263000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481089263000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481089263000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1481089263000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1481089263000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1481089263000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1481089263000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1481089263000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1481089263000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1481089263000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1481089263000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1481089263000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1481089263000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1481089263000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1481089263000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1481089263000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1481089263000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1481089263000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1481089263000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1481089263000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1481089263000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1481089263000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1481089263000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1481089263000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1481089263000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1481089263000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1481089263000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1481089263000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1481089263000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1481089263000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1481089264000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1481089264000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1481089264000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1481089264000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1481089264000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1481089264000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1481089264000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1481089264000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1481089264000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1481089264000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1481089264000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1481089264000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1481089264000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1481089263000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1481089263000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1481089263000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1481089263000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1481089263000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1481089263000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1481089263000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1481089263000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1481089264000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1481089264000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1481089264000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1481089264000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1481089264000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1481089263000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1481089263000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1481089263000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1481089263000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1481089263000},{"_id":"public/categories/index.html","hash":"3c17704de9088e993405393cbbf07facc900a72f","modified":1481812883738},{"_id":"public/googlea36ef2ce923df200.html","hash":"0d7aaecbb1bf3da4046d57e55ba3591d6ab10c97","modified":1481812883737},{"_id":"public/about/index.html","hash":"b3ea03cf0a35e2589d006fd76fa2ca4bd1817d3b","modified":1481812883738},{"_id":"public/tags/index.html","hash":"02d088bcf21a3971e67c214d758546b5fcf9a8a4","modified":1481812883738},{"_id":"public/archives/index.html","hash":"335e72cf03717423b24ae08a3724a1a26513950c","modified":1481812883739},{"_id":"public/archives/2015/index.html","hash":"70ebff226af56d0a7a34ba1a80341346458395e9","modified":1481812883739},{"_id":"public/archives/2016/index.html","hash":"e45d8709799ec92db16265458ed5eb3e2075eddd","modified":1481812883739},{"_id":"public/archives/2016/01/index.html","hash":"3d9c84889cde0b7dbe364d862933e16fb92bf113","modified":1481812883739},{"_id":"public/archives/2016/08/index.html","hash":"4813c19266e69d2312e7b0ffa3bd30d3d5b9e60e","modified":1481812883739},{"_id":"public/categories/技术/index.html","hash":"fd593ce32ff6346a21e74c11f37893beaade4960","modified":1481812883738},{"_id":"public/categories/转载/index.html","hash":"1cbce2fa61dbb55fe3e22d6f69500cb55dca5891","modified":1481812883738},{"_id":"public/categories/写给5年后的自己/index.html","hash":"9d76d634dc8233132988502aacfbde230ca89d57","modified":1481812883739},{"_id":"public/categories/面试/index.html","hash":"dfad8798f8c0dba6b2e14774b6c2c9dfe5e7b358","modified":1481812883739},{"_id":"public/archives/2015/12/index.html","hash":"ff95e1f21ac39d69ceb3397fd847ae5b4d764e7b","modified":1481812883739},{"_id":"public/tags/mac/index.html","hash":"11c40830028f9236b8023d6bfa3751a8fa8aab33","modified":1481812883739},{"_id":"public/tags/shell/index.html","hash":"7bf9bdc769df556c11614e47fe75bccc4b427c49","modified":1481812883739},{"_id":"public/tags/linux/index.html","hash":"d16850a5c32779fb707aac6e28dfd36da51fa7fc","modified":1481812883739},{"_id":"public/tags/mysql/index.html","hash":"90722f620a605e2b3ebbb3c678aa03f24e3cdccf","modified":1481812883739},{"_id":"public/tags/git/index.html","hash":"1e0c6f8edeef61cb332d1f95f4179b4cfe6392f0","modified":1481812883739},{"_id":"public/tags/bash/index.html","hash":"2934e2b3f5f584723ddaa38aeebcde2e3b86d0ee","modified":1481812883739},{"_id":"public/tags/windows/index.html","hash":"0ee996bc3a1a677a06bc6312526683a5be30dd9e","modified":1481812883739},{"_id":"public/tags/macOS/index.html","hash":"b3766a6f68d1b2a144b6c12360f97474713cc541","modified":1481812883739},{"_id":"public/tags/tor/index.html","hash":"6fb184f3bf4d5427640989f55cf25219921be6d7","modified":1481812883739},{"_id":"public/tags/proxy/index.html","hash":"bad43468b0e795040f2909dba483914aebbaec10","modified":1481812883739},{"_id":"public/tags/爬虫/index.html","hash":"92305d6ce56083821056a946f341b89598d832a1","modified":1481812883740},{"_id":"public/tags/spider/index.html","hash":"03b0eaba92df51276ae6a44bb3208c6a809db5c1","modified":1481812883740},{"_id":"public/tags/crawler/index.html","hash":"90601d0089fa23794bb4c69b723366679d8ef084","modified":1481812883739},{"_id":"public/tags/匿名网络/index.html","hash":"88931e86455902b315a27f7549304edf0e9a13f8","modified":1481812883740},{"_id":"public/tags/心得/index.html","hash":"c6ed1f4c7544326179984407b027ea517093f562","modified":1481812883740},{"_id":"public/tags/感悟/index.html","hash":"8d513f8618d30a4c5c97abece2d0939fac90943f","modified":1481812883740},{"_id":"public/tags/C语言/index.html","hash":"aeeaf8a59be20ba4fd31305b9bc2019c7a0dac9d","modified":1481812883740},{"_id":"public/2016/08/22/the-art-of-command-line/index.html","hash":"921e9bc42950da8a38a34be344f6259d54f05bca","modified":1481812883740},{"_id":"public/2016/08/09/tor/index.html","hash":"96ab5b1eba3527972119e7fe1f33990fb08266ff","modified":1481812883740},{"_id":"public/2016/01/04/我在普林/index.html","hash":"e8aa606f1da69ab4cbd8c84b8f512a698becd790","modified":1481812883740},{"_id":"public/2015/12/30/时速云面试总结/index.html","hash":"b82408ecf71c7ef21b60c9b964d2673e611b11ef","modified":1481812883740},{"_id":"public/2015/12/19/macOS-linux-cheat-sheet/index.html","hash":"65ebf62a6948018f134e53c287db38e473d52bdc","modified":1481812883740},{"_id":"public/index.html","hash":"1b8068cadbf356731e1964bda9519d152208e041","modified":1481812883740},{"_id":"public/archives/2016/12/index.html","hash":"88d29605eb131d32f57e31951b7d1af3e034a38a","modified":1481812883739},{"_id":"public/categories/Big-Data/index.html","hash":"13811731d59d548ec439e5bb2331f9e9d9954e9d","modified":1481812883739},{"_id":"public/tags/cloudera/index.html","hash":"508b330d5ff084784e733198205648c9ab73a9ec","modified":1481812883740},{"_id":"public/tags/hadoop/index.html","hash":"8c17c966faf51fec1ed5d1879fc43f9e3efb4c30","modified":1481812883740},{"_id":"public/tags/big-data/index.html","hash":"bd3ce5b025740b4d009ff3fd0cfe40704b764841","modified":1481812883740},{"_id":"public/2016/12/15/如何使用Cloudera-Manager快速构建大数据平台/index.html","hash":"8a048f205cb7f733fdd56fc0a99e4d52d7d0b6a7","modified":1481812009776},{"_id":"public/CNAME","hash":"0ced25c3f4ab05d5aa86c37754cff479c3122fca","modified":1481812883767},{"_id":"public/favicon.ico","hash":"07f145521133d2732377b9fa131cfbe0f618cc79","modified":1481812883767},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1481812883767},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1481812883768},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1481812883771},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1481812883771},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1481812883771},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1481812883772},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1481812883772},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1481812883771},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1481812883772},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1481812883772},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1481812883772},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1481812883767},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1481812883772},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1481812883772},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1481812883772},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481812883772},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481812883772},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481812883772},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481812883772},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481812883772},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481812883772},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1481812883772},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1481812883772},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481812883772},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1481812885542},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1481812885543},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1481812885543},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1481812885544},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1481812885542},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1481812885542},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1481812885543},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1481812885544},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1481812885544},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1481812885544},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1481812885544},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1481812885544},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1481812885544},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1481812885544},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1481812885544},{"_id":"public/css/main.css","hash":"4c812ca8aac528b2d13e80b2741d4ab30f3530a0","modified":1481812885545},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1481812885545},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1481812885545},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1481812885546},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1481812885524},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1481812885529},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1481812885530},{"_id":"public/images/arm.jpg","hash":"92acb3496e40e242163d37c36be0d22ce2df13e7","modified":1481812885548},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1481812885545},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1481812885544},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1481812885544},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1481812885545},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1481812885545},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1481812885545},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1481812885545},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1481812885545},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1481812885545},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1481812885545},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1481812885545},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1481812885547},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1481812885547},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1481812885547},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1481812885547},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1481812885547},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1481812885548},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1481812885566},{"_id":"source/_posts/cloudera-manager.md","hash":"5258e77e236a768fe85a1fb9c0b46f16179089ba","modified":1481812840000},{"_id":"source/images/cloudera-manager.jpeg","hash":"e6f8d332cb09e2281aebb64508c69ff1e13d4a7f","modified":1481812567000},{"_id":"public/2016/12/15/cloudera-manager/index.html","hash":"ba6c9bf9fd9e5691b40b9bc277352eec5d309645","modified":1481812883740},{"_id":"public/images/cloudera-manager.jpeg","hash":"e6f8d332cb09e2281aebb64508c69ff1e13d4a7f","modified":1481812885548}],"Category":[{"name":"技术","_id":"ciwqg8nxw00055qxzh6za8pr6"},{"name":"转载","_id":"ciwqg8nym000g5qxz0w3aa375"},{"name":"Big Data","_id":"ciwqg8nz0000l5qxzlnakm9l4"},{"name":"写给5年后的自己","_id":"ciwqg8nz2000o5qxzwm2tw17t"},{"name":"面试","_id":"ciwqg8nz3000r5qxzde9f90db"}],"Data":[],"Page":[{"_content":"google-site-verification: googlea36ef2ce923df200.html\n","source":"googlea36ef2ce923df200.html","raw":"google-site-verification: googlea36ef2ce923df200.html\n","date":"2016-12-07T05:41:03.000Z","updated":"2016-12-07T05:41:03.000Z","path":"googlea36ef2ce923df200.html","title":"","comments":1,"layout":"page","_id":"ciwqg8nr000005qxz9pyoh2dm","content":"google-site-verification: googlea36ef2ce923df200.html\n","excerpt":"","more":"google-site-verification: googlea36ef2ce923df200.html\n"},{"title":"分类","date":"2015-11-25T08:20:16.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: 分类\ndate: 2015-11-25 16:20:16\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-12-07T05:41:03.000Z","path":"categories/index.html","layout":"page","_id":"ciwqg8nxn00025qxz32wg1tky","content":"","excerpt":"","more":""},{"title":"about","date":"2015-11-25T08:26:14.000Z","type":"about","comments":0,"_content":"\n嗨，我是十年。很高兴能与你在茫茫人海中有片刻的相遇！\n\n我在北京，目前从事金融领域后段开发的工作，喜欢专研后端技术，典型的Mac和Google脑残粉。\n\n关于语言，现在使用Python开发，用过1年的Erlang，懂一点点C和Node，还想学学Go...好吧，我承认我很花心。\n\n关于工具，现在使用vim、git等，重度终端用户，熟练使用常用命令，并不排斥界面。\n\n关于写作，想写点有营养的内容，坚持原创。\n","source":"about/index.md","raw":"title: about\ndate: 2015-11-25 16:26:14\ntype: about\ncomments: false\n---\n\n嗨，我是十年。很高兴能与你在茫茫人海中有片刻的相遇！\n\n我在北京，目前从事金融领域后段开发的工作，喜欢专研后端技术，典型的Mac和Google脑残粉。\n\n关于语言，现在使用Python开发，用过1年的Erlang，懂一点点C和Node，还想学学Go...好吧，我承认我很花心。\n\n关于工具，现在使用vim、git等，重度终端用户，熟练使用常用命令，并不排斥界面。\n\n关于写作，想写点有营养的内容，坚持原创。\n","updated":"2016-12-07T05:41:03.000Z","path":"about/index.html","layout":"page","_id":"ciwqg8nxu00045qxzq4mzep4z","content":"<p>嗨，我是十年。很高兴能与你在茫茫人海中有片刻的相遇！</p>\n<p>我在北京，目前从事金融领域后段开发的工作，喜欢专研后端技术，典型的Mac和Google脑残粉。</p>\n<p>关于语言，现在使用Python开发，用过1年的Erlang，懂一点点C和Node，还想学学Go…好吧，我承认我很花心。</p>\n<p>关于工具，现在使用vim、git等，重度终端用户，熟练使用常用命令，并不排斥界面。</p>\n<p>关于写作，想写点有营养的内容，坚持原创。</p>\n","excerpt":"","more":"<p>嗨，我是十年。很高兴能与你在茫茫人海中有片刻的相遇！</p>\n<p>我在北京，目前从事金融领域后段开发的工作，喜欢专研后端技术，典型的Mac和Google脑残粉。</p>\n<p>关于语言，现在使用Python开发，用过1年的Erlang，懂一点点C和Node，还想学学Go…好吧，我承认我很花心。</p>\n<p>关于工具，现在使用vim、git等，重度终端用户，熟练使用常用命令，并不排斥界面。</p>\n<p>关于写作，想写点有营养的内容，坚持原创。</p>\n"},{"title":"Tagcloud","date":"2015-11-25T08:17:47.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: Tagcloud\ndate: 2015-11-25 16:17:47\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-12-07T05:41:03.000Z","path":"tags/index.html","layout":"page","_id":"ciwqg8ny000085qxzq3bz9psx","content":"","excerpt":"","more":""}],"Post":[{"title":"构建跨平台应用程序--Electron","date":"2016-08-14T03:24:40.000Z","_content":"","source":"_drafts/build-application-cross-platform.md","raw":"title: 构建跨平台应用程序--Electron\ndate: 2016-08-14 11:24:40\ncategory: 技术\ntags:\n- electron\n- mac\n- linux\n- windows\n- cross platform\n---\n","slug":"build-application-cross-platform","published":0,"updated":"2016-12-07T05:41:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwqg8nxg00015qxztwynq7co","content":"","excerpt":"","more":""},{"title":"Mac/Linux常用命令集","date":"2015-12-19T08:59:02.000Z","_content":"\n### 一、基础命令\n#### 1 获取帮助\n```bash\n    # 查看man手册\n    man command\n    # 尝试命令的-h或--help选项(通常是这样的)\n    command -h\n    command --help\n```\n\n#### 2 实用命令行工具\n##### 2.1 基本文件和目录操作命令\n```bash\n    # 打印当前工作目录路径\n    pwd\n    # 查看当前目录的文件\n    ls\n    # 查看当前目录所有文件(包含隐藏文件)\n    ls -a\n    # 从当前目录递归查看子目录的文件\n    ls -R\n    # 移动或重命名文件或目录(注意source和destination不能相同)\n    mv source destination\n    # 删除文件，使用-r删除目录(小心，小心，小心)\n    rm target\n    # 拷贝文件或目录\n    cp source destination\n    # 挂载文件系统\n    mount /dev/device_name /media/device_name\n    # 卸载文件系统\n    umount /media/device_name\n```\n\n##### 2.2 系统管理命令\n```bash\n    # 使用管理员权限执行命令(可能照成毁灭性后果，紧用来执行系统任务)\n    sudo command\n    # 切换到管理员账户\n    sudo -s\n    # 退出管理员账户\n    exit\n    # 使用管理员权限执行上次执行的命令(假设上次命令需要管理员权限执行，但是你忘记了sudo可以使用其快速重复执行)\n    sudo !!\n```\n<!-- more -->\n\n###### 2.2.1 从.tgz或.tar.gz文件安装软件(通常是这样)\n```bash\n    # 第一步，解压.tgz文件\n    tar -xvf xxx.tgz\n    # 第二步，切换到解压好的目录\n    cd software_directory\n    # 第三步，如果有README文件先查看README\n    cat README\n    # 第四步，自动检测系统环境，生成Makefile\n    ./configure\n    # 第五步，编译软件(可能需要sudo)\n    make\n    # 第六步，安装软件到系统目录(可能需要sudo)\n    make install\n    # 第七步，清除生成的文件\n    make clean\n```\n\n###### 2.2.2 Ubuntu/Debian软件安装\n```bash\n    # 检测软件版本更新\n    sudo apt-get update\n    # 升级软件到最新版本\n    sudo apt-get upgrade\n    # 查找安装包\n    apt-cache search keyword\n    # 获取安装包的更多细节\n    apt-cache show package_name\n    # 安装软件\n    sudo apt-get install package_name\n    # 获取命令的输出(查看是否安装成功)\n    command | less\n```\n\n###### 2.2.3 Mac软件安装\n\n##### 2.3 工作中常用文件操作命令\n```bash\n    # 打印文件到终端\n    cat file\n    # 查找与文件名匹配的文件\n    locate filename\n    # 查看命令的安装目录\n    which command\n    # 在给定文件中搜索与短语匹配的片段\n    grep phrase filename\n    # 在命令的输出中搜索短语\n    command | grep phrase\n```\n\n##### 2.4 工作中常用进程操作命令\n```bash\n    # 列出所有运行的进程\n    ps -ef\n    # 强制关闭进程\n    kill -9 pid\n    # 查看内存、CPU等占用\n    top\n    # 和top很像，但是更好，界面很清爽\n    htop\n    # 后台执行命令\n    command &\n    # 后台执行命令并将日志输出到nohub.txt\n    nohup command &\n```\n\n##### 2.5 压缩和加密命令\n```bash\n    # 打包文件\n    tar -cvzf backup_output.tgz target_files_or_directories\n    # 解压.tgz或.tar.gz\n    tar -xvf target.tgz\n    # 加密文件\n    gpg -o outputfilename.gpg -c target_file\n    # 解密文件\n    gpg -o outputfilename -d target.gpg\n    # 加密文件并打包\n    gpg-zip -o encrypted_filename.tgz.gpg -c -s file_to_be_encrypted\n    # 解密打包文件\n    gpg-zip -o xxx.tgz -d target.tgz.gpg\n    tar -xvf xxx.tgz\n```\n\n#### 3 Bash shell\n##### 3.1 目录\n```bash\n    # 当前用户主目录\n    ~/\n    # 当前目录\n    ./\n    # 上级目录\n    ../\n    # 上上级目录\n    ../../\n    # 目录下所有文件\n    /*\n```\n\n##### 3.2 输出重定向\n```bash\n    # 重定向一个命令的输出为另一个目录的输入\n    command_1 | command_2\n    # 重定向命令的输出到文件(覆盖)\n    command > file\n    # 重定向命令的输出到文件(追加)\n    command >> file\n    # 和|很像，但是它同时输出到终端和文件\n    tee target\n    # 重定向标准输出和标准错误到/dev/null(丢弃命令的所有输出)\n    command > /dev/null 2>&1\n```\n\n##### 3.3 执行流程\n```bash\n    # 等命令1执行完再执行命令2\n    command_1; command_2\n    # 只有命令1执行成功(返回0)才会执行命令2\n    command_1 && command_2\n    # 只有命令1执行失败(返回错误码)才会执行命令2\n    command_1 || command_2\n```\n\n##### 3.4 通配符\n```bash\n    # 零个或多个字符\n    *\n    # 匹配phrase或phrase开始的字符串\n    phrase*\n    # 匹配phrase或包含phrase的字符串\n    *phrase*\n    # 匹配任意单个字符\n    ?\n    # 匹配chars中的任意一个字符\n    [chars]\n    # 匹配a-z中的任意一个字符(小写字母)\n    [a-z]\n```\n\n### 二、高级命令\n#### 1 实用命令行工具补充\n##### 1.1 网络相关命令\n```bash\n    # 配置网络通信\n    ifconfig\n    # 连接到远程服务器\n    ssh username@ip_address\n    # 通过网络从一台机器递归拷贝文件或目录到另一台机器\n    scp -r source_filename:username@ip_address target_username@target_ip_address:target_filename\n    # 拷贝有变化的文件或目录\n    rsync source target\n    # 检测目标地址是否在线\n    ping ip_address\n    # 网络监控\n    netstat\n    # 查看启用了那些端口\n    nmap localhost\n```\n\n###### 1.1.1 wget\n```bash\n    # 通过http下载文件\n    wget http://example.com/folder/file\n    # 继续下载文件(网络中断)\n    wget -c http://example.com/folder/file\n    # 后台下载文件\n    wget -b wget -c http://example.com/folder/file\n    # 通过ftp下载文件\n    wget --ftp-user=USER --ftp-password=PASS ftp://example.com/folder/file\n```\n\n###### 1.1.2 netcat\n##### 1.2 用户和组\n```bash\n    # 改变文件或目录所有者\n    chown user_name:group_name directory_name\n    # 改变文件或目录的权限\n    chmod\n    # 创建一个用户\n    adduser\n    # 删除一个用户\n    deluser\n    # 临时切换到别的用户\n    su username\n    # 列出所有用户\n    users\n    # 列出所有组\n    groups\n```\n\n#### 2 工作中操作文件的命令补充\n```bash\n    # 查看那些进程正在使用那些文件\n    lsof\n    # 比较两个文件\n    diff file_1 file_2\n    # 输出文件头开始的n行\n    head -n numbers_of_lines file\n    # 输出文件尾开始的n行\n    tail -n numbers_of_lines file\n    # 文件校验和\n    md5sum file\n    # 文件校验和(比md5sum更好，没有哈希碰撞)\n    sha1sum file\n    # 每隔n秒执行命令并高亮显示不同的输出\n    watch -d -n numbers_of_seconds command\n    # 测试命令执行时间\n    time command\n    # 查看目录下文件从大到小\n    du -a directory | sort -n -r | less\n    # 删除当前目录文件名中所有空格\n    rename -n 's/[\\ ]/''/g' *\n    # 改变当前目录文件名中的大写为小写\n    rename 'y/A-Z/a-z/' *\n```\n\n#### 3 git\n```bash\n    # 开始一个新项目\n    git init\n    git config user.name \"user_name\"\n    git config user.email \"email\"\n    # 克隆项目(本地或远程)\n    git clone target\n    # 提交\n    git commit -m \"message\"\n    # 查看文件状态\n    git status\n    # 查看提交日志\n    git log\n    # 从另一个仓库拉取更新\n    git pull [target]\n    # 推送本地分支到别的仓库\n    git push [target]\n    # 创建一个新的分子\n    git branch [branchname]\n    # 切换到目标分支\n    git checkout [branchname]\n    #  删除分支\n    git branch -d [branchname]\n    # 合并两个分支\n    git merge [branchname] [branchname]\n    # 查看所有分支\n    git branch\n```\n\n#### 4 mysql\n```bash\n    # 获取帮助\n    help\n    # 列出所有数据库\n    show databases;\n    # 查看数据库结构\n    show tables;\n    # 删除数据库\n    drop database databasename;\n    # 创建数据库\n    create database databasename default character set utf8 default collate utf8_general_ci;\n    # 创建数据库用户\n    create user username@localhost identified by 'password';\n    # 列出所有用户\n    select * from mysql.user;\n    # 删除数据用户\n    delete from mysql.user where User='user_name';\n    # 给用户开通所有数据库所有权限(和root用户一样)\n    grant all privileges on *.* to someuser@\"%\" identified by 'password'\n    # 给用户开通特定数据库特定权限\n    grant select,insert,update,delete,create,drop on somedb.* to someuser@\"%\" identified by 'password';\n    # 更改权限时使用\n    flush privileges;\n    # 备份数据库\n    mysqldump -u username -p --opt databasename > dumpfile.sql\n    # 恢复数据库\n    mysql -u username -p databasename < dumpfile.sql\n```\n","source":"_posts/macOS-linux-cheat-sheet.md","raw":"title: Mac/Linux常用命令集\ndate: 2015-12-19 16:59:02\ncategory: 技术\ntags:\n- shell\n- mysql\n- git\n- linux\n- mac\n---\n\n### 一、基础命令\n#### 1 获取帮助\n```bash\n    # 查看man手册\n    man command\n    # 尝试命令的-h或--help选项(通常是这样的)\n    command -h\n    command --help\n```\n\n#### 2 实用命令行工具\n##### 2.1 基本文件和目录操作命令\n```bash\n    # 打印当前工作目录路径\n    pwd\n    # 查看当前目录的文件\n    ls\n    # 查看当前目录所有文件(包含隐藏文件)\n    ls -a\n    # 从当前目录递归查看子目录的文件\n    ls -R\n    # 移动或重命名文件或目录(注意source和destination不能相同)\n    mv source destination\n    # 删除文件，使用-r删除目录(小心，小心，小心)\n    rm target\n    # 拷贝文件或目录\n    cp source destination\n    # 挂载文件系统\n    mount /dev/device_name /media/device_name\n    # 卸载文件系统\n    umount /media/device_name\n```\n\n##### 2.2 系统管理命令\n```bash\n    # 使用管理员权限执行命令(可能照成毁灭性后果，紧用来执行系统任务)\n    sudo command\n    # 切换到管理员账户\n    sudo -s\n    # 退出管理员账户\n    exit\n    # 使用管理员权限执行上次执行的命令(假设上次命令需要管理员权限执行，但是你忘记了sudo可以使用其快速重复执行)\n    sudo !!\n```\n<!-- more -->\n\n###### 2.2.1 从.tgz或.tar.gz文件安装软件(通常是这样)\n```bash\n    # 第一步，解压.tgz文件\n    tar -xvf xxx.tgz\n    # 第二步，切换到解压好的目录\n    cd software_directory\n    # 第三步，如果有README文件先查看README\n    cat README\n    # 第四步，自动检测系统环境，生成Makefile\n    ./configure\n    # 第五步，编译软件(可能需要sudo)\n    make\n    # 第六步，安装软件到系统目录(可能需要sudo)\n    make install\n    # 第七步，清除生成的文件\n    make clean\n```\n\n###### 2.2.2 Ubuntu/Debian软件安装\n```bash\n    # 检测软件版本更新\n    sudo apt-get update\n    # 升级软件到最新版本\n    sudo apt-get upgrade\n    # 查找安装包\n    apt-cache search keyword\n    # 获取安装包的更多细节\n    apt-cache show package_name\n    # 安装软件\n    sudo apt-get install package_name\n    # 获取命令的输出(查看是否安装成功)\n    command | less\n```\n\n###### 2.2.3 Mac软件安装\n\n##### 2.3 工作中常用文件操作命令\n```bash\n    # 打印文件到终端\n    cat file\n    # 查找与文件名匹配的文件\n    locate filename\n    # 查看命令的安装目录\n    which command\n    # 在给定文件中搜索与短语匹配的片段\n    grep phrase filename\n    # 在命令的输出中搜索短语\n    command | grep phrase\n```\n\n##### 2.4 工作中常用进程操作命令\n```bash\n    # 列出所有运行的进程\n    ps -ef\n    # 强制关闭进程\n    kill -9 pid\n    # 查看内存、CPU等占用\n    top\n    # 和top很像，但是更好，界面很清爽\n    htop\n    # 后台执行命令\n    command &\n    # 后台执行命令并将日志输出到nohub.txt\n    nohup command &\n```\n\n##### 2.5 压缩和加密命令\n```bash\n    # 打包文件\n    tar -cvzf backup_output.tgz target_files_or_directories\n    # 解压.tgz或.tar.gz\n    tar -xvf target.tgz\n    # 加密文件\n    gpg -o outputfilename.gpg -c target_file\n    # 解密文件\n    gpg -o outputfilename -d target.gpg\n    # 加密文件并打包\n    gpg-zip -o encrypted_filename.tgz.gpg -c -s file_to_be_encrypted\n    # 解密打包文件\n    gpg-zip -o xxx.tgz -d target.tgz.gpg\n    tar -xvf xxx.tgz\n```\n\n#### 3 Bash shell\n##### 3.1 目录\n```bash\n    # 当前用户主目录\n    ~/\n    # 当前目录\n    ./\n    # 上级目录\n    ../\n    # 上上级目录\n    ../../\n    # 目录下所有文件\n    /*\n```\n\n##### 3.2 输出重定向\n```bash\n    # 重定向一个命令的输出为另一个目录的输入\n    command_1 | command_2\n    # 重定向命令的输出到文件(覆盖)\n    command > file\n    # 重定向命令的输出到文件(追加)\n    command >> file\n    # 和|很像，但是它同时输出到终端和文件\n    tee target\n    # 重定向标准输出和标准错误到/dev/null(丢弃命令的所有输出)\n    command > /dev/null 2>&1\n```\n\n##### 3.3 执行流程\n```bash\n    # 等命令1执行完再执行命令2\n    command_1; command_2\n    # 只有命令1执行成功(返回0)才会执行命令2\n    command_1 && command_2\n    # 只有命令1执行失败(返回错误码)才会执行命令2\n    command_1 || command_2\n```\n\n##### 3.4 通配符\n```bash\n    # 零个或多个字符\n    *\n    # 匹配phrase或phrase开始的字符串\n    phrase*\n    # 匹配phrase或包含phrase的字符串\n    *phrase*\n    # 匹配任意单个字符\n    ?\n    # 匹配chars中的任意一个字符\n    [chars]\n    # 匹配a-z中的任意一个字符(小写字母)\n    [a-z]\n```\n\n### 二、高级命令\n#### 1 实用命令行工具补充\n##### 1.1 网络相关命令\n```bash\n    # 配置网络通信\n    ifconfig\n    # 连接到远程服务器\n    ssh username@ip_address\n    # 通过网络从一台机器递归拷贝文件或目录到另一台机器\n    scp -r source_filename:username@ip_address target_username@target_ip_address:target_filename\n    # 拷贝有变化的文件或目录\n    rsync source target\n    # 检测目标地址是否在线\n    ping ip_address\n    # 网络监控\n    netstat\n    # 查看启用了那些端口\n    nmap localhost\n```\n\n###### 1.1.1 wget\n```bash\n    # 通过http下载文件\n    wget http://example.com/folder/file\n    # 继续下载文件(网络中断)\n    wget -c http://example.com/folder/file\n    # 后台下载文件\n    wget -b wget -c http://example.com/folder/file\n    # 通过ftp下载文件\n    wget --ftp-user=USER --ftp-password=PASS ftp://example.com/folder/file\n```\n\n###### 1.1.2 netcat\n##### 1.2 用户和组\n```bash\n    # 改变文件或目录所有者\n    chown user_name:group_name directory_name\n    # 改变文件或目录的权限\n    chmod\n    # 创建一个用户\n    adduser\n    # 删除一个用户\n    deluser\n    # 临时切换到别的用户\n    su username\n    # 列出所有用户\n    users\n    # 列出所有组\n    groups\n```\n\n#### 2 工作中操作文件的命令补充\n```bash\n    # 查看那些进程正在使用那些文件\n    lsof\n    # 比较两个文件\n    diff file_1 file_2\n    # 输出文件头开始的n行\n    head -n numbers_of_lines file\n    # 输出文件尾开始的n行\n    tail -n numbers_of_lines file\n    # 文件校验和\n    md5sum file\n    # 文件校验和(比md5sum更好，没有哈希碰撞)\n    sha1sum file\n    # 每隔n秒执行命令并高亮显示不同的输出\n    watch -d -n numbers_of_seconds command\n    # 测试命令执行时间\n    time command\n    # 查看目录下文件从大到小\n    du -a directory | sort -n -r | less\n    # 删除当前目录文件名中所有空格\n    rename -n 's/[\\ ]/''/g' *\n    # 改变当前目录文件名中的大写为小写\n    rename 'y/A-Z/a-z/' *\n```\n\n#### 3 git\n```bash\n    # 开始一个新项目\n    git init\n    git config user.name \"user_name\"\n    git config user.email \"email\"\n    # 克隆项目(本地或远程)\n    git clone target\n    # 提交\n    git commit -m \"message\"\n    # 查看文件状态\n    git status\n    # 查看提交日志\n    git log\n    # 从另一个仓库拉取更新\n    git pull [target]\n    # 推送本地分支到别的仓库\n    git push [target]\n    # 创建一个新的分子\n    git branch [branchname]\n    # 切换到目标分支\n    git checkout [branchname]\n    #  删除分支\n    git branch -d [branchname]\n    # 合并两个分支\n    git merge [branchname] [branchname]\n    # 查看所有分支\n    git branch\n```\n\n#### 4 mysql\n```bash\n    # 获取帮助\n    help\n    # 列出所有数据库\n    show databases;\n    # 查看数据库结构\n    show tables;\n    # 删除数据库\n    drop database databasename;\n    # 创建数据库\n    create database databasename default character set utf8 default collate utf8_general_ci;\n    # 创建数据库用户\n    create user username@localhost identified by 'password';\n    # 列出所有用户\n    select * from mysql.user;\n    # 删除数据用户\n    delete from mysql.user where User='user_name';\n    # 给用户开通所有数据库所有权限(和root用户一样)\n    grant all privileges on *.* to someuser@\"%\" identified by 'password'\n    # 给用户开通特定数据库特定权限\n    grant select,insert,update,delete,create,drop on somedb.* to someuser@\"%\" identified by 'password';\n    # 更改权限时使用\n    flush privileges;\n    # 备份数据库\n    mysqldump -u username -p --opt databasename > dumpfile.sql\n    # 恢复数据库\n    mysql -u username -p databasename < dumpfile.sql\n```\n","slug":"macOS-linux-cheat-sheet","published":1,"updated":"2016-12-07T05:41:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwqg8nxr00035qxzb3ahvp0n","content":"<h3 id=\"一、基础命令\"><a href=\"#一、基础命令\" class=\"headerlink\" title=\"一、基础命令\"></a>一、基础命令</h3><h4 id=\"1-获取帮助\"><a href=\"#1-获取帮助\" class=\"headerlink\" title=\"1 获取帮助\"></a>1 获取帮助</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看man手册</span></div><div class=\"line\">man <span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"comment\"># 尝试命令的-h或--help选项(通常是这样的)</span></div><div class=\"line\"><span class=\"built_in\">command</span> -h</div><div class=\"line\"><span class=\"built_in\">command</span> --help</div></pre></td></tr></table></figure>\n<h4 id=\"2-实用命令行工具\"><a href=\"#2-实用命令行工具\" class=\"headerlink\" title=\"2 实用命令行工具\"></a>2 实用命令行工具</h4><h5 id=\"2-1-基本文件和目录操作命令\"><a href=\"#2-1-基本文件和目录操作命令\" class=\"headerlink\" title=\"2.1 基本文件和目录操作命令\"></a>2.1 基本文件和目录操作命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 打印当前工作目录路径</span></div><div class=\"line\"><span class=\"built_in\">pwd</span></div><div class=\"line\"><span class=\"comment\"># 查看当前目录的文件</span></div><div class=\"line\">ls</div><div class=\"line\"><span class=\"comment\"># 查看当前目录所有文件(包含隐藏文件)</span></div><div class=\"line\">ls <span class=\"_\">-a</span></div><div class=\"line\"><span class=\"comment\"># 从当前目录递归查看子目录的文件</span></div><div class=\"line\">ls -R</div><div class=\"line\"><span class=\"comment\"># 移动或重命名文件或目录(注意source和destination不能相同)</span></div><div class=\"line\">mv <span class=\"built_in\">source</span> destination</div><div class=\"line\"><span class=\"comment\"># 删除文件，使用-r删除目录(小心，小心，小心)</span></div><div class=\"line\">rm target</div><div class=\"line\"><span class=\"comment\"># 拷贝文件或目录</span></div><div class=\"line\">cp <span class=\"built_in\">source</span> destination</div><div class=\"line\"><span class=\"comment\"># 挂载文件系统</span></div><div class=\"line\">mount /dev/device_name /media/device_name</div><div class=\"line\"><span class=\"comment\"># 卸载文件系统</span></div><div class=\"line\">umount /media/device_name</div></pre></td></tr></table></figure>\n<h5 id=\"2-2-系统管理命令\"><a href=\"#2-2-系统管理命令\" class=\"headerlink\" title=\"2.2 系统管理命令\"></a>2.2 系统管理命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 使用管理员权限执行命令(可能照成毁灭性后果，紧用来执行系统任务)</span></div><div class=\"line\">sudo <span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"comment\"># 切换到管理员账户</span></div><div class=\"line\">sudo <span class=\"_\">-s</span></div><div class=\"line\"><span class=\"comment\"># 退出管理员账户</span></div><div class=\"line\"><span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"comment\"># 使用管理员权限执行上次执行的命令(假设上次命令需要管理员权限执行，但是你忘记了sudo可以使用其快速重复执行)</span></div><div class=\"line\">sudo !!</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h6 id=\"2-2-1-从-tgz或-tar-gz文件安装软件-通常是这样\"><a href=\"#2-2-1-从-tgz或-tar-gz文件安装软件-通常是这样\" class=\"headerlink\" title=\"2.2.1 从.tgz或.tar.gz文件安装软件(通常是这样)\"></a>2.2.1 从.tgz或.tar.gz文件安装软件(通常是这样)</h6><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 第一步，解压.tgz文件</span></div><div class=\"line\">tar -xvf xxx.tgz</div><div class=\"line\"><span class=\"comment\"># 第二步，切换到解压好的目录</span></div><div class=\"line\"><span class=\"built_in\">cd</span> software_directory</div><div class=\"line\"><span class=\"comment\"># 第三步，如果有README文件先查看README</span></div><div class=\"line\">cat README</div><div class=\"line\"><span class=\"comment\"># 第四步，自动检测系统环境，生成Makefile</span></div><div class=\"line\">./configure</div><div class=\"line\"><span class=\"comment\"># 第五步，编译软件(可能需要sudo)</span></div><div class=\"line\">make</div><div class=\"line\"><span class=\"comment\"># 第六步，安装软件到系统目录(可能需要sudo)</span></div><div class=\"line\">make install</div><div class=\"line\"><span class=\"comment\"># 第七步，清除生成的文件</span></div><div class=\"line\">make clean</div></pre></td></tr></table></figure>\n<h6 id=\"2-2-2-Ubuntu-Debian软件安装\"><a href=\"#2-2-2-Ubuntu-Debian软件安装\" class=\"headerlink\" title=\"2.2.2 Ubuntu/Debian软件安装\"></a>2.2.2 Ubuntu/Debian软件安装</h6><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 检测软件版本更新</span></div><div class=\"line\">sudo apt-get update</div><div class=\"line\"><span class=\"comment\"># 升级软件到最新版本</span></div><div class=\"line\">sudo apt-get upgrade</div><div class=\"line\"><span class=\"comment\"># 查找安装包</span></div><div class=\"line\">apt-cache search keyword</div><div class=\"line\"><span class=\"comment\"># 获取安装包的更多细节</span></div><div class=\"line\">apt-cache show package_name</div><div class=\"line\"><span class=\"comment\"># 安装软件</span></div><div class=\"line\">sudo apt-get install package_name</div><div class=\"line\"><span class=\"comment\"># 获取命令的输出(查看是否安装成功)</span></div><div class=\"line\"><span class=\"built_in\">command</span> | less</div></pre></td></tr></table></figure>\n<h6 id=\"2-2-3-Mac软件安装\"><a href=\"#2-2-3-Mac软件安装\" class=\"headerlink\" title=\"2.2.3 Mac软件安装\"></a>2.2.3 Mac软件安装</h6><h5 id=\"2-3-工作中常用文件操作命令\"><a href=\"#2-3-工作中常用文件操作命令\" class=\"headerlink\" title=\"2.3 工作中常用文件操作命令\"></a>2.3 工作中常用文件操作命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 打印文件到终端</span></div><div class=\"line\">cat file</div><div class=\"line\"><span class=\"comment\"># 查找与文件名匹配的文件</span></div><div class=\"line\">locate filename</div><div class=\"line\"><span class=\"comment\"># 查看命令的安装目录</span></div><div class=\"line\"><span class=\"built_in\">which</span> <span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"comment\"># 在给定文件中搜索与短语匹配的片段</span></div><div class=\"line\">grep phrase filename</div><div class=\"line\"><span class=\"comment\"># 在命令的输出中搜索短语</span></div><div class=\"line\"><span class=\"built_in\">command</span> | grep phrase</div></pre></td></tr></table></figure>\n<h5 id=\"2-4-工作中常用进程操作命令\"><a href=\"#2-4-工作中常用进程操作命令\" class=\"headerlink\" title=\"2.4 工作中常用进程操作命令\"></a>2.4 工作中常用进程操作命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 列出所有运行的进程</span></div><div class=\"line\">ps -ef</div><div class=\"line\"><span class=\"comment\"># 强制关闭进程</span></div><div class=\"line\"><span class=\"built_in\">kill</span> -9 pid</div><div class=\"line\"><span class=\"comment\"># 查看内存、CPU等占用</span></div><div class=\"line\">top</div><div class=\"line\"><span class=\"comment\"># 和top很像，但是更好，界面很清爽</span></div><div class=\"line\">htop</div><div class=\"line\"><span class=\"comment\"># 后台执行命令</span></div><div class=\"line\"><span class=\"built_in\">command</span> &amp;</div><div class=\"line\"><span class=\"comment\"># 后台执行命令并将日志输出到nohub.txt</span></div><div class=\"line\">nohup <span class=\"built_in\">command</span> &amp;</div></pre></td></tr></table></figure>\n<h5 id=\"2-5-压缩和加密命令\"><a href=\"#2-5-压缩和加密命令\" class=\"headerlink\" title=\"2.5 压缩和加密命令\"></a>2.5 压缩和加密命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 打包文件</span></div><div class=\"line\">tar -cvzf backup_output.tgz target_files_or_directories</div><div class=\"line\"><span class=\"comment\"># 解压.tgz或.tar.gz</span></div><div class=\"line\">tar -xvf target.tgz</div><div class=\"line\"><span class=\"comment\"># 加密文件</span></div><div class=\"line\">gpg -o outputfilename.gpg -c target_file</div><div class=\"line\"><span class=\"comment\"># 解密文件</span></div><div class=\"line\">gpg -o outputfilename <span class=\"_\">-d</span> target.gpg</div><div class=\"line\"><span class=\"comment\"># 加密文件并打包</span></div><div class=\"line\">gpg-zip -o encrypted_filename.tgz.gpg -c <span class=\"_\">-s</span> file_to_be_encrypted</div><div class=\"line\"><span class=\"comment\"># 解密打包文件</span></div><div class=\"line\">gpg-zip -o xxx.tgz <span class=\"_\">-d</span> target.tgz.gpg</div><div class=\"line\">tar -xvf xxx.tgz</div></pre></td></tr></table></figure>\n<h4 id=\"3-Bash-shell\"><a href=\"#3-Bash-shell\" class=\"headerlink\" title=\"3 Bash shell\"></a>3 Bash shell</h4><h5 id=\"3-1-目录\"><a href=\"#3-1-目录\" class=\"headerlink\" title=\"3.1 目录\"></a>3.1 目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 当前用户主目录</span></div><div class=\"line\">~/</div><div class=\"line\"><span class=\"comment\"># 当前目录</span></div><div class=\"line\">./</div><div class=\"line\"><span class=\"comment\"># 上级目录</span></div><div class=\"line\">../</div><div class=\"line\"><span class=\"comment\"># 上上级目录</span></div><div class=\"line\">../../</div><div class=\"line\"><span class=\"comment\"># 目录下所有文件</span></div><div class=\"line\">/*</div></pre></td></tr></table></figure>\n<h5 id=\"3-2-输出重定向\"><a href=\"#3-2-输出重定向\" class=\"headerlink\" title=\"3.2 输出重定向\"></a>3.2 输出重定向</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 重定向一个命令的输出为另一个目录的输入</span></div><div class=\"line\">command_1 | command_2</div><div class=\"line\"><span class=\"comment\"># 重定向命令的输出到文件(覆盖)</span></div><div class=\"line\"><span class=\"built_in\">command</span> &gt; file</div><div class=\"line\"><span class=\"comment\"># 重定向命令的输出到文件(追加)</span></div><div class=\"line\"><span class=\"built_in\">command</span> &gt;&gt; file</div><div class=\"line\"><span class=\"comment\"># 和|很像，但是它同时输出到终端和文件</span></div><div class=\"line\">tee target</div><div class=\"line\"><span class=\"comment\"># 重定向标准输出和标准错误到/dev/null(丢弃命令的所有输出)</span></div><div class=\"line\"><span class=\"built_in\">command</span> &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>\n<h5 id=\"3-3-执行流程\"><a href=\"#3-3-执行流程\" class=\"headerlink\" title=\"3.3 执行流程\"></a>3.3 执行流程</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 等命令1执行完再执行命令2</span></div><div class=\"line\">command_1; command_2</div><div class=\"line\"><span class=\"comment\"># 只有命令1执行成功(返回0)才会执行命令2</span></div><div class=\"line\">command_1 &amp;&amp; command_2</div><div class=\"line\"><span class=\"comment\"># 只有命令1执行失败(返回错误码)才会执行命令2</span></div><div class=\"line\">command_1 || command_2</div></pre></td></tr></table></figure>\n<h5 id=\"3-4-通配符\"><a href=\"#3-4-通配符\" class=\"headerlink\" title=\"3.4 通配符\"></a>3.4 通配符</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 零个或多个字符</span></div><div class=\"line\">*</div><div class=\"line\"><span class=\"comment\"># 匹配phrase或phrase开始的字符串</span></div><div class=\"line\">phrase*</div><div class=\"line\"><span class=\"comment\"># 匹配phrase或包含phrase的字符串</span></div><div class=\"line\">*phrase*</div><div class=\"line\"><span class=\"comment\"># 匹配任意单个字符</span></div><div class=\"line\">?</div><div class=\"line\"><span class=\"comment\"># 匹配chars中的任意一个字符</span></div><div class=\"line\">[chars]</div><div class=\"line\"><span class=\"comment\"># 匹配a-z中的任意一个字符(小写字母)</span></div><div class=\"line\">[a-z]</div></pre></td></tr></table></figure>\n<h3 id=\"二、高级命令\"><a href=\"#二、高级命令\" class=\"headerlink\" title=\"二、高级命令\"></a>二、高级命令</h3><h4 id=\"1-实用命令行工具补充\"><a href=\"#1-实用命令行工具补充\" class=\"headerlink\" title=\"1 实用命令行工具补充\"></a>1 实用命令行工具补充</h4><h5 id=\"1-1-网络相关命令\"><a href=\"#1-1-网络相关命令\" class=\"headerlink\" title=\"1.1 网络相关命令\"></a>1.1 网络相关命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 配置网络通信</span></div><div class=\"line\">ifconfig</div><div class=\"line\"><span class=\"comment\"># 连接到远程服务器</span></div><div class=\"line\">ssh username@ip_address</div><div class=\"line\"><span class=\"comment\"># 通过网络从一台机器递归拷贝文件或目录到另一台机器</span></div><div class=\"line\">scp -r source_filename:username@ip_address target_username@target_ip_address:target_filename</div><div class=\"line\"><span class=\"comment\"># 拷贝有变化的文件或目录</span></div><div class=\"line\">rsync <span class=\"built_in\">source</span> target</div><div class=\"line\"><span class=\"comment\"># 检测目标地址是否在线</span></div><div class=\"line\">ping ip_address</div><div class=\"line\"><span class=\"comment\"># 网络监控</span></div><div class=\"line\">netstat</div><div class=\"line\"><span class=\"comment\"># 查看启用了那些端口</span></div><div class=\"line\">nmap localhost</div></pre></td></tr></table></figure>\n<h6 id=\"1-1-1-wget\"><a href=\"#1-1-1-wget\" class=\"headerlink\" title=\"1.1.1 wget\"></a>1.1.1 wget</h6><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 通过http下载文件</span></div><div class=\"line\">wget http://example.com/folder/file</div><div class=\"line\"><span class=\"comment\"># 继续下载文件(网络中断)</span></div><div class=\"line\">wget -c http://example.com/folder/file</div><div class=\"line\"><span class=\"comment\"># 后台下载文件</span></div><div class=\"line\">wget -b wget -c http://example.com/folder/file</div><div class=\"line\"><span class=\"comment\"># 通过ftp下载文件</span></div><div class=\"line\">wget --ftp-user=USER --ftp-password=PASS ftp://example.com/folder/file</div></pre></td></tr></table></figure>\n<h6 id=\"1-1-2-netcat\"><a href=\"#1-1-2-netcat\" class=\"headerlink\" title=\"1.1.2 netcat\"></a>1.1.2 netcat</h6><h5 id=\"1-2-用户和组\"><a href=\"#1-2-用户和组\" class=\"headerlink\" title=\"1.2 用户和组\"></a>1.2 用户和组</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 改变文件或目录所有者</span></div><div class=\"line\">chown user_name:group_name directory_name</div><div class=\"line\"><span class=\"comment\"># 改变文件或目录的权限</span></div><div class=\"line\">chmod</div><div class=\"line\"><span class=\"comment\"># 创建一个用户</span></div><div class=\"line\">adduser</div><div class=\"line\"><span class=\"comment\"># 删除一个用户</span></div><div class=\"line\">deluser</div><div class=\"line\"><span class=\"comment\"># 临时切换到别的用户</span></div><div class=\"line\">su username</div><div class=\"line\"><span class=\"comment\"># 列出所有用户</span></div><div class=\"line\">users</div><div class=\"line\"><span class=\"comment\"># 列出所有组</span></div><div class=\"line\">groups</div></pre></td></tr></table></figure>\n<h4 id=\"2-工作中操作文件的命令补充\"><a href=\"#2-工作中操作文件的命令补充\" class=\"headerlink\" title=\"2 工作中操作文件的命令补充\"></a>2 工作中操作文件的命令补充</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看那些进程正在使用那些文件</span></div><div class=\"line\">lsof</div><div class=\"line\"><span class=\"comment\"># 比较两个文件</span></div><div class=\"line\">diff file_1 file_2</div><div class=\"line\"><span class=\"comment\"># 输出文件头开始的n行</span></div><div class=\"line\">head -n numbers_of_lines file</div><div class=\"line\"><span class=\"comment\"># 输出文件尾开始的n行</span></div><div class=\"line\">tail -n numbers_of_lines file</div><div class=\"line\"><span class=\"comment\"># 文件校验和</span></div><div class=\"line\">md5sum file</div><div class=\"line\"><span class=\"comment\"># 文件校验和(比md5sum更好，没有哈希碰撞)</span></div><div class=\"line\">sha1sum file</div><div class=\"line\"><span class=\"comment\"># 每隔n秒执行命令并高亮显示不同的输出</span></div><div class=\"line\">watch <span class=\"_\">-d</span> -n numbers_of_seconds <span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"comment\"># 测试命令执行时间</span></div><div class=\"line\">time <span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"comment\"># 查看目录下文件从大到小</span></div><div class=\"line\">du <span class=\"_\">-a</span> directory | sort -n -r | less</div><div class=\"line\"><span class=\"comment\"># 删除当前目录文件名中所有空格</span></div><div class=\"line\">rename -n <span class=\"string\">'s/[\\ ]/'</span><span class=\"string\">'/g'</span> *</div><div class=\"line\"><span class=\"comment\"># 改变当前目录文件名中的大写为小写</span></div><div class=\"line\">rename <span class=\"string\">'y/A-Z/a-z/'</span> *</div></pre></td></tr></table></figure>\n<h4 id=\"3-git\"><a href=\"#3-git\" class=\"headerlink\" title=\"3 git\"></a>3 git</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 开始一个新项目</span></div><div class=\"line\">git init</div><div class=\"line\">git config user.name <span class=\"string\">\"user_name\"</span></div><div class=\"line\">git config user.email <span class=\"string\">\"email\"</span></div><div class=\"line\"><span class=\"comment\"># 克隆项目(本地或远程)</span></div><div class=\"line\">git <span class=\"built_in\">clone</span> target</div><div class=\"line\"><span class=\"comment\"># 提交</span></div><div class=\"line\">git commit -m <span class=\"string\">\"message\"</span></div><div class=\"line\"><span class=\"comment\"># 查看文件状态</span></div><div class=\"line\">git status</div><div class=\"line\"><span class=\"comment\"># 查看提交日志</span></div><div class=\"line\">git <span class=\"built_in\">log</span></div><div class=\"line\"><span class=\"comment\"># 从另一个仓库拉取更新</span></div><div class=\"line\">git pull [target]</div><div class=\"line\"><span class=\"comment\"># 推送本地分支到别的仓库</span></div><div class=\"line\">git push [target]</div><div class=\"line\"><span class=\"comment\"># 创建一个新的分子</span></div><div class=\"line\">git branch [branchname]</div><div class=\"line\"><span class=\"comment\"># 切换到目标分支</span></div><div class=\"line\">git checkout [branchname]</div><div class=\"line\"><span class=\"comment\">#  删除分支</span></div><div class=\"line\">git branch <span class=\"_\">-d</span> [branchname]</div><div class=\"line\"><span class=\"comment\"># 合并两个分支</span></div><div class=\"line\">git merge [branchname] [branchname]</div><div class=\"line\"><span class=\"comment\"># 查看所有分支</span></div><div class=\"line\">git branch</div></pre></td></tr></table></figure>\n<h4 id=\"4-mysql\"><a href=\"#4-mysql\" class=\"headerlink\" title=\"4 mysql\"></a>4 mysql</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 获取帮助</span></div><div class=\"line\"><span class=\"built_in\">help</span></div><div class=\"line\"><span class=\"comment\"># 列出所有数据库</span></div><div class=\"line\">show databases;</div><div class=\"line\"><span class=\"comment\"># 查看数据库结构</span></div><div class=\"line\">show tables;</div><div class=\"line\"><span class=\"comment\"># 删除数据库</span></div><div class=\"line\">drop database databasename;</div><div class=\"line\"><span class=\"comment\"># 创建数据库</span></div><div class=\"line\">create database databasename default character <span class=\"built_in\">set</span> utf8 default collate utf8_general_ci;</div><div class=\"line\"><span class=\"comment\"># 创建数据库用户</span></div><div class=\"line\">create user username@localhost identified by <span class=\"string\">'password'</span>;</div><div class=\"line\"><span class=\"comment\"># 列出所有用户</span></div><div class=\"line\">select * from mysql.user;</div><div class=\"line\"><span class=\"comment\"># 删除数据用户</span></div><div class=\"line\">delete from mysql.user <span class=\"built_in\">where</span> User=<span class=\"string\">'user_name'</span>;</div><div class=\"line\"><span class=\"comment\"># 给用户开通所有数据库所有权限(和root用户一样)</span></div><div class=\"line\">grant all privileges on *.* to someuser@<span class=\"string\">\"%\"</span> identified by <span class=\"string\">'password'</span></div><div class=\"line\"><span class=\"comment\"># 给用户开通特定数据库特定权限</span></div><div class=\"line\">grant select,insert,update,delete,create,drop on somedb.* to someuser@<span class=\"string\">\"%\"</span> identified by <span class=\"string\">'password'</span>;</div><div class=\"line\"><span class=\"comment\"># 更改权限时使用</span></div><div class=\"line\">flush privileges;</div><div class=\"line\"><span class=\"comment\"># 备份数据库</span></div><div class=\"line\">mysqldump -u username -p --opt databasename &gt; dumpfile.sql</div><div class=\"line\"><span class=\"comment\"># 恢复数据库</span></div><div class=\"line\">mysql -u username -p databasename &lt; dumpfile.sql</div></pre></td></tr></table></figure>\n","excerpt":"<h3 id=\"一、基础命令\"><a href=\"#一、基础命令\" class=\"headerlink\" title=\"一、基础命令\"></a>一、基础命令</h3><h4 id=\"1-获取帮助\"><a href=\"#1-获取帮助\" class=\"headerlink\" title=\"1 获取帮助\"></a>1 获取帮助</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看man手册</span></div><div class=\"line\">man <span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"comment\"># 尝试命令的-h或--help选项(通常是这样的)</span></div><div class=\"line\"><span class=\"built_in\">command</span> -h</div><div class=\"line\"><span class=\"built_in\">command</span> --help</div></pre></td></tr></table></figure>\n<h4 id=\"2-实用命令行工具\"><a href=\"#2-实用命令行工具\" class=\"headerlink\" title=\"2 实用命令行工具\"></a>2 实用命令行工具</h4><h5 id=\"2-1-基本文件和目录操作命令\"><a href=\"#2-1-基本文件和目录操作命令\" class=\"headerlink\" title=\"2.1 基本文件和目录操作命令\"></a>2.1 基本文件和目录操作命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 打印当前工作目录路径</span></div><div class=\"line\"><span class=\"built_in\">pwd</span></div><div class=\"line\"><span class=\"comment\"># 查看当前目录的文件</span></div><div class=\"line\">ls</div><div class=\"line\"><span class=\"comment\"># 查看当前目录所有文件(包含隐藏文件)</span></div><div class=\"line\">ls <span class=\"_\">-a</span></div><div class=\"line\"><span class=\"comment\"># 从当前目录递归查看子目录的文件</span></div><div class=\"line\">ls -R</div><div class=\"line\"><span class=\"comment\"># 移动或重命名文件或目录(注意source和destination不能相同)</span></div><div class=\"line\">mv <span class=\"built_in\">source</span> destination</div><div class=\"line\"><span class=\"comment\"># 删除文件，使用-r删除目录(小心，小心，小心)</span></div><div class=\"line\">rm target</div><div class=\"line\"><span class=\"comment\"># 拷贝文件或目录</span></div><div class=\"line\">cp <span class=\"built_in\">source</span> destination</div><div class=\"line\"><span class=\"comment\"># 挂载文件系统</span></div><div class=\"line\">mount /dev/device_name /media/device_name</div><div class=\"line\"><span class=\"comment\"># 卸载文件系统</span></div><div class=\"line\">umount /media/device_name</div></pre></td></tr></table></figure>\n<h5 id=\"2-2-系统管理命令\"><a href=\"#2-2-系统管理命令\" class=\"headerlink\" title=\"2.2 系统管理命令\"></a>2.2 系统管理命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 使用管理员权限执行命令(可能照成毁灭性后果，紧用来执行系统任务)</span></div><div class=\"line\">sudo <span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"comment\"># 切换到管理员账户</span></div><div class=\"line\">sudo <span class=\"_\">-s</span></div><div class=\"line\"><span class=\"comment\"># 退出管理员账户</span></div><div class=\"line\"><span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"comment\"># 使用管理员权限执行上次执行的命令(假设上次命令需要管理员权限执行，但是你忘记了sudo可以使用其快速重复执行)</span></div><div class=\"line\">sudo !!</div></pre></td></tr></table></figure>","more":"<h6 id=\"2-2-1-从-tgz或-tar-gz文件安装软件-通常是这样\"><a href=\"#2-2-1-从-tgz或-tar-gz文件安装软件-通常是这样\" class=\"headerlink\" title=\"2.2.1 从.tgz或.tar.gz文件安装软件(通常是这样)\"></a>2.2.1 从.tgz或.tar.gz文件安装软件(通常是这样)</h6><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 第一步，解压.tgz文件</span></div><div class=\"line\">tar -xvf xxx.tgz</div><div class=\"line\"><span class=\"comment\"># 第二步，切换到解压好的目录</span></div><div class=\"line\"><span class=\"built_in\">cd</span> software_directory</div><div class=\"line\"><span class=\"comment\"># 第三步，如果有README文件先查看README</span></div><div class=\"line\">cat README</div><div class=\"line\"><span class=\"comment\"># 第四步，自动检测系统环境，生成Makefile</span></div><div class=\"line\">./configure</div><div class=\"line\"><span class=\"comment\"># 第五步，编译软件(可能需要sudo)</span></div><div class=\"line\">make</div><div class=\"line\"><span class=\"comment\"># 第六步，安装软件到系统目录(可能需要sudo)</span></div><div class=\"line\">make install</div><div class=\"line\"><span class=\"comment\"># 第七步，清除生成的文件</span></div><div class=\"line\">make clean</div></pre></td></tr></table></figure>\n<h6 id=\"2-2-2-Ubuntu-Debian软件安装\"><a href=\"#2-2-2-Ubuntu-Debian软件安装\" class=\"headerlink\" title=\"2.2.2 Ubuntu/Debian软件安装\"></a>2.2.2 Ubuntu/Debian软件安装</h6><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 检测软件版本更新</span></div><div class=\"line\">sudo apt-get update</div><div class=\"line\"><span class=\"comment\"># 升级软件到最新版本</span></div><div class=\"line\">sudo apt-get upgrade</div><div class=\"line\"><span class=\"comment\"># 查找安装包</span></div><div class=\"line\">apt-cache search keyword</div><div class=\"line\"><span class=\"comment\"># 获取安装包的更多细节</span></div><div class=\"line\">apt-cache show package_name</div><div class=\"line\"><span class=\"comment\"># 安装软件</span></div><div class=\"line\">sudo apt-get install package_name</div><div class=\"line\"><span class=\"comment\"># 获取命令的输出(查看是否安装成功)</span></div><div class=\"line\"><span class=\"built_in\">command</span> | less</div></pre></td></tr></table></figure>\n<h6 id=\"2-2-3-Mac软件安装\"><a href=\"#2-2-3-Mac软件安装\" class=\"headerlink\" title=\"2.2.3 Mac软件安装\"></a>2.2.3 Mac软件安装</h6><h5 id=\"2-3-工作中常用文件操作命令\"><a href=\"#2-3-工作中常用文件操作命令\" class=\"headerlink\" title=\"2.3 工作中常用文件操作命令\"></a>2.3 工作中常用文件操作命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 打印文件到终端</span></div><div class=\"line\">cat file</div><div class=\"line\"><span class=\"comment\"># 查找与文件名匹配的文件</span></div><div class=\"line\">locate filename</div><div class=\"line\"><span class=\"comment\"># 查看命令的安装目录</span></div><div class=\"line\"><span class=\"built_in\">which</span> <span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"comment\"># 在给定文件中搜索与短语匹配的片段</span></div><div class=\"line\">grep phrase filename</div><div class=\"line\"><span class=\"comment\"># 在命令的输出中搜索短语</span></div><div class=\"line\"><span class=\"built_in\">command</span> | grep phrase</div></pre></td></tr></table></figure>\n<h5 id=\"2-4-工作中常用进程操作命令\"><a href=\"#2-4-工作中常用进程操作命令\" class=\"headerlink\" title=\"2.4 工作中常用进程操作命令\"></a>2.4 工作中常用进程操作命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 列出所有运行的进程</span></div><div class=\"line\">ps -ef</div><div class=\"line\"><span class=\"comment\"># 强制关闭进程</span></div><div class=\"line\"><span class=\"built_in\">kill</span> -9 pid</div><div class=\"line\"><span class=\"comment\"># 查看内存、CPU等占用</span></div><div class=\"line\">top</div><div class=\"line\"><span class=\"comment\"># 和top很像，但是更好，界面很清爽</span></div><div class=\"line\">htop</div><div class=\"line\"><span class=\"comment\"># 后台执行命令</span></div><div class=\"line\"><span class=\"built_in\">command</span> &amp;</div><div class=\"line\"><span class=\"comment\"># 后台执行命令并将日志输出到nohub.txt</span></div><div class=\"line\">nohup <span class=\"built_in\">command</span> &amp;</div></pre></td></tr></table></figure>\n<h5 id=\"2-5-压缩和加密命令\"><a href=\"#2-5-压缩和加密命令\" class=\"headerlink\" title=\"2.5 压缩和加密命令\"></a>2.5 压缩和加密命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 打包文件</span></div><div class=\"line\">tar -cvzf backup_output.tgz target_files_or_directories</div><div class=\"line\"><span class=\"comment\"># 解压.tgz或.tar.gz</span></div><div class=\"line\">tar -xvf target.tgz</div><div class=\"line\"><span class=\"comment\"># 加密文件</span></div><div class=\"line\">gpg -o outputfilename.gpg -c target_file</div><div class=\"line\"><span class=\"comment\"># 解密文件</span></div><div class=\"line\">gpg -o outputfilename <span class=\"_\">-d</span> target.gpg</div><div class=\"line\"><span class=\"comment\"># 加密文件并打包</span></div><div class=\"line\">gpg-zip -o encrypted_filename.tgz.gpg -c <span class=\"_\">-s</span> file_to_be_encrypted</div><div class=\"line\"><span class=\"comment\"># 解密打包文件</span></div><div class=\"line\">gpg-zip -o xxx.tgz <span class=\"_\">-d</span> target.tgz.gpg</div><div class=\"line\">tar -xvf xxx.tgz</div></pre></td></tr></table></figure>\n<h4 id=\"3-Bash-shell\"><a href=\"#3-Bash-shell\" class=\"headerlink\" title=\"3 Bash shell\"></a>3 Bash shell</h4><h5 id=\"3-1-目录\"><a href=\"#3-1-目录\" class=\"headerlink\" title=\"3.1 目录\"></a>3.1 目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 当前用户主目录</span></div><div class=\"line\">~/</div><div class=\"line\"><span class=\"comment\"># 当前目录</span></div><div class=\"line\">./</div><div class=\"line\"><span class=\"comment\"># 上级目录</span></div><div class=\"line\">../</div><div class=\"line\"><span class=\"comment\"># 上上级目录</span></div><div class=\"line\">../../</div><div class=\"line\"><span class=\"comment\"># 目录下所有文件</span></div><div class=\"line\">/*</div></pre></td></tr></table></figure>\n<h5 id=\"3-2-输出重定向\"><a href=\"#3-2-输出重定向\" class=\"headerlink\" title=\"3.2 输出重定向\"></a>3.2 输出重定向</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 重定向一个命令的输出为另一个目录的输入</span></div><div class=\"line\">command_1 | command_2</div><div class=\"line\"><span class=\"comment\"># 重定向命令的输出到文件(覆盖)</span></div><div class=\"line\"><span class=\"built_in\">command</span> &gt; file</div><div class=\"line\"><span class=\"comment\"># 重定向命令的输出到文件(追加)</span></div><div class=\"line\"><span class=\"built_in\">command</span> &gt;&gt; file</div><div class=\"line\"><span class=\"comment\"># 和|很像，但是它同时输出到终端和文件</span></div><div class=\"line\">tee target</div><div class=\"line\"><span class=\"comment\"># 重定向标准输出和标准错误到/dev/null(丢弃命令的所有输出)</span></div><div class=\"line\"><span class=\"built_in\">command</span> &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>\n<h5 id=\"3-3-执行流程\"><a href=\"#3-3-执行流程\" class=\"headerlink\" title=\"3.3 执行流程\"></a>3.3 执行流程</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 等命令1执行完再执行命令2</span></div><div class=\"line\">command_1; command_2</div><div class=\"line\"><span class=\"comment\"># 只有命令1执行成功(返回0)才会执行命令2</span></div><div class=\"line\">command_1 &amp;&amp; command_2</div><div class=\"line\"><span class=\"comment\"># 只有命令1执行失败(返回错误码)才会执行命令2</span></div><div class=\"line\">command_1 || command_2</div></pre></td></tr></table></figure>\n<h5 id=\"3-4-通配符\"><a href=\"#3-4-通配符\" class=\"headerlink\" title=\"3.4 通配符\"></a>3.4 通配符</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 零个或多个字符</span></div><div class=\"line\">*</div><div class=\"line\"><span class=\"comment\"># 匹配phrase或phrase开始的字符串</span></div><div class=\"line\">phrase*</div><div class=\"line\"><span class=\"comment\"># 匹配phrase或包含phrase的字符串</span></div><div class=\"line\">*phrase*</div><div class=\"line\"><span class=\"comment\"># 匹配任意单个字符</span></div><div class=\"line\">?</div><div class=\"line\"><span class=\"comment\"># 匹配chars中的任意一个字符</span></div><div class=\"line\">[chars]</div><div class=\"line\"><span class=\"comment\"># 匹配a-z中的任意一个字符(小写字母)</span></div><div class=\"line\">[a-z]</div></pre></td></tr></table></figure>\n<h3 id=\"二、高级命令\"><a href=\"#二、高级命令\" class=\"headerlink\" title=\"二、高级命令\"></a>二、高级命令</h3><h4 id=\"1-实用命令行工具补充\"><a href=\"#1-实用命令行工具补充\" class=\"headerlink\" title=\"1 实用命令行工具补充\"></a>1 实用命令行工具补充</h4><h5 id=\"1-1-网络相关命令\"><a href=\"#1-1-网络相关命令\" class=\"headerlink\" title=\"1.1 网络相关命令\"></a>1.1 网络相关命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 配置网络通信</span></div><div class=\"line\">ifconfig</div><div class=\"line\"><span class=\"comment\"># 连接到远程服务器</span></div><div class=\"line\">ssh username@ip_address</div><div class=\"line\"><span class=\"comment\"># 通过网络从一台机器递归拷贝文件或目录到另一台机器</span></div><div class=\"line\">scp -r source_filename:username@ip_address target_username@target_ip_address:target_filename</div><div class=\"line\"><span class=\"comment\"># 拷贝有变化的文件或目录</span></div><div class=\"line\">rsync <span class=\"built_in\">source</span> target</div><div class=\"line\"><span class=\"comment\"># 检测目标地址是否在线</span></div><div class=\"line\">ping ip_address</div><div class=\"line\"><span class=\"comment\"># 网络监控</span></div><div class=\"line\">netstat</div><div class=\"line\"><span class=\"comment\"># 查看启用了那些端口</span></div><div class=\"line\">nmap localhost</div></pre></td></tr></table></figure>\n<h6 id=\"1-1-1-wget\"><a href=\"#1-1-1-wget\" class=\"headerlink\" title=\"1.1.1 wget\"></a>1.1.1 wget</h6><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 通过http下载文件</span></div><div class=\"line\">wget http://example.com/folder/file</div><div class=\"line\"><span class=\"comment\"># 继续下载文件(网络中断)</span></div><div class=\"line\">wget -c http://example.com/folder/file</div><div class=\"line\"><span class=\"comment\"># 后台下载文件</span></div><div class=\"line\">wget -b wget -c http://example.com/folder/file</div><div class=\"line\"><span class=\"comment\"># 通过ftp下载文件</span></div><div class=\"line\">wget --ftp-user=USER --ftp-password=PASS ftp://example.com/folder/file</div></pre></td></tr></table></figure>\n<h6 id=\"1-1-2-netcat\"><a href=\"#1-1-2-netcat\" class=\"headerlink\" title=\"1.1.2 netcat\"></a>1.1.2 netcat</h6><h5 id=\"1-2-用户和组\"><a href=\"#1-2-用户和组\" class=\"headerlink\" title=\"1.2 用户和组\"></a>1.2 用户和组</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 改变文件或目录所有者</span></div><div class=\"line\">chown user_name:group_name directory_name</div><div class=\"line\"><span class=\"comment\"># 改变文件或目录的权限</span></div><div class=\"line\">chmod</div><div class=\"line\"><span class=\"comment\"># 创建一个用户</span></div><div class=\"line\">adduser</div><div class=\"line\"><span class=\"comment\"># 删除一个用户</span></div><div class=\"line\">deluser</div><div class=\"line\"><span class=\"comment\"># 临时切换到别的用户</span></div><div class=\"line\">su username</div><div class=\"line\"><span class=\"comment\"># 列出所有用户</span></div><div class=\"line\">users</div><div class=\"line\"><span class=\"comment\"># 列出所有组</span></div><div class=\"line\">groups</div></pre></td></tr></table></figure>\n<h4 id=\"2-工作中操作文件的命令补充\"><a href=\"#2-工作中操作文件的命令补充\" class=\"headerlink\" title=\"2 工作中操作文件的命令补充\"></a>2 工作中操作文件的命令补充</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看那些进程正在使用那些文件</span></div><div class=\"line\">lsof</div><div class=\"line\"><span class=\"comment\"># 比较两个文件</span></div><div class=\"line\">diff file_1 file_2</div><div class=\"line\"><span class=\"comment\"># 输出文件头开始的n行</span></div><div class=\"line\">head -n numbers_of_lines file</div><div class=\"line\"><span class=\"comment\"># 输出文件尾开始的n行</span></div><div class=\"line\">tail -n numbers_of_lines file</div><div class=\"line\"><span class=\"comment\"># 文件校验和</span></div><div class=\"line\">md5sum file</div><div class=\"line\"><span class=\"comment\"># 文件校验和(比md5sum更好，没有哈希碰撞)</span></div><div class=\"line\">sha1sum file</div><div class=\"line\"><span class=\"comment\"># 每隔n秒执行命令并高亮显示不同的输出</span></div><div class=\"line\">watch <span class=\"_\">-d</span> -n numbers_of_seconds <span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"comment\"># 测试命令执行时间</span></div><div class=\"line\">time <span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"comment\"># 查看目录下文件从大到小</span></div><div class=\"line\">du <span class=\"_\">-a</span> directory | sort -n -r | less</div><div class=\"line\"><span class=\"comment\"># 删除当前目录文件名中所有空格</span></div><div class=\"line\">rename -n <span class=\"string\">'s/[\\ ]/'</span><span class=\"string\">'/g'</span> *</div><div class=\"line\"><span class=\"comment\"># 改变当前目录文件名中的大写为小写</span></div><div class=\"line\">rename <span class=\"string\">'y/A-Z/a-z/'</span> *</div></pre></td></tr></table></figure>\n<h4 id=\"3-git\"><a href=\"#3-git\" class=\"headerlink\" title=\"3 git\"></a>3 git</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 开始一个新项目</span></div><div class=\"line\">git init</div><div class=\"line\">git config user.name <span class=\"string\">\"user_name\"</span></div><div class=\"line\">git config user.email <span class=\"string\">\"email\"</span></div><div class=\"line\"><span class=\"comment\"># 克隆项目(本地或远程)</span></div><div class=\"line\">git <span class=\"built_in\">clone</span> target</div><div class=\"line\"><span class=\"comment\"># 提交</span></div><div class=\"line\">git commit -m <span class=\"string\">\"message\"</span></div><div class=\"line\"><span class=\"comment\"># 查看文件状态</span></div><div class=\"line\">git status</div><div class=\"line\"><span class=\"comment\"># 查看提交日志</span></div><div class=\"line\">git <span class=\"built_in\">log</span></div><div class=\"line\"><span class=\"comment\"># 从另一个仓库拉取更新</span></div><div class=\"line\">git pull [target]</div><div class=\"line\"><span class=\"comment\"># 推送本地分支到别的仓库</span></div><div class=\"line\">git push [target]</div><div class=\"line\"><span class=\"comment\"># 创建一个新的分子</span></div><div class=\"line\">git branch [branchname]</div><div class=\"line\"><span class=\"comment\"># 切换到目标分支</span></div><div class=\"line\">git checkout [branchname]</div><div class=\"line\"><span class=\"comment\">#  删除分支</span></div><div class=\"line\">git branch <span class=\"_\">-d</span> [branchname]</div><div class=\"line\"><span class=\"comment\"># 合并两个分支</span></div><div class=\"line\">git merge [branchname] [branchname]</div><div class=\"line\"><span class=\"comment\"># 查看所有分支</span></div><div class=\"line\">git branch</div></pre></td></tr></table></figure>\n<h4 id=\"4-mysql\"><a href=\"#4-mysql\" class=\"headerlink\" title=\"4 mysql\"></a>4 mysql</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 获取帮助</span></div><div class=\"line\"><span class=\"built_in\">help</span></div><div class=\"line\"><span class=\"comment\"># 列出所有数据库</span></div><div class=\"line\">show databases;</div><div class=\"line\"><span class=\"comment\"># 查看数据库结构</span></div><div class=\"line\">show tables;</div><div class=\"line\"><span class=\"comment\"># 删除数据库</span></div><div class=\"line\">drop database databasename;</div><div class=\"line\"><span class=\"comment\"># 创建数据库</span></div><div class=\"line\">create database databasename default character <span class=\"built_in\">set</span> utf8 default collate utf8_general_ci;</div><div class=\"line\"><span class=\"comment\"># 创建数据库用户</span></div><div class=\"line\">create user username@localhost identified by <span class=\"string\">'password'</span>;</div><div class=\"line\"><span class=\"comment\"># 列出所有用户</span></div><div class=\"line\">select * from mysql.user;</div><div class=\"line\"><span class=\"comment\"># 删除数据用户</span></div><div class=\"line\">delete from mysql.user <span class=\"built_in\">where</span> User=<span class=\"string\">'user_name'</span>;</div><div class=\"line\"><span class=\"comment\"># 给用户开通所有数据库所有权限(和root用户一样)</span></div><div class=\"line\">grant all privileges on *.* to someuser@<span class=\"string\">\"%\"</span> identified by <span class=\"string\">'password'</span></div><div class=\"line\"><span class=\"comment\"># 给用户开通特定数据库特定权限</span></div><div class=\"line\">grant select,insert,update,delete,create,drop on somedb.* to someuser@<span class=\"string\">\"%\"</span> identified by <span class=\"string\">'password'</span>;</div><div class=\"line\"><span class=\"comment\"># 更改权限时使用</span></div><div class=\"line\">flush privileges;</div><div class=\"line\"><span class=\"comment\"># 备份数据库</span></div><div class=\"line\">mysqldump -u username -p --opt databasename &gt; dumpfile.sql</div><div class=\"line\"><span class=\"comment\"># 恢复数据库</span></div><div class=\"line\">mysql -u username -p databasename &lt; dumpfile.sql</div></pre></td></tr></table></figure>"},{"title":"What I Want?","date":"2016-08-17T04:31:28.000Z","category":null,"_content":"\n* 数据获取\n    * 验证码识别\n\n* 机器学习\n","source":"_drafts/what-I-want.md","raw":"title: What I Want?\ndate: 2016-08-17 12:31:28\ncategory:\ntags:\n---\n\n* 数据获取\n    * 验证码识别\n\n* 机器学习\n","slug":"what-I-want","published":0,"updated":"2016-12-07T05:41:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwqg8nxz00075qxz3g4oy7ss","content":"<ul>\n<li><p>数据获取</p>\n<ul>\n<li>验证码识别</li>\n</ul>\n</li>\n<li><p>机器学习</p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>数据获取</p>\n<ul>\n<li>验证码识别</li>\n</ul>\n</li>\n<li><p>机器学习</p>\n</li>\n</ul>\n"},{"title":"命令行的艺术","date":"2016-08-22T14:48:12.000Z","_content":"\n🌍\n- [前言](#前言)\n- [基础](#基础)\n- [日常使用](#日常使用)\n- [文件及数据处理](#文件及数据处理)\n- [系统调试](#系统调试)\n- [单行脚本](#单行脚本)\n- [冷门但有用](#冷门但有用)\n- [仅限 OS X 系统](#仅限-os-x-系统)\n- [仅限 Windows 系统](#仅限-windows-系统)\n- [更多资源](#更多资源)\n- [免责声明](#免责声明)\n\n\n![curl -s 'https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md' | egrep -o '`\\w+`' | tr -d '`' | cowsay -W50](https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/cowsay.png)\n\n<!-- more -->\n\n熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。\n\n这篇文章是[许多作者和译者](AUTHORS.md)共同的成果。\n这里的部分内容\n[首次](http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands)\n[出现](http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix)\n于 [Quora](http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know)，\n但已经迁移到了 Github，并由众多高手做出了许多改进。\n如果你在本文中发现了错误或者存在可以改善的地方，请[**贡献你的一份力量**](/CONTRIBUTING.md)。\n\n## 前言\n\n涵盖范围：\n\n- 这篇文章对刚接触命令行的新手，以及具有命令行使用经验的人都有用处。本文致力于做到*覆盖面广*（尽量包括一切重要的内容），*具体*（给出最常见的具体的例子），以及*简洁*（避免不必要的，或是可以在其他地方轻松查到的细枝末节）。每个技巧在特定情境下或是基本的，或是能显著节约时间。\n- 本文为 Linux 所写，除了[仅限 OS X 系统](#仅限-os-x-系统)和[仅限 Windows 系统](#仅限-windows-系统)的部分。其它节中的大部分内容都适用于其它 Unix 系统或 OS X，甚至 Cygwin。\n- 本文关注于交互式 Bash，尽管很多技巧也适用于其他 shell 或 Bash 脚本。\n- 本文包括了“标准的”Unix 命令和需要安装特定包的命令，只要它们足够重要。\n\n注意事项：\n\n- 为了能在一页内展示尽量多的东西，一些具体的信息会被间接地包含在引用页里。聪明机智的你，如果掌握了使用 Google 搜索引擎的基本思路与命令，那么你将可以查阅到更多的详细信息。使用 `apt-get`，`yum`，`dnf`，`pacman`，\n`pip` 或 `brew`（以及其它合适的包管理器）来安装新程序。\n- 使用 [Explainshell](http://explainshell.com/) 去获取相关命令、参数、管道等内容的解释。\n\n\n## 基础\n\n- 学习 Bash 的基础知识。具体来说，输入 `man bash` 并至少全文浏览一遍; 它很简单并且不长。其他的 shell 可能很好用，但 Bash 功能强大到几乎所有情况下都是可用的 （ *只*学习 zsh，fish 或其他的 shell 的话，在你自己的电脑上会显得很方便，但在很多情况下会限制你，比如当你需要在服务器上工作时）。\n\n- 学习并掌握至少一个基于文本的编辑器。通常 Vim （`vi`） 会是你最好的选择，因为在终端里进行随机编辑，Vim 真的毫无敌手，哪怕是 Emacs、某大型 IDE 甚至时下非常流行的编辑器。\n\n- 学会如何使用 `man` 命令去阅读文档。学会使用 `apropos` 去查找文档。了解有些命令并不对应可执行文件，而是Bash内置的，可以使用 `help` 和 `help -d` 命令获取帮助信息。你可以用 `type 命令` 来判断它到底是可执行文件、shell 内置命令、还是别名。\n\n- 学会使用 `>` 和 `<` 来重定向输出和输入，学会使用 `|` 来重定向管道。明白 `>` 会覆盖了输出文件而 `>>` 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。\n\n- 学会使用通配符 `*` （或许再算上 `?` 和 `[`...`]`） 和引用以及引用中 `'` 和 `\"` 的区别。\n\n- 熟悉 Bash 任务管理工具：`&`，**ctrl-z**，**ctrl-c**，`jobs`，`fg`，`bg`，`kill` 等。\n\n- 了解 `ssh`，以及学会通过使用 `ssh-agent`，`ssh-add` 等命令来实现基本的无密码认证。\n\n- 学会基本的文件管理：`ls` 和 `ls -l` （了解 `ls -l` 中每一列代表的意义），`less`，`head`，`tail` 和 `tail -f` （甚至 `less +F`），`ln` 和 `ln -s` （了解硬链接与软链接的区别），`chown`，`chmod`，`du` （硬盘使用情况概述：`du -hs *`）。 关于文件系统的管理，学习 `df`，`mount`，`fdisk`，`mkfs`，`lsblk`。知道 inode 是什么（与 `ls -i` 和 `df -i` 等命令相关）。\n\n- 学习基本的网络管理：`ip` 或 `ifconfig`，`dig`。\n\n- 学习并使用一种版本控制管理系统，例如 `git`。\n\n- 熟悉正则表达式，以及 `grep`／`egrep` 里不同参数的作用，例如 `-i`，`-o`，`-v`，`-A`，`-B` 和 `-C`，这些参数是值得学习并掌握的。\n\n- 学会使用 `apt-get`，`yum`，`dnf` 或 `pacman` （取决于你使用的 Linux 发行版）来查找或安装软件包。并确保你的环境中有 `pip` 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 `pip` 来安装会很方便）。\n\n\n## 日常使用\n\n- 在 Bash 中，可以使用 **Tab** 自动补全参数，使用 **ctrl-r** 搜索命令行历史（在按下之后，键入便可以搜索，重复按下 **ctrl-r** 会在更多匹配中循环，按下 **Enter** 会执行找到的命令，按下右方向键会将结果放入当前行中，使你可以进行编辑）。\n\n- 在 Bash 中，可以使用 **ctrl-w** 删除你键入的最后一个单词，使用 **ctrl-u** 删除整行，使用 **alt-b** 和 **alt-f** 以单词为单位移动光标，使用 **ctrl-a** 将光标移至行首，使用 **ctrl-e** 将光标移至行尾，使用 **ctrl-k** 删除光标至行尾的所有内容，使用 **ctrl-l** 清屏。键入 `man readline` 查看 Bash 中的默认快捷键，内容很多。例如 **alt-.** 循环地移向前一个参数，以及 **alt-*** 展开通配符。\n\n\n- 你喜欢的话，可以键入 `set -o vi` 来使用 vi 风格的快捷键，而 `set -o emacs` 可以把它改回来。\n\n- 为了方便地键入长命令，在设置你的编辑器后（例如 `export EDITOR=vim`），键入 **ctrl-x** **ctrl-e** 会打开一个编辑器来编辑当前命令。在 vi 模式下则键入 **escape-v** 实现相同的功能。\n\n- 键入 `history` 查看命令行历史记录，再用 `!n`（`n` 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是用 `!$` 指代上次键入的参数，以及用 `!!` 指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些通常被 **ctrl-r** 和 **alt-.** 取代。\n\n- 要进入 home 目录可以用 `cd`。要访问你的 home 目录中的文件，可以使用前缀 `~`（例如 `~/.bashrc`）。在 `sh` 脚本里则用 `$HOME` 指代 home 目录。\n\n- 回到上一个工作路径：`cd -`\n\n- 如果你输入命令的时候改变了主意，按下 **alt-#** 在行首添加 `#`，或者依次按下 **ctrl-a**， **#**， **enter**。这样做的话，之后你可以很方便的利用命令行历史回到你刚才输入到一半的命令。\n\n- 使用 `xargs` （ 或 `parallel`）。他们非常给力。注意到你可以控制每行参数个数（`-L`）和最大并行数（`-P`）。如果你不确定它们是否会按你想的那样工作，先使用 `xargs echo` 查看一下。此外，使用 `-I{}` 会很方便。例如：\n```bash\n      find . -name '*.py' | xargs grep some_function\n      cat hosts | xargs -I{} ssh root@{} hostname\n```\n\n\n- `pstree -p` 有助于展示进程树。\n\n- 使用 `pgrep` 和 `pkill` 根据名字查找进程或发送信号（`-f` 参数通常有用）。\n\n- 了解你可以发往进程的信号的种类。比如，使用 `kill -STOP [pid]` 停止一个进程。使用 `man 7 signal` 查看详细列表。\n\n- 使用 `nohup` 或 `disown` 使一个后台进程持续运行。\n\n- 使用 `netstat -lntp` 或 `ss -plat` 检查哪些进程在监听端口（默认是检查 TCP 端口; 使用参数 `-u` 检查 UDP 端口）。\n\n- 有关打开套接字和文件，请参阅 `lsof`。\n\n- 使用 `uptime` 或 `w` 来查看系统已经运行多长时间。\n\n- 使用 `alias` 来创建常用命令的快捷形式。例如：`alias ll='ls -latr'` 创建了一个新的命令别名 `ll`。\n\n- 把别名、shell 选项和常用函数保存在 `~/.bashrc`，然后[安排登陆 shell 来读取](http://superuser.com/a/183980/7106)。这样你就可以在所有 shell 会话中使用你的设定。\n\n- 把环境变量的设定以及登陆时要执行的命令保存在 `~/.bash_profile`。对于从图形界面启动的，以及 `cron` 工作的 shell，需要单独配置。\n\n- 要在几台电脑中同步你的配置文件（例如 `.bashrc` 和 `.bash_profile`），可以用 Git。\n\n- 当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 `\"FOO\"`。尽量使用 `-0` 或 `-print0` 选项以便用空字符来分隔文件名，例如 `locate -0 pattern | xargs -0 ls -al` 或 `find / -print0 -type d | xargs -0 ls -al`。如果 for 循环中循环访问的文件名含有空格，只需用 `IFS=$'\\n'` 把内部字段分隔符设为换行符。\n\n- 在 Bash 脚本中，使用 `set -x` 去调试输出，尽可能地使用严格模式，使用 `set -e` 令脚本在发生错误时退出而不是继续运行，使用 `set -u` 来检查是否使用了未赋值的变量，使用 `set -o pipefail` 严谨地对待错误（尽管问题可能很微妙）。当牵扯到很多脚本时，使用 `trap`。一个好的习惯是在脚本文件开头这样写，这会使它检测一些错误，并在错误发生时中断程序并输出信息：\n```bash\n      set -euo pipefail\n      trap \"echo 'error: Script failed: see failed command above'\" ERR\n```\n\n- 在 Bash 脚本中，子 shell（使用括号 `(...)`）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：\n```bash\n      # do something in current dir\n      (cd /some/other/dir && other-command)\n      # continue in original dir\n```\n\n- 在 Bash 中，要注意其中有许多形式的扩展。检查变量是否存在：`${name:?error message}`。例如，当 Bash 脚本需要一个参数时，可以使用这样的代码 `input_file=${1:?usage: $0 input_file}`。数学表达式：`i=$(( (i + 1) % 5 ))`。序列：`{1..10}`。截断字符串：`${var%suffix}` 和 `${var#prefix}`。例如，假设 `var=foo.pdf`，那么 `echo ${var%.pdf}.txt` 将输出 `foo.txt`。\n\n- 使用括号扩展（`{`...`}`）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 `mv foo.{txt,pdf} some-dir`（同时移动两个文件），`cp somefile{,.bak}`（会被扩展成 `cp somefile somefile.bak`）或者 `mkdir -p test-{a,b,c}/subtest-{1,2,3}`（会被扩展成所有可能的组合，并创建一个目录树）。\n\n- 通过使用 `<(some command)` 可以将输出视为文件。例如，对比本地文件 `/etc/hosts` 和一个远程文件：\n```sh\n      diff /etc/hosts <(ssh somehost cat /etc/hosts)\n```\n\n- 了解 Bash 中的“here documents”，例如 `cat <<EOF ...`。\n\n- 在 Bash 中，同时重定向标准输出和标准错误，`some-command >logfile 2>&1`。通常，为了保证命令不会在标准输入里残留一个打开了的文件句柄导致你当前所在的终端无法操作，添加 `</dev/null` 是一个好习惯。\n\n- 使用 `man ascii` 查看具有十六进制和十进制值的ASCII表。`man unicode`，`man utf-8`，以及 `man latin1` 有助于你去了解通用的编码信息。\n\n- 使用 `screen` 或 [`tmux`](https://tmux.github.io/) 来使用多个屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。另一个轻量级的解决方案是 [`dtach`](https://github.com/bogner/dtach)。\n\n- ssh 中，了解如何使用 `-L` 或 `-D`（偶尔需要用 `-R`）去开启隧道是非常有用的，例如当你需要从一台远程服务器上访问 web。\n\n- 对 ssh 设置做一些小优化可能是很有用的，例如这个 `~/.ssh/config` 文件包含了防止特定环境下断开连接、压缩数据、多通道等选项：\n```\n      TCPKeepAlive=yes\n      ServerAliveInterval=15\n      ServerAliveCountMax=6\n      Compression=yes\n      ControlMaster auto\n      ControlPath /tmp/%r@%h:%p\n      ControlPersist yes\n```\n\n- 部分其他的关于 ssh 的选项是安全敏感的，而且应当小心启用。例如在可信任的网络中：`StrictHostKeyChecking=no`，`ForwardAgent=yes`\n\n- 考虑使用 [`mosh`](https://mosh.mit.edu/) 作为 ssh 的替代品，它使用 UDP 协议。\n\n- 获取文件的八进制格式权限，使用类似如下的代码：\n```sh\n      stat -c '%A %a %n' /etc/timezone\n```\n\n- 使用 [`percol`](https://github.com/mooz/percol) 或者 [`fzf`](https://github.com/junegunn/fzf) 可以交互式地从另一个命令输出中选取值。\n\n- 使用 `fpp`（[PathPicker](https://github.com/facebook/PathPicker)）可以与基于另一个命令(例如 `git`）输出的文件交互。\n\n- 将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：\n`python -m SimpleHTTPServer 7777` （使用端口 7777 和 Python 2）或`python -m http.server 7777` （使用端口 7777 和 Python 3）。\n\n- 以某种权限执行命令，使用`sudo`（root 权限）或`sudo -u`（其他用户）。使用`su`或者`sudo bash`来启动一个以对应用户权限运行的 shell。使用`su -`模拟其他用户的登录。\n\n- 了解命令行的 [128K 限制](https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong)。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 `find` 或 `xargs` 通常可以解决。）\n\n- 要实现基本的计算器功能（或者一般地使用 Python），可以使用 `python` 解释器。例如：\n```\n>>> 2+3\n5\n```\n\n\n## 文件及数据处理\n\n- 在当前路径下通过文件名定位一个文件，`find . -iname '*something*'`（或类似的）。在所有路径下通过文件名查找文件，使用 `locate something` （但请记住 `updatedb` 可能没有对最近新建的文件建立索引）。\n\n- 使用 [`ag`](https://github.com/ggreer/the_silver_searcher) 在源代码或数据文件里检索（比 `grep -r` 更好）。\n\n- 将 HTML 转为文本：`lynx -dump -stdin`\n\n- Markdown，HTML，以及所有文档格式之间的转换，试试 [`pandoc`](http://pandoc.org/)。\n\n- 如果你不得不处理 XML，`xmlstarlet` 宝刀未老。\n\n- 使用 [`jq`](http://stedolan.github.io/jq/) 处理 JSON。\n\n- 使用 [`shyaml`](https://github.com/0k/shyaml) 处理 YAML。\n\n- Excel 或 CSV 文件的处理，[csvkit](https://github.com/onyxfish/csvkit) 提供了 `in2csv`，`csvcut`，`csvjoin`，`csvgrep` 等工具。\n\n- 关于 Amazon S3，[`s3cmd`](https://github.com/s3tools/s3cmd) 很方便而 [`s4cmd`](https://github.com/bloomreach/s4cmd) 更快。Amazon 官方的 [`aws`](https://github.com/aws/aws-cli) 以及  [`saws`](https://github.com/donnemartin/saws) 是其他 AWS 相关工作的基础。\n\n- 了解如何使用 `sort` 和 `uniq`，包括 uniq 的 `-u` 参数和 `-d` 参数，详见后文单行脚本节。另外可以了解一下 `comm`。\n\n- 了解如何使用 `cut`，`paste` 和 `join` 来更改文件。很多人都会使用 `cut`，但几乎都不会使用 `join`。\n\n- 了解如何运用 `wc` 去计算新行数（`-l`），字符数（`-m`），单词数（`-w`）以及字节数（`-c`）。\n\n- 了解如何使用 `tee` 将标准输入复制到文件甚至标准输出，例如 `ls -al | tee file.txt`。\n\n- 了解语言环境对许多命令行工具的微妙影响，包括排序的顺序和性能。大多数 Linux 的安装过程会将 `LANG` 或其他有关的变量设置为符合本地的设置。意识到当你改变语言环境时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降*许多倍*。某些情况下（例如集合运算）你可以放心的使用 `export LC_ALL=C` 来忽略掉国际化并使用基于字节的顺序。\n\n- 你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在前面，例如 `TZ=Pacific/Fiji date`。\n\n- 了解 `awk` 和 `sed` 关于数据的简单处理的用法。例如，将文本文件中第三列的所有数字求和：`awk '{ x += $3 } END { print x }'`. 这可能比同等作用的 Python 代码快三倍且代码量少三倍。\n\n- 替换一个或多个文件中出现的字符串：\n```sh\n      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt\n```\n\n- 使用 [`repren`](https://github.com/jlevy/repren) 来批量重命名，或是在多个文件中搜索替换。（有些时候 `rename` 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）\n```sh\n      # 将文件、目录和内容全部重命名 foo -> bar:\n      repren --full --preserve-case --from foo --to bar .\n      # 还原所有备份文件 whatever.bak -> whatever:\n      repren --renames --from '(.*)\\.bak' --to '\\1' *.bak\n      # 用 rename 实现上述功能（若可用）:\n      rename 's/\\.bak$//' *.bak\n```\n\n- 根据 man 页面的描述，`rsync` 真的是一个快速且非常灵活的文件复制工具。它通常被用于机器间的同步，但在本地也同样有用。在安全限制允许下，用 `rsync` 代替 `scp` 可以实现续传，而不用重新从头开始。它同时也是删除大量文件的[最快方法](https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html)之一：\n```sh\nmkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir\n```\n\n- 使用 `shuf` 从一个文件中随机选取多行。\n\n- 了解 `sort` 的参数。处理数字方面，使用 `-n` 或者 `-h` 来处理可读性数字（例如 `du -h` 的输出）。明白键的工作原理（`-t` 和 `-k`）。例如，注意到你需要 `-k1，1` 来仅按第一个域来排序，而 `-k1` 意味着按整行排序。稳定排序（`sort -s`）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 `sort -k1，1 | sort -s -k2，2`。\n\n- 如果你想在 Bash 命令行中写 tab 制表符，按下 **ctrl-v** **[Tab]** 或键入 `$'\\t'` （后者可能更好，因为你可以复制粘贴它）。\n\n- 标准的源代码对比及合并工具是 `diff` 和 `patch`。使用 `diffstat` 查看变更总览数据。注意到 `diff -r` 对整个文件夹有效。使用 `diff -r tree1 tree2 | diffstat` 查看变更总览数据。\n\n- 对于二进制文件，使用 `hd` 使其以十六进制显示以及使用 `bvi` 来编辑二进制。\n\n- 同样对于二进制文件，`strings`（包括 `grep` 等等）允许你查找一些文本。\n\n- 二进制文件对比（Delta 压缩），使用 `xdelta3`。\n\n- 使用 `iconv` 更改文本编码。而更高级的用法，可以使用 `uconv`，它支持一些高级的 Unicode 功能。例如，这条命令将所有元音字母转为小写并移除了：\n```sh\n      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt\n```\n\n- 拆分文件，查看 `split`（按大小拆分）和 `csplit`（按模式拆分）。\n\n- 用 [`dateutils`](http://www.fresse.org/dateutils/) 中的 `dateadd`、`datediff`、`strptime` 等工具操作日期和时间表达式。\n\n- 使用 `zless`、`zmore`、`zcat` 和 `zgrep` 对压缩过的文件进行操作。\n\n- 文件属性可以通过 `chattr` 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：`sudo chattr +i /critical/directory/or/file`\n\n- 使用 `getfacl` 和 `setfacl` 以保存和恢复文件权限。例如：\n```sh\n   getfacl -R /some/path > permissions.txt\n   setfacl --restore=permissions.txt\n```\n\n## 系统调试\n\n- `curl` 和 `curl -I` 可以便捷地被应用于 web 调试中，它们的好兄弟 `wget` 也可以，或者是更潮的 [`httpie`](https://github.com/jkbrzt/httpie)。\n\n- 使用 `iostat`、`netstat`、`top` （`htop` 更佳）和 `dstat` 去获取硬盘、cpu 和网络的状态。熟练掌握这些工具可以使你快速的对系统的当前状态有一个大概的认识。\n\n- 使用 `netstat` 和 `ss` 查看网络连接的细节。\n\n- 若要对系统有一个深度的总体认识，使用 [`glances`](https://github.com/nicolargo/glances)。它在一个终端窗口中向你提供一些系统级的数据。这对于快速的检查各个子系统非常有帮助。\n\n- 若要了解内存状态，运行并理解 `free` 和 `vmstat` 的输出。尤其注意“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，因此它与空闲内存无关。\n\n- Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 `kill -3 <pid>` 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准输出/日志文件。JDK 中的 `jps`，`jstat`，`jstack`，`jmap` 很有用。[SJK tools](https://github.com/aragozin/jvm-tools) 更高级.\n\n- 使用 `mtr` 去跟踪路由，用于确定网络问题。\n\n- 用 `ncdu` 来查看磁盘使用情况，它比常用的命令，如 `du -sh *`，更节省时间。\n\n- 查找正在使用带宽的套接字连接或进程，使用 `iftop` 或 `nethogs`。\n\n- `ab` 工具（捆绑于 Apache）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 `siege`。\n\n- `wireshark`，`tshark` 和 `ngrep` 可用于复杂的网络调试。\n\n- 了解 `strace` 和 `ltrace`。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（`-c`）和附加到一个运行的进程参数 （`-p`）。\n\n- 了解使用 `ldd` 来检查共享库。\n\n- 了解如何运用 `gdb` 连接到一个运行着的进程并获取它的堆栈轨迹。\n\n- 学会使用 `/proc`。它在调试正在出现的问题的时候有时会效果惊人。比如：`/proc/cpuinfo`，`/proc/meminfo`，`/proc/cmdline`，`/proc/xxx/cwd`，`/proc/xxx/exe`，`/proc/xxx/fd/`，`/proc/xxx/smaps`（这里的 `xxx` 表示进程的 id 或 pid）。\n\n- 当调试一些之前出现的问题的时候，`sar` 非常有用。它展示了 cpu、内存以及网络等的历史数据。\n\n- 关于更深层次的系统分析以及性能分析，看看 `stap`（[SystemTap](https://sourceware.org/systemtap/wiki)），[`perf`](https://en.wikipedia.org/wiki/Perf_(Linux))，以及[`sysdig`](https://github.com/draios/sysdig)。\n\n- 查看你当前使用的系统，使用 `uname` ， `uname -a` （Unix／kernel 信息） 或者 `lsb_release -a` （Linux 发行版信息）。\n\n- 无论什么东西工作得很欢乐时试试 `dmesg`（可能是硬件或驱动问题）。\n\n- 如果你删除了一个文件，但通过 `du` 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：\n`lsof | grep deleted | grep \"filename-of-my-big-file\"`\n\n\n## 单行脚本\n\n一些命令组合的例子：\n\n- 当你需要对文本文件做集合交、并、差运算时，结合使用 `sort`/`uniq` 很有帮助。假设 `a` 与 `b` 是两内容不同的文件。这种方式效率很高，并且在小文件和上G的文件上都能运用 （`sort` 不被内存大小约束，尽管在 `/tmp` 在一个小的根分区上时你可能需要 `-T` 参数），参阅前文中关于 `LC_ALL` 和 `sort` 的 `-u` 参数的部分。\n```sh\n      cat a b | sort | uniq > c   # c is a union b\n      cat a b | sort | uniq -d > c   # c is a intersect b\n      cat a b b | sort | uniq -u > c   # c is set difference a - b\n```\n\n- 使用 `grep . *`（每行都会附上文件名）或者 `head -100 *`（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 `/sys`、`/proc`、`/etc`）时特别好用。\n\n\n- 计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：\n```sh\n      awk '{ x += $3 } END { print x }' myfile\n```\n\n- 如果你想在文件树上查看大小/日期，这可能看起来像递归版的 `ls -l` 但比 `ls -lR` 更易于理解：\n```sh\n      find . -type f -ls\n```\n\n- 假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 `acct_id` 参数在URI中。如果你想计算出每个 `acct_id` 值有多少次请求，使用如下代码：\n```sh\n      cat access.log | egrep -o 'acct_id=[0-9]+' | cut -d= -f2 | sort | uniq -c | sort -rn\n```\n\n- 要连续地监测变化，可以使用 `watch`，例如检查某个文件夹中文件的改变，可以用 `watch -d -n 2 'ls -rtlh | tail'`；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 `watch -d -n 2 ifconfig`。\n\n- 运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：\n```sh\n      function taocl() {\n        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|\n          pandoc -f markdown -t html |\n          iconv -f 'utf-8' -t 'unicode' |\n          xmlstarlet fo --html --dropdtd |\n          xmlstarlet sel -t -v \"(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]\" |\n          xmlstarlet unesc | fmt -80\n      }\n```\n\n## 冷门但有用\n\n- `expr`：计算表达式或正则匹配\n\n- `m4`：简单地宏处理器\n\n- `yes`：多次打印字符串\n\n- `cal`：漂亮的日历\n\n- `env`：执行一个命令（脚本文件中很有用）\n\n- `printenv`：打印环境变量（调试时或在使用脚本文件时很有用）\n\n- `look`：查找以特定字符串开头的单词\n\n- `cut`、`paste` 和 `join`：数据修改\n\n- `fmt`：格式化文本段落\n\n- `pr`：将文本格式化成页/列形式\n\n- `fold`：包裹文本中的几行\n\n- `column`：将文本格式化成多列或表格\n\n- `expand` 和 `unexpand`：制表符与空格之间转换\n\n- `nl`：添加行号\n\n- `seq`：打印数字\n\n- `bc`：计算器\n\n- `factor`：分解因数\n\n- [`gpg`](https://gnupg.org/)：加密并签名文件\n\n- `toe`：terminfo entries 列表\n\n- `nc`：网络调试及数据传输\n\n- `socat`：套接字代理，与 `netcat` 类似\n\n- [`slurm`](https://github.com/mattthias/slurm)：网络可视化\n\n- `dd`：文件或设备间传输数据\n\n- `file`：确定文件类型\n\n- `tree`：以树的形式显示路径和文件，类似于递归的 `ls`\n\n- `stat`：文件信息\n\n- `time`：执行命令，并计算执行时间\n\n- `timeout`：在指定时长范围内执行命令，并在规定时间结束后停止进程\n\n- `lockfile`：使文件只能通过 `rm -f` 移除\n\n- `logrotate`： 切换、压缩以及发送日志文件\n\n- `watch`：重复运行同一个命令，展示结果并高亮有更改的部分\n\n- `tac`：反向输出文件\n\n- `shuf`：文件中随机选取几行\n\n- `comm`：一行一行的比较排序过的文件\n\n- `pv`：监视通过管道的数据\n\n- `hd`，`hexdump`，`xxd`，`biew` 和 `bvi`：保存或编辑二进制文件\n\n- `strings`：从二进制文件中抽取文本\n\n- `tr`：转换字母\n\n- `iconv` 或 `uconv`：简易的文件编码\n\n- `split` 和 `csplit`：分割文件\n\n- `sponge`：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 `grep -v something some-file | sponge some-file`\n\n- `units`：将一种计量单位转换为另一种等效的计量单位（参阅 `/usr/share/units/definitions.units`）\n\n- `apg`：随机生成密码\n\n- `7z`：高比例的文件压缩\n\n- `ldd`：动态库信息\n\n- `nm`：提取 obj 文件中的符号\n\n- `ab`：性能分析 web 服务器\n\n- `strace`：系统调用调试\n\n- `mtr`：更好的网络调试跟踪工具\n\n- `cssh`：可视化的并发 shell\n\n- `rsync`：通过 ssh 或本地文件系统同步文件和文件夹\n\n- `wireshark` 和 `tshark`：抓包和网络调试工具\n\n- `ngrep`：网络层的 grep\n\n- `host` 和 `dig`：DNS 查找\n\n- `lsof`：列出当前系统打开文件的工具以及查看端口信息\n\n- `dstat`：系统状态查看\n\n- [`glances`](https://github.com/nicolargo/glances)：高层次的多子系统总览\n\n- `iostat`：硬盘使用状态\n\n- `mpstat`： CPU 使用状态\n\n- `vmstat`： 内存使用状态\n\n- `htop`：top 的加强版\n\n- `last`：登入记录\n\n- `w`：查看处于登录状态的用户\n\n- `id`：用户/组 ID 信息\n\n- `sar`：系统历史数据\n\n- `iftop` 或 `nethogs`：套接字及进程的网络利用\n\n- `ss`：套接字数据\n\n- `dmesg`：引导及系统错误信息\n\n- `sysctl`： 在内核运行时动态地查看和修改内核的运行参数\n\n- `hdparm`：SATA/ATA 磁盘更改及性能分析\n\n- `lsblk`：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息\n\n- `lshw`，`lscpu`，`lspci`，`lsusb` 和 `dmidecode`：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等\n\n- `lsmod` 和 `modinfo`：列出内核模块，并显示其细节\n\n- `fortune`，`ddate` 和 `sl`：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”\n\n\n## 仅限 OS X 系统\n\n以下是*仅限于* OS X 系统的技巧\n\n- 用 `brew` （Homebrew）或者 `port` （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。\n\n- 用 `pbcopy` 复制任何命令的输出到桌面应用，用 `pbpaste` 粘贴输入。\n\n- 若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 **alt-b**、**alt-f** 等命令中用到），打开 偏好设置 -> 描述文件 -> 键盘 并勾选“使用 Option 键作为 Meta 键”。\n\n- 用 `open` 或者 `open -a /Applications/Whatever.app` 使用桌面应用打开文件。\n\n- Spotlight： 用 `mdfind` 搜索文件，用 `mdls` 列出元数据（例如照片的 EXIF 信息）。\n\n- 注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 `ps`，`ls`，`tail`，`awk`，`sed`）都和 Linux 中有些微的不同，这些极大的被 System V-style Unix 和 GNU 工具影响。你可以通过标题为 \"BSD General Commands Manual\" 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 `gawk` 和 `gsed` 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 `perl` ）或者经过仔细的测试。\n\n- 用 `sw_vers` 获取 OS X 的版本信息。\n\n## 仅限 Windows 系统\n\n- 要在 Microsoft Windows 中使用 Unix shell，可以安装 [Cygwin](https://cygwin.com/)。本文档中介绍的大多数内容都将适用。\n\n- 通过 Cygwin 的包管理器来安装额外的 Unix 程序。\n\n- 使用 `mintty` 作为你的命令行窗口。\n\n- 要访问 Windows 剪贴板，可以通过 `/dev/clipboard`。\n\n- 运行 `cygstart` 以通过默认程序打开一个文件。\n\n- 要访问 Windows 注册表，可以使用 `regtool`。\n\n- 注意 Windows 驱动器路径 `C:\\` 在 Cygwin 中用 `/cygdrive/c` 代表，而 Cygwin 的 `/` 在 Windows 中显示在 `C:\\cygwin`。要转换 Cygwin 和 Windows 风格的路径可以用 `cygpath`。这在需要调用 Windows 程序的脚本里很有用。\n\n- 学会使用 `wmic`，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。\n\n## 更多资源\n\n- [awesome-shell](https://github.com/alebcay/awesome-shell)：一份精心组织的命令行工具及资源的列表。\n- [awesome-osx-command-line](https://github.com/herrbischoff/awesome-osx-command-line)：一份针对 OS X 命令行的更深入的指南。\n- [Strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/)：为了编写更好的脚本文件。\n- [shellcheck](https://github.com/koalaman/shellcheck)：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。\n- [Filenames and Pathnames in Shell](http://www.dwheeler.com/essays/filenames-in-shell.html)：有关如何在 shell 脚本里正确处理文件名的细枝末节。\n- [Data Science at the Command Line](http://datascienceatthecommandline.com/#tools)：用于数据科学的一些命令和工具，摘自同名书籍。\n\n## 免责声明\n\n除去特别微小的任务，编写代码是出于方便阅读的目的。能力往往伴随着责任。你 *可以* 在 Bash 中做一些事并不意味着你应该去做！;)\n\n\n## 授权条款\n\n[![Creative Commons License](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)](http://creativecommons.org/licenses/by-sa/4.0/)\n\n本文使用授权协议 [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/)。\n","source":"_posts/the-art-of-command-line.md","raw":"title: 命令行的艺术\ndate: 2016-08-22 22:48:12\ncategory: 转载\ntags:\n- bash\n- shell\n- linux\n- macOS\n- windows\n---\n\n🌍\n- [前言](#前言)\n- [基础](#基础)\n- [日常使用](#日常使用)\n- [文件及数据处理](#文件及数据处理)\n- [系统调试](#系统调试)\n- [单行脚本](#单行脚本)\n- [冷门但有用](#冷门但有用)\n- [仅限 OS X 系统](#仅限-os-x-系统)\n- [仅限 Windows 系统](#仅限-windows-系统)\n- [更多资源](#更多资源)\n- [免责声明](#免责声明)\n\n\n![curl -s 'https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md' | egrep -o '`\\w+`' | tr -d '`' | cowsay -W50](https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/cowsay.png)\n\n<!-- more -->\n\n熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。\n\n这篇文章是[许多作者和译者](AUTHORS.md)共同的成果。\n这里的部分内容\n[首次](http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands)\n[出现](http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix)\n于 [Quora](http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know)，\n但已经迁移到了 Github，并由众多高手做出了许多改进。\n如果你在本文中发现了错误或者存在可以改善的地方，请[**贡献你的一份力量**](/CONTRIBUTING.md)。\n\n## 前言\n\n涵盖范围：\n\n- 这篇文章对刚接触命令行的新手，以及具有命令行使用经验的人都有用处。本文致力于做到*覆盖面广*（尽量包括一切重要的内容），*具体*（给出最常见的具体的例子），以及*简洁*（避免不必要的，或是可以在其他地方轻松查到的细枝末节）。每个技巧在特定情境下或是基本的，或是能显著节约时间。\n- 本文为 Linux 所写，除了[仅限 OS X 系统](#仅限-os-x-系统)和[仅限 Windows 系统](#仅限-windows-系统)的部分。其它节中的大部分内容都适用于其它 Unix 系统或 OS X，甚至 Cygwin。\n- 本文关注于交互式 Bash，尽管很多技巧也适用于其他 shell 或 Bash 脚本。\n- 本文包括了“标准的”Unix 命令和需要安装特定包的命令，只要它们足够重要。\n\n注意事项：\n\n- 为了能在一页内展示尽量多的东西，一些具体的信息会被间接地包含在引用页里。聪明机智的你，如果掌握了使用 Google 搜索引擎的基本思路与命令，那么你将可以查阅到更多的详细信息。使用 `apt-get`，`yum`，`dnf`，`pacman`，\n`pip` 或 `brew`（以及其它合适的包管理器）来安装新程序。\n- 使用 [Explainshell](http://explainshell.com/) 去获取相关命令、参数、管道等内容的解释。\n\n\n## 基础\n\n- 学习 Bash 的基础知识。具体来说，输入 `man bash` 并至少全文浏览一遍; 它很简单并且不长。其他的 shell 可能很好用，但 Bash 功能强大到几乎所有情况下都是可用的 （ *只*学习 zsh，fish 或其他的 shell 的话，在你自己的电脑上会显得很方便，但在很多情况下会限制你，比如当你需要在服务器上工作时）。\n\n- 学习并掌握至少一个基于文本的编辑器。通常 Vim （`vi`） 会是你最好的选择，因为在终端里进行随机编辑，Vim 真的毫无敌手，哪怕是 Emacs、某大型 IDE 甚至时下非常流行的编辑器。\n\n- 学会如何使用 `man` 命令去阅读文档。学会使用 `apropos` 去查找文档。了解有些命令并不对应可执行文件，而是Bash内置的，可以使用 `help` 和 `help -d` 命令获取帮助信息。你可以用 `type 命令` 来判断它到底是可执行文件、shell 内置命令、还是别名。\n\n- 学会使用 `>` 和 `<` 来重定向输出和输入，学会使用 `|` 来重定向管道。明白 `>` 会覆盖了输出文件而 `>>` 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。\n\n- 学会使用通配符 `*` （或许再算上 `?` 和 `[`...`]`） 和引用以及引用中 `'` 和 `\"` 的区别。\n\n- 熟悉 Bash 任务管理工具：`&`，**ctrl-z**，**ctrl-c**，`jobs`，`fg`，`bg`，`kill` 等。\n\n- 了解 `ssh`，以及学会通过使用 `ssh-agent`，`ssh-add` 等命令来实现基本的无密码认证。\n\n- 学会基本的文件管理：`ls` 和 `ls -l` （了解 `ls -l` 中每一列代表的意义），`less`，`head`，`tail` 和 `tail -f` （甚至 `less +F`），`ln` 和 `ln -s` （了解硬链接与软链接的区别），`chown`，`chmod`，`du` （硬盘使用情况概述：`du -hs *`）。 关于文件系统的管理，学习 `df`，`mount`，`fdisk`，`mkfs`，`lsblk`。知道 inode 是什么（与 `ls -i` 和 `df -i` 等命令相关）。\n\n- 学习基本的网络管理：`ip` 或 `ifconfig`，`dig`。\n\n- 学习并使用一种版本控制管理系统，例如 `git`。\n\n- 熟悉正则表达式，以及 `grep`／`egrep` 里不同参数的作用，例如 `-i`，`-o`，`-v`，`-A`，`-B` 和 `-C`，这些参数是值得学习并掌握的。\n\n- 学会使用 `apt-get`，`yum`，`dnf` 或 `pacman` （取决于你使用的 Linux 发行版）来查找或安装软件包。并确保你的环境中有 `pip` 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 `pip` 来安装会很方便）。\n\n\n## 日常使用\n\n- 在 Bash 中，可以使用 **Tab** 自动补全参数，使用 **ctrl-r** 搜索命令行历史（在按下之后，键入便可以搜索，重复按下 **ctrl-r** 会在更多匹配中循环，按下 **Enter** 会执行找到的命令，按下右方向键会将结果放入当前行中，使你可以进行编辑）。\n\n- 在 Bash 中，可以使用 **ctrl-w** 删除你键入的最后一个单词，使用 **ctrl-u** 删除整行，使用 **alt-b** 和 **alt-f** 以单词为单位移动光标，使用 **ctrl-a** 将光标移至行首，使用 **ctrl-e** 将光标移至行尾，使用 **ctrl-k** 删除光标至行尾的所有内容，使用 **ctrl-l** 清屏。键入 `man readline` 查看 Bash 中的默认快捷键，内容很多。例如 **alt-.** 循环地移向前一个参数，以及 **alt-*** 展开通配符。\n\n\n- 你喜欢的话，可以键入 `set -o vi` 来使用 vi 风格的快捷键，而 `set -o emacs` 可以把它改回来。\n\n- 为了方便地键入长命令，在设置你的编辑器后（例如 `export EDITOR=vim`），键入 **ctrl-x** **ctrl-e** 会打开一个编辑器来编辑当前命令。在 vi 模式下则键入 **escape-v** 实现相同的功能。\n\n- 键入 `history` 查看命令行历史记录，再用 `!n`（`n` 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是用 `!$` 指代上次键入的参数，以及用 `!!` 指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些通常被 **ctrl-r** 和 **alt-.** 取代。\n\n- 要进入 home 目录可以用 `cd`。要访问你的 home 目录中的文件，可以使用前缀 `~`（例如 `~/.bashrc`）。在 `sh` 脚本里则用 `$HOME` 指代 home 目录。\n\n- 回到上一个工作路径：`cd -`\n\n- 如果你输入命令的时候改变了主意，按下 **alt-#** 在行首添加 `#`，或者依次按下 **ctrl-a**， **#**， **enter**。这样做的话，之后你可以很方便的利用命令行历史回到你刚才输入到一半的命令。\n\n- 使用 `xargs` （ 或 `parallel`）。他们非常给力。注意到你可以控制每行参数个数（`-L`）和最大并行数（`-P`）。如果你不确定它们是否会按你想的那样工作，先使用 `xargs echo` 查看一下。此外，使用 `-I{}` 会很方便。例如：\n```bash\n      find . -name '*.py' | xargs grep some_function\n      cat hosts | xargs -I{} ssh root@{} hostname\n```\n\n\n- `pstree -p` 有助于展示进程树。\n\n- 使用 `pgrep` 和 `pkill` 根据名字查找进程或发送信号（`-f` 参数通常有用）。\n\n- 了解你可以发往进程的信号的种类。比如，使用 `kill -STOP [pid]` 停止一个进程。使用 `man 7 signal` 查看详细列表。\n\n- 使用 `nohup` 或 `disown` 使一个后台进程持续运行。\n\n- 使用 `netstat -lntp` 或 `ss -plat` 检查哪些进程在监听端口（默认是检查 TCP 端口; 使用参数 `-u` 检查 UDP 端口）。\n\n- 有关打开套接字和文件，请参阅 `lsof`。\n\n- 使用 `uptime` 或 `w` 来查看系统已经运行多长时间。\n\n- 使用 `alias` 来创建常用命令的快捷形式。例如：`alias ll='ls -latr'` 创建了一个新的命令别名 `ll`。\n\n- 把别名、shell 选项和常用函数保存在 `~/.bashrc`，然后[安排登陆 shell 来读取](http://superuser.com/a/183980/7106)。这样你就可以在所有 shell 会话中使用你的设定。\n\n- 把环境变量的设定以及登陆时要执行的命令保存在 `~/.bash_profile`。对于从图形界面启动的，以及 `cron` 工作的 shell，需要单独配置。\n\n- 要在几台电脑中同步你的配置文件（例如 `.bashrc` 和 `.bash_profile`），可以用 Git。\n\n- 当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 `\"FOO\"`。尽量使用 `-0` 或 `-print0` 选项以便用空字符来分隔文件名，例如 `locate -0 pattern | xargs -0 ls -al` 或 `find / -print0 -type d | xargs -0 ls -al`。如果 for 循环中循环访问的文件名含有空格，只需用 `IFS=$'\\n'` 把内部字段分隔符设为换行符。\n\n- 在 Bash 脚本中，使用 `set -x` 去调试输出，尽可能地使用严格模式，使用 `set -e` 令脚本在发生错误时退出而不是继续运行，使用 `set -u` 来检查是否使用了未赋值的变量，使用 `set -o pipefail` 严谨地对待错误（尽管问题可能很微妙）。当牵扯到很多脚本时，使用 `trap`。一个好的习惯是在脚本文件开头这样写，这会使它检测一些错误，并在错误发生时中断程序并输出信息：\n```bash\n      set -euo pipefail\n      trap \"echo 'error: Script failed: see failed command above'\" ERR\n```\n\n- 在 Bash 脚本中，子 shell（使用括号 `(...)`）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：\n```bash\n      # do something in current dir\n      (cd /some/other/dir && other-command)\n      # continue in original dir\n```\n\n- 在 Bash 中，要注意其中有许多形式的扩展。检查变量是否存在：`${name:?error message}`。例如，当 Bash 脚本需要一个参数时，可以使用这样的代码 `input_file=${1:?usage: $0 input_file}`。数学表达式：`i=$(( (i + 1) % 5 ))`。序列：`{1..10}`。截断字符串：`${var%suffix}` 和 `${var#prefix}`。例如，假设 `var=foo.pdf`，那么 `echo ${var%.pdf}.txt` 将输出 `foo.txt`。\n\n- 使用括号扩展（`{`...`}`）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 `mv foo.{txt,pdf} some-dir`（同时移动两个文件），`cp somefile{,.bak}`（会被扩展成 `cp somefile somefile.bak`）或者 `mkdir -p test-{a,b,c}/subtest-{1,2,3}`（会被扩展成所有可能的组合，并创建一个目录树）。\n\n- 通过使用 `<(some command)` 可以将输出视为文件。例如，对比本地文件 `/etc/hosts` 和一个远程文件：\n```sh\n      diff /etc/hosts <(ssh somehost cat /etc/hosts)\n```\n\n- 了解 Bash 中的“here documents”，例如 `cat <<EOF ...`。\n\n- 在 Bash 中，同时重定向标准输出和标准错误，`some-command >logfile 2>&1`。通常，为了保证命令不会在标准输入里残留一个打开了的文件句柄导致你当前所在的终端无法操作，添加 `</dev/null` 是一个好习惯。\n\n- 使用 `man ascii` 查看具有十六进制和十进制值的ASCII表。`man unicode`，`man utf-8`，以及 `man latin1` 有助于你去了解通用的编码信息。\n\n- 使用 `screen` 或 [`tmux`](https://tmux.github.io/) 来使用多个屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。另一个轻量级的解决方案是 [`dtach`](https://github.com/bogner/dtach)。\n\n- ssh 中，了解如何使用 `-L` 或 `-D`（偶尔需要用 `-R`）去开启隧道是非常有用的，例如当你需要从一台远程服务器上访问 web。\n\n- 对 ssh 设置做一些小优化可能是很有用的，例如这个 `~/.ssh/config` 文件包含了防止特定环境下断开连接、压缩数据、多通道等选项：\n```\n      TCPKeepAlive=yes\n      ServerAliveInterval=15\n      ServerAliveCountMax=6\n      Compression=yes\n      ControlMaster auto\n      ControlPath /tmp/%r@%h:%p\n      ControlPersist yes\n```\n\n- 部分其他的关于 ssh 的选项是安全敏感的，而且应当小心启用。例如在可信任的网络中：`StrictHostKeyChecking=no`，`ForwardAgent=yes`\n\n- 考虑使用 [`mosh`](https://mosh.mit.edu/) 作为 ssh 的替代品，它使用 UDP 协议。\n\n- 获取文件的八进制格式权限，使用类似如下的代码：\n```sh\n      stat -c '%A %a %n' /etc/timezone\n```\n\n- 使用 [`percol`](https://github.com/mooz/percol) 或者 [`fzf`](https://github.com/junegunn/fzf) 可以交互式地从另一个命令输出中选取值。\n\n- 使用 `fpp`（[PathPicker](https://github.com/facebook/PathPicker)）可以与基于另一个命令(例如 `git`）输出的文件交互。\n\n- 将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：\n`python -m SimpleHTTPServer 7777` （使用端口 7777 和 Python 2）或`python -m http.server 7777` （使用端口 7777 和 Python 3）。\n\n- 以某种权限执行命令，使用`sudo`（root 权限）或`sudo -u`（其他用户）。使用`su`或者`sudo bash`来启动一个以对应用户权限运行的 shell。使用`su -`模拟其他用户的登录。\n\n- 了解命令行的 [128K 限制](https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong)。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 `find` 或 `xargs` 通常可以解决。）\n\n- 要实现基本的计算器功能（或者一般地使用 Python），可以使用 `python` 解释器。例如：\n```\n>>> 2+3\n5\n```\n\n\n## 文件及数据处理\n\n- 在当前路径下通过文件名定位一个文件，`find . -iname '*something*'`（或类似的）。在所有路径下通过文件名查找文件，使用 `locate something` （但请记住 `updatedb` 可能没有对最近新建的文件建立索引）。\n\n- 使用 [`ag`](https://github.com/ggreer/the_silver_searcher) 在源代码或数据文件里检索（比 `grep -r` 更好）。\n\n- 将 HTML 转为文本：`lynx -dump -stdin`\n\n- Markdown，HTML，以及所有文档格式之间的转换，试试 [`pandoc`](http://pandoc.org/)。\n\n- 如果你不得不处理 XML，`xmlstarlet` 宝刀未老。\n\n- 使用 [`jq`](http://stedolan.github.io/jq/) 处理 JSON。\n\n- 使用 [`shyaml`](https://github.com/0k/shyaml) 处理 YAML。\n\n- Excel 或 CSV 文件的处理，[csvkit](https://github.com/onyxfish/csvkit) 提供了 `in2csv`，`csvcut`，`csvjoin`，`csvgrep` 等工具。\n\n- 关于 Amazon S3，[`s3cmd`](https://github.com/s3tools/s3cmd) 很方便而 [`s4cmd`](https://github.com/bloomreach/s4cmd) 更快。Amazon 官方的 [`aws`](https://github.com/aws/aws-cli) 以及  [`saws`](https://github.com/donnemartin/saws) 是其他 AWS 相关工作的基础。\n\n- 了解如何使用 `sort` 和 `uniq`，包括 uniq 的 `-u` 参数和 `-d` 参数，详见后文单行脚本节。另外可以了解一下 `comm`。\n\n- 了解如何使用 `cut`，`paste` 和 `join` 来更改文件。很多人都会使用 `cut`，但几乎都不会使用 `join`。\n\n- 了解如何运用 `wc` 去计算新行数（`-l`），字符数（`-m`），单词数（`-w`）以及字节数（`-c`）。\n\n- 了解如何使用 `tee` 将标准输入复制到文件甚至标准输出，例如 `ls -al | tee file.txt`。\n\n- 了解语言环境对许多命令行工具的微妙影响，包括排序的顺序和性能。大多数 Linux 的安装过程会将 `LANG` 或其他有关的变量设置为符合本地的设置。意识到当你改变语言环境时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降*许多倍*。某些情况下（例如集合运算）你可以放心的使用 `export LC_ALL=C` 来忽略掉国际化并使用基于字节的顺序。\n\n- 你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在前面，例如 `TZ=Pacific/Fiji date`。\n\n- 了解 `awk` 和 `sed` 关于数据的简单处理的用法。例如，将文本文件中第三列的所有数字求和：`awk '{ x += $3 } END { print x }'`. 这可能比同等作用的 Python 代码快三倍且代码量少三倍。\n\n- 替换一个或多个文件中出现的字符串：\n```sh\n      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt\n```\n\n- 使用 [`repren`](https://github.com/jlevy/repren) 来批量重命名，或是在多个文件中搜索替换。（有些时候 `rename` 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）\n```sh\n      # 将文件、目录和内容全部重命名 foo -> bar:\n      repren --full --preserve-case --from foo --to bar .\n      # 还原所有备份文件 whatever.bak -> whatever:\n      repren --renames --from '(.*)\\.bak' --to '\\1' *.bak\n      # 用 rename 实现上述功能（若可用）:\n      rename 's/\\.bak$//' *.bak\n```\n\n- 根据 man 页面的描述，`rsync` 真的是一个快速且非常灵活的文件复制工具。它通常被用于机器间的同步，但在本地也同样有用。在安全限制允许下，用 `rsync` 代替 `scp` 可以实现续传，而不用重新从头开始。它同时也是删除大量文件的[最快方法](https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html)之一：\n```sh\nmkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir\n```\n\n- 使用 `shuf` 从一个文件中随机选取多行。\n\n- 了解 `sort` 的参数。处理数字方面，使用 `-n` 或者 `-h` 来处理可读性数字（例如 `du -h` 的输出）。明白键的工作原理（`-t` 和 `-k`）。例如，注意到你需要 `-k1，1` 来仅按第一个域来排序，而 `-k1` 意味着按整行排序。稳定排序（`sort -s`）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 `sort -k1，1 | sort -s -k2，2`。\n\n- 如果你想在 Bash 命令行中写 tab 制表符，按下 **ctrl-v** **[Tab]** 或键入 `$'\\t'` （后者可能更好，因为你可以复制粘贴它）。\n\n- 标准的源代码对比及合并工具是 `diff` 和 `patch`。使用 `diffstat` 查看变更总览数据。注意到 `diff -r` 对整个文件夹有效。使用 `diff -r tree1 tree2 | diffstat` 查看变更总览数据。\n\n- 对于二进制文件，使用 `hd` 使其以十六进制显示以及使用 `bvi` 来编辑二进制。\n\n- 同样对于二进制文件，`strings`（包括 `grep` 等等）允许你查找一些文本。\n\n- 二进制文件对比（Delta 压缩），使用 `xdelta3`。\n\n- 使用 `iconv` 更改文本编码。而更高级的用法，可以使用 `uconv`，它支持一些高级的 Unicode 功能。例如，这条命令将所有元音字母转为小写并移除了：\n```sh\n      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt\n```\n\n- 拆分文件，查看 `split`（按大小拆分）和 `csplit`（按模式拆分）。\n\n- 用 [`dateutils`](http://www.fresse.org/dateutils/) 中的 `dateadd`、`datediff`、`strptime` 等工具操作日期和时间表达式。\n\n- 使用 `zless`、`zmore`、`zcat` 和 `zgrep` 对压缩过的文件进行操作。\n\n- 文件属性可以通过 `chattr` 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：`sudo chattr +i /critical/directory/or/file`\n\n- 使用 `getfacl` 和 `setfacl` 以保存和恢复文件权限。例如：\n```sh\n   getfacl -R /some/path > permissions.txt\n   setfacl --restore=permissions.txt\n```\n\n## 系统调试\n\n- `curl` 和 `curl -I` 可以便捷地被应用于 web 调试中，它们的好兄弟 `wget` 也可以，或者是更潮的 [`httpie`](https://github.com/jkbrzt/httpie)。\n\n- 使用 `iostat`、`netstat`、`top` （`htop` 更佳）和 `dstat` 去获取硬盘、cpu 和网络的状态。熟练掌握这些工具可以使你快速的对系统的当前状态有一个大概的认识。\n\n- 使用 `netstat` 和 `ss` 查看网络连接的细节。\n\n- 若要对系统有一个深度的总体认识，使用 [`glances`](https://github.com/nicolargo/glances)。它在一个终端窗口中向你提供一些系统级的数据。这对于快速的检查各个子系统非常有帮助。\n\n- 若要了解内存状态，运行并理解 `free` 和 `vmstat` 的输出。尤其注意“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，因此它与空闲内存无关。\n\n- Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 `kill -3 <pid>` 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准输出/日志文件。JDK 中的 `jps`，`jstat`，`jstack`，`jmap` 很有用。[SJK tools](https://github.com/aragozin/jvm-tools) 更高级.\n\n- 使用 `mtr` 去跟踪路由，用于确定网络问题。\n\n- 用 `ncdu` 来查看磁盘使用情况，它比常用的命令，如 `du -sh *`，更节省时间。\n\n- 查找正在使用带宽的套接字连接或进程，使用 `iftop` 或 `nethogs`。\n\n- `ab` 工具（捆绑于 Apache）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 `siege`。\n\n- `wireshark`，`tshark` 和 `ngrep` 可用于复杂的网络调试。\n\n- 了解 `strace` 和 `ltrace`。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（`-c`）和附加到一个运行的进程参数 （`-p`）。\n\n- 了解使用 `ldd` 来检查共享库。\n\n- 了解如何运用 `gdb` 连接到一个运行着的进程并获取它的堆栈轨迹。\n\n- 学会使用 `/proc`。它在调试正在出现的问题的时候有时会效果惊人。比如：`/proc/cpuinfo`，`/proc/meminfo`，`/proc/cmdline`，`/proc/xxx/cwd`，`/proc/xxx/exe`，`/proc/xxx/fd/`，`/proc/xxx/smaps`（这里的 `xxx` 表示进程的 id 或 pid）。\n\n- 当调试一些之前出现的问题的时候，`sar` 非常有用。它展示了 cpu、内存以及网络等的历史数据。\n\n- 关于更深层次的系统分析以及性能分析，看看 `stap`（[SystemTap](https://sourceware.org/systemtap/wiki)），[`perf`](https://en.wikipedia.org/wiki/Perf_(Linux))，以及[`sysdig`](https://github.com/draios/sysdig)。\n\n- 查看你当前使用的系统，使用 `uname` ， `uname -a` （Unix／kernel 信息） 或者 `lsb_release -a` （Linux 发行版信息）。\n\n- 无论什么东西工作得很欢乐时试试 `dmesg`（可能是硬件或驱动问题）。\n\n- 如果你删除了一个文件，但通过 `du` 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：\n`lsof | grep deleted | grep \"filename-of-my-big-file\"`\n\n\n## 单行脚本\n\n一些命令组合的例子：\n\n- 当你需要对文本文件做集合交、并、差运算时，结合使用 `sort`/`uniq` 很有帮助。假设 `a` 与 `b` 是两内容不同的文件。这种方式效率很高，并且在小文件和上G的文件上都能运用 （`sort` 不被内存大小约束，尽管在 `/tmp` 在一个小的根分区上时你可能需要 `-T` 参数），参阅前文中关于 `LC_ALL` 和 `sort` 的 `-u` 参数的部分。\n```sh\n      cat a b | sort | uniq > c   # c is a union b\n      cat a b | sort | uniq -d > c   # c is a intersect b\n      cat a b b | sort | uniq -u > c   # c is set difference a - b\n```\n\n- 使用 `grep . *`（每行都会附上文件名）或者 `head -100 *`（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 `/sys`、`/proc`、`/etc`）时特别好用。\n\n\n- 计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：\n```sh\n      awk '{ x += $3 } END { print x }' myfile\n```\n\n- 如果你想在文件树上查看大小/日期，这可能看起来像递归版的 `ls -l` 但比 `ls -lR` 更易于理解：\n```sh\n      find . -type f -ls\n```\n\n- 假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 `acct_id` 参数在URI中。如果你想计算出每个 `acct_id` 值有多少次请求，使用如下代码：\n```sh\n      cat access.log | egrep -o 'acct_id=[0-9]+' | cut -d= -f2 | sort | uniq -c | sort -rn\n```\n\n- 要连续地监测变化，可以使用 `watch`，例如检查某个文件夹中文件的改变，可以用 `watch -d -n 2 'ls -rtlh | tail'`；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 `watch -d -n 2 ifconfig`。\n\n- 运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：\n```sh\n      function taocl() {\n        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|\n          pandoc -f markdown -t html |\n          iconv -f 'utf-8' -t 'unicode' |\n          xmlstarlet fo --html --dropdtd |\n          xmlstarlet sel -t -v \"(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]\" |\n          xmlstarlet unesc | fmt -80\n      }\n```\n\n## 冷门但有用\n\n- `expr`：计算表达式或正则匹配\n\n- `m4`：简单地宏处理器\n\n- `yes`：多次打印字符串\n\n- `cal`：漂亮的日历\n\n- `env`：执行一个命令（脚本文件中很有用）\n\n- `printenv`：打印环境变量（调试时或在使用脚本文件时很有用）\n\n- `look`：查找以特定字符串开头的单词\n\n- `cut`、`paste` 和 `join`：数据修改\n\n- `fmt`：格式化文本段落\n\n- `pr`：将文本格式化成页/列形式\n\n- `fold`：包裹文本中的几行\n\n- `column`：将文本格式化成多列或表格\n\n- `expand` 和 `unexpand`：制表符与空格之间转换\n\n- `nl`：添加行号\n\n- `seq`：打印数字\n\n- `bc`：计算器\n\n- `factor`：分解因数\n\n- [`gpg`](https://gnupg.org/)：加密并签名文件\n\n- `toe`：terminfo entries 列表\n\n- `nc`：网络调试及数据传输\n\n- `socat`：套接字代理，与 `netcat` 类似\n\n- [`slurm`](https://github.com/mattthias/slurm)：网络可视化\n\n- `dd`：文件或设备间传输数据\n\n- `file`：确定文件类型\n\n- `tree`：以树的形式显示路径和文件，类似于递归的 `ls`\n\n- `stat`：文件信息\n\n- `time`：执行命令，并计算执行时间\n\n- `timeout`：在指定时长范围内执行命令，并在规定时间结束后停止进程\n\n- `lockfile`：使文件只能通过 `rm -f` 移除\n\n- `logrotate`： 切换、压缩以及发送日志文件\n\n- `watch`：重复运行同一个命令，展示结果并高亮有更改的部分\n\n- `tac`：反向输出文件\n\n- `shuf`：文件中随机选取几行\n\n- `comm`：一行一行的比较排序过的文件\n\n- `pv`：监视通过管道的数据\n\n- `hd`，`hexdump`，`xxd`，`biew` 和 `bvi`：保存或编辑二进制文件\n\n- `strings`：从二进制文件中抽取文本\n\n- `tr`：转换字母\n\n- `iconv` 或 `uconv`：简易的文件编码\n\n- `split` 和 `csplit`：分割文件\n\n- `sponge`：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 `grep -v something some-file | sponge some-file`\n\n- `units`：将一种计量单位转换为另一种等效的计量单位（参阅 `/usr/share/units/definitions.units`）\n\n- `apg`：随机生成密码\n\n- `7z`：高比例的文件压缩\n\n- `ldd`：动态库信息\n\n- `nm`：提取 obj 文件中的符号\n\n- `ab`：性能分析 web 服务器\n\n- `strace`：系统调用调试\n\n- `mtr`：更好的网络调试跟踪工具\n\n- `cssh`：可视化的并发 shell\n\n- `rsync`：通过 ssh 或本地文件系统同步文件和文件夹\n\n- `wireshark` 和 `tshark`：抓包和网络调试工具\n\n- `ngrep`：网络层的 grep\n\n- `host` 和 `dig`：DNS 查找\n\n- `lsof`：列出当前系统打开文件的工具以及查看端口信息\n\n- `dstat`：系统状态查看\n\n- [`glances`](https://github.com/nicolargo/glances)：高层次的多子系统总览\n\n- `iostat`：硬盘使用状态\n\n- `mpstat`： CPU 使用状态\n\n- `vmstat`： 内存使用状态\n\n- `htop`：top 的加强版\n\n- `last`：登入记录\n\n- `w`：查看处于登录状态的用户\n\n- `id`：用户/组 ID 信息\n\n- `sar`：系统历史数据\n\n- `iftop` 或 `nethogs`：套接字及进程的网络利用\n\n- `ss`：套接字数据\n\n- `dmesg`：引导及系统错误信息\n\n- `sysctl`： 在内核运行时动态地查看和修改内核的运行参数\n\n- `hdparm`：SATA/ATA 磁盘更改及性能分析\n\n- `lsblk`：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息\n\n- `lshw`，`lscpu`，`lspci`，`lsusb` 和 `dmidecode`：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等\n\n- `lsmod` 和 `modinfo`：列出内核模块，并显示其细节\n\n- `fortune`，`ddate` 和 `sl`：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”\n\n\n## 仅限 OS X 系统\n\n以下是*仅限于* OS X 系统的技巧\n\n- 用 `brew` （Homebrew）或者 `port` （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。\n\n- 用 `pbcopy` 复制任何命令的输出到桌面应用，用 `pbpaste` 粘贴输入。\n\n- 若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 **alt-b**、**alt-f** 等命令中用到），打开 偏好设置 -> 描述文件 -> 键盘 并勾选“使用 Option 键作为 Meta 键”。\n\n- 用 `open` 或者 `open -a /Applications/Whatever.app` 使用桌面应用打开文件。\n\n- Spotlight： 用 `mdfind` 搜索文件，用 `mdls` 列出元数据（例如照片的 EXIF 信息）。\n\n- 注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 `ps`，`ls`，`tail`，`awk`，`sed`）都和 Linux 中有些微的不同，这些极大的被 System V-style Unix 和 GNU 工具影响。你可以通过标题为 \"BSD General Commands Manual\" 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 `gawk` 和 `gsed` 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 `perl` ）或者经过仔细的测试。\n\n- 用 `sw_vers` 获取 OS X 的版本信息。\n\n## 仅限 Windows 系统\n\n- 要在 Microsoft Windows 中使用 Unix shell，可以安装 [Cygwin](https://cygwin.com/)。本文档中介绍的大多数内容都将适用。\n\n- 通过 Cygwin 的包管理器来安装额外的 Unix 程序。\n\n- 使用 `mintty` 作为你的命令行窗口。\n\n- 要访问 Windows 剪贴板，可以通过 `/dev/clipboard`。\n\n- 运行 `cygstart` 以通过默认程序打开一个文件。\n\n- 要访问 Windows 注册表，可以使用 `regtool`。\n\n- 注意 Windows 驱动器路径 `C:\\` 在 Cygwin 中用 `/cygdrive/c` 代表，而 Cygwin 的 `/` 在 Windows 中显示在 `C:\\cygwin`。要转换 Cygwin 和 Windows 风格的路径可以用 `cygpath`。这在需要调用 Windows 程序的脚本里很有用。\n\n- 学会使用 `wmic`，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。\n\n## 更多资源\n\n- [awesome-shell](https://github.com/alebcay/awesome-shell)：一份精心组织的命令行工具及资源的列表。\n- [awesome-osx-command-line](https://github.com/herrbischoff/awesome-osx-command-line)：一份针对 OS X 命令行的更深入的指南。\n- [Strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/)：为了编写更好的脚本文件。\n- [shellcheck](https://github.com/koalaman/shellcheck)：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。\n- [Filenames and Pathnames in Shell](http://www.dwheeler.com/essays/filenames-in-shell.html)：有关如何在 shell 脚本里正确处理文件名的细枝末节。\n- [Data Science at the Command Line](http://datascienceatthecommandline.com/#tools)：用于数据科学的一些命令和工具，摘自同名书籍。\n\n## 免责声明\n\n除去特别微小的任务，编写代码是出于方便阅读的目的。能力往往伴随着责任。你 *可以* 在 Bash 中做一些事并不意味着你应该去做！;)\n\n\n## 授权条款\n\n[![Creative Commons License](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)](http://creativecommons.org/licenses/by-sa/4.0/)\n\n本文使用授权协议 [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/)。\n","slug":"the-art-of-command-line","published":1,"updated":"2016-12-07T05:41:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwqg8ny100095qxzg80osrhp","content":"<p>🌍</p>\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#基础\">基础</a></li>\n<li><a href=\"#日常使用\">日常使用</a></li>\n<li><a href=\"#文件及数据处理\">文件及数据处理</a></li>\n<li><a href=\"#系统调试\">系统调试</a></li>\n<li><a href=\"#单行脚本\">单行脚本</a></li>\n<li><a href=\"#冷门但有用\">冷门但有用</a></li>\n<li><a href=\"#仅限-os-x-系统\">仅限 OS X 系统</a></li>\n<li><a href=\"#仅限-windows-系统\">仅限 Windows 系统</a></li>\n<li><a href=\"#更多资源\">更多资源</a></li>\n<li><a href=\"#免责声明\">免责声明</a></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/cowsay.png\" alt=\"curl -s &#39;https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md&#39; | egrep -o &#39;`\\w+`&#39; | tr -d &#39;`&#39; | cowsay -W50\"></p>\n<a id=\"more\"></a>\n<p>熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。</p>\n<p>这篇文章是<a href=\"AUTHORS.md\">许多作者和译者</a>共同的成果。<br>这里的部分内容<br><a href=\"http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands\" target=\"_blank\" rel=\"external\">首次</a><br><a href=\"http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix\" target=\"_blank\" rel=\"external\">出现</a><br>于 <a href=\"http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know\" target=\"_blank\" rel=\"external\">Quora</a>，<br>但已经迁移到了 Github，并由众多高手做出了许多改进。<br>如果你在本文中发现了错误或者存在可以改善的地方，请<a href=\"/CONTRIBUTING.md\"><strong>贡献你的一份力量</strong></a>。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>涵盖范围：</p>\n<ul>\n<li>这篇文章对刚接触命令行的新手，以及具有命令行使用经验的人都有用处。本文致力于做到<em>覆盖面广</em>（尽量包括一切重要的内容），<em>具体</em>（给出最常见的具体的例子），以及<em>简洁</em>（避免不必要的，或是可以在其他地方轻松查到的细枝末节）。每个技巧在特定情境下或是基本的，或是能显著节约时间。</li>\n<li>本文为 Linux 所写，除了<a href=\"#仅限-os-x-系统\">仅限 OS X 系统</a>和<a href=\"#仅限-windows-系统\">仅限 Windows 系统</a>的部分。其它节中的大部分内容都适用于其它 Unix 系统或 OS X，甚至 Cygwin。</li>\n<li>本文关注于交互式 Bash，尽管很多技巧也适用于其他 shell 或 Bash 脚本。</li>\n<li>本文包括了“标准的”Unix 命令和需要安装特定包的命令，只要它们足够重要。</li>\n</ul>\n<p>注意事项：</p>\n<ul>\n<li>为了能在一页内展示尽量多的东西，一些具体的信息会被间接地包含在引用页里。聪明机智的你，如果掌握了使用 Google 搜索引擎的基本思路与命令，那么你将可以查阅到更多的详细信息。使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code>，<code>pacman</code>，<br><code>pip</code> 或 <code>brew</code>（以及其它合适的包管理器）来安装新程序。</li>\n<li>使用 <a href=\"http://explainshell.com/\" target=\"_blank\" rel=\"external\">Explainshell</a> 去获取相关命令、参数、管道等内容的解释。</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p>学习 Bash 的基础知识。具体来说，输入 <code>man bash</code> 并至少全文浏览一遍; 它很简单并且不长。其他的 shell 可能很好用，但 Bash 功能强大到几乎所有情况下都是可用的 （ <em>只</em>学习 zsh，fish 或其他的 shell 的话，在你自己的电脑上会显得很方便，但在很多情况下会限制你，比如当你需要在服务器上工作时）。</p>\n</li>\n<li><p>学习并掌握至少一个基于文本的编辑器。通常 Vim （<code>vi</code>） 会是你最好的选择，因为在终端里进行随机编辑，Vim 真的毫无敌手，哪怕是 Emacs、某大型 IDE 甚至时下非常流行的编辑器。</p>\n</li>\n<li><p>学会如何使用 <code>man</code> 命令去阅读文档。学会使用 <code>apropos</code> 去查找文档。了解有些命令并不对应可执行文件，而是Bash内置的，可以使用 <code>help</code> 和 <code>help -d</code> 命令获取帮助信息。你可以用 <code>type 命令</code> 来判断它到底是可执行文件、shell 内置命令、还是别名。</p>\n</li>\n<li><p>学会使用 <code>&gt;</code> 和 <code>&lt;</code> 来重定向输出和输入，学会使用 <code>|</code> 来重定向管道。明白 <code>&gt;</code> 会覆盖了输出文件而 <code>&gt;&gt;</code> 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。</p>\n</li>\n<li><p>学会使用通配符 <code>*</code> （或许再算上 <code>?</code> 和 <code>[</code>…<code>]</code>） 和引用以及引用中 <code>&#39;</code> 和 <code>&quot;</code> 的区别。</p>\n</li>\n<li><p>熟悉 Bash 任务管理工具：<code>&amp;</code>，<strong>ctrl-z</strong>，<strong>ctrl-c</strong>，<code>jobs</code>，<code>fg</code>，<code>bg</code>，<code>kill</code> 等。</p>\n</li>\n<li><p>了解 <code>ssh</code>，以及学会通过使用 <code>ssh-agent</code>，<code>ssh-add</code> 等命令来实现基本的无密码认证。</p>\n</li>\n<li><p>学会基本的文件管理：<code>ls</code> 和 <code>ls -l</code> （了解 <code>ls -l</code> 中每一列代表的意义），<code>less</code>，<code>head</code>，<code>tail</code> 和 <code>tail -f</code> （甚至 <code>less +F</code>），<code>ln</code> 和 <code>ln -s</code> （了解硬链接与软链接的区别），<code>chown</code>，<code>chmod</code>，<code>du</code> （硬盘使用情况概述：<code>du -hs *</code>）。 关于文件系统的管理，学习 <code>df</code>，<code>mount</code>，<code>fdisk</code>，<code>mkfs</code>，<code>lsblk</code>。知道 inode 是什么（与 <code>ls -i</code> 和 <code>df -i</code> 等命令相关）。</p>\n</li>\n<li><p>学习基本的网络管理：<code>ip</code> 或 <code>ifconfig</code>，<code>dig</code>。</p>\n</li>\n<li><p>学习并使用一种版本控制管理系统，例如 <code>git</code>。</p>\n</li>\n<li><p>熟悉正则表达式，以及 <code>grep</code>／<code>egrep</code> 里不同参数的作用，例如 <code>-i</code>，<code>-o</code>，<code>-v</code>，<code>-A</code>，<code>-B</code> 和 <code>-C</code>，这些参数是值得学习并掌握的。</p>\n</li>\n<li><p>学会使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code> 或 <code>pacman</code> （取决于你使用的 Linux 发行版）来查找或安装软件包。并确保你的环境中有 <code>pip</code> 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 <code>pip</code> 来安装会很方便）。</p>\n</li>\n</ul>\n<h2 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h2><ul>\n<li><p>在 Bash 中，可以使用 <strong>Tab</strong> 自动补全参数，使用 <strong>ctrl-r</strong> 搜索命令行历史（在按下之后，键入便可以搜索，重复按下 <strong>ctrl-r</strong> 会在更多匹配中循环，按下 <strong>Enter</strong> 会执行找到的命令，按下右方向键会将结果放入当前行中，使你可以进行编辑）。</p>\n</li>\n<li><p>在 Bash 中，可以使用 <strong>ctrl-w</strong> 删除你键入的最后一个单词，使用 <strong>ctrl-u</strong> 删除整行，使用 <strong>alt-b</strong> 和 <strong>alt-f</strong> 以单词为单位移动光标，使用 <strong>ctrl-a</strong> 将光标移至行首，使用 <strong>ctrl-e</strong> 将光标移至行尾，使用 <strong>ctrl-k</strong> 删除光标至行尾的所有内容，使用 <strong>ctrl-l</strong> 清屏。键入 <code>man readline</code> 查看 Bash 中的默认快捷键，内容很多。例如 <strong>alt-.</strong> 循环地移向前一个参数，以及 <strong>alt-*</strong> 展开通配符。</p>\n</li>\n</ul>\n<ul>\n<li><p>你喜欢的话，可以键入 <code>set -o vi</code> 来使用 vi 风格的快捷键，而 <code>set -o emacs</code> 可以把它改回来。</p>\n</li>\n<li><p>为了方便地键入长命令，在设置你的编辑器后（例如 <code>export EDITOR=vim</code>），键入 <strong>ctrl-x</strong> <strong>ctrl-e</strong> 会打开一个编辑器来编辑当前命令。在 vi 模式下则键入 <strong>escape-v</strong> 实现相同的功能。</p>\n</li>\n<li><p>键入 <code>history</code> 查看命令行历史记录，再用 <code>!n</code>（<code>n</code> 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是用 <code>!$</code> 指代上次键入的参数，以及用 <code>!!</code> 指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些通常被 <strong>ctrl-r</strong> 和 <strong>alt-.</strong> 取代。</p>\n</li>\n<li><p>要进入 home 目录可以用 <code>cd</code>。要访问你的 home 目录中的文件，可以使用前缀 <code>~</code>（例如 <code>~/.bashrc</code>）。在 <code>sh</code> 脚本里则用 <code>$HOME</code> 指代 home 目录。</p>\n</li>\n<li><p>回到上一个工作路径：<code>cd -</code></p>\n</li>\n<li><p>如果你输入命令的时候改变了主意，按下 <strong>alt-#</strong> 在行首添加 <code>#</code>，或者依次按下 <strong>ctrl-a</strong>， <strong>#</strong>， <strong>enter</strong>。这样做的话，之后你可以很方便的利用命令行历史回到你刚才输入到一半的命令。</p>\n</li>\n<li><p>使用 <code>xargs</code> （ 或 <code>parallel</code>）。他们非常给力。注意到你可以控制每行参数个数（<code>-L</code>）和最大并行数（<code>-P</code>）。如果你不确定它们是否会按你想的那样工作，先使用 <code>xargs echo</code> 查看一下。此外，使用 <code>-I{}</code> 会很方便。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">find . -name <span class=\"string\">'*.py'</span> | xargs grep some_function</div><div class=\"line\">cat hosts | xargs -I&#123;&#125; ssh root@&#123;&#125; hostname</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>pstree -p</code> 有助于展示进程树。</p>\n</li>\n<li><p>使用 <code>pgrep</code> 和 <code>pkill</code> 根据名字查找进程或发送信号（<code>-f</code> 参数通常有用）。</p>\n</li>\n<li><p>了解你可以发往进程的信号的种类。比如，使用 <code>kill -STOP [pid]</code> 停止一个进程。使用 <code>man 7 signal</code> 查看详细列表。</p>\n</li>\n<li><p>使用 <code>nohup</code> 或 <code>disown</code> 使一个后台进程持续运行。</p>\n</li>\n<li><p>使用 <code>netstat -lntp</code> 或 <code>ss -plat</code> 检查哪些进程在监听端口（默认是检查 TCP 端口; 使用参数 <code>-u</code> 检查 UDP 端口）。</p>\n</li>\n<li><p>有关打开套接字和文件，请参阅 <code>lsof</code>。</p>\n</li>\n<li><p>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间。</p>\n</li>\n<li><p>使用 <code>alias</code> 来创建常用命令的快捷形式。例如：<code>alias ll=&#39;ls -latr&#39;</code> 创建了一个新的命令别名 <code>ll</code>。</p>\n</li>\n<li><p>把别名、shell 选项和常用函数保存在 <code>~/.bashrc</code>，然后<a href=\"http://superuser.com/a/183980/7106\" target=\"_blank\" rel=\"external\">安排登陆 shell 来读取</a>。这样你就可以在所有 shell 会话中使用你的设定。</p>\n</li>\n<li><p>把环境变量的设定以及登陆时要执行的命令保存在 <code>~/.bash_profile</code>。对于从图形界面启动的，以及 <code>cron</code> 工作的 shell，需要单独配置。</p>\n</li>\n<li><p>要在几台电脑中同步你的配置文件（例如 <code>.bashrc</code> 和 <code>.bash_profile</code>），可以用 Git。</p>\n</li>\n<li><p>当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 <code>&quot;FOO&quot;</code>。尽量使用 <code>-0</code> 或 <code>-print0</code> 选项以便用空字符来分隔文件名，例如 <code>locate -0 pattern | xargs -0 ls -al</code> 或 <code>find / -print0 -type d | xargs -0 ls -al</code>。如果 for 循环中循环访问的文件名含有空格，只需用 <code>IFS=$&#39;\\n&#39;</code> 把内部字段分隔符设为换行符。</p>\n</li>\n<li><p>在 Bash 脚本中，使用 <code>set -x</code> 去调试输出，尽可能地使用严格模式，使用 <code>set -e</code> 令脚本在发生错误时退出而不是继续运行，使用 <code>set -u</code> 来检查是否使用了未赋值的变量，使用 <code>set -o pipefail</code> 严谨地对待错误（尽管问题可能很微妙）。当牵扯到很多脚本时，使用 <code>trap</code>。一个好的习惯是在脚本文件开头这样写，这会使它检测一些错误，并在错误发生时中断程序并输出信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> -euo pipefail</div><div class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">\"echo 'error: Script failed: see failed command above'\"</span> ERR</div></pre></td></tr></table></figure>\n</li>\n<li><p>在 Bash 脚本中，子 shell（使用括号 <code>(...)</code>）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># do something in current dir</span></div><div class=\"line\">(<span class=\"built_in\">cd</span> /some/other/dir &amp;&amp; other-command)</div><div class=\"line\"><span class=\"comment\"># continue in original dir</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在 Bash 中，要注意其中有许多形式的扩展。检查变量是否存在：<code>${name:?error message}</code>。例如，当 Bash 脚本需要一个参数时，可以使用这样的代码 <code>input_file=${1:?usage: $0 input_file}</code>。数学表达式：<code>i=$(( (i + 1) % 5 ))</code>。序列：<code>{1..10}</code>。截断字符串：<code>${var%suffix}</code> 和 <code>${var#prefix}</code>。例如，假设 <code>var=foo.pdf</code>，那么 <code>echo ${var%.pdf}.txt</code> 将输出 <code>foo.txt</code>。</p>\n</li>\n<li><p>使用括号扩展（<code>{</code>…<code>}</code>）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 <code>mv foo.{txt,pdf} some-dir</code>（同时移动两个文件），<code>cp somefile{,.bak}</code>（会被扩展成 <code>cp somefile somefile.bak</code>）或者 <code>mkdir -p test-{a,b,c}/subtest-{1,2,3}</code>（会被扩展成所有可能的组合，并创建一个目录树）。</p>\n</li>\n<li><p>通过使用 <code>&lt;(some command)</code> 可以将输出视为文件。例如，对比本地文件 <code>/etc/hosts</code> 和一个远程文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">diff /etc/hosts &lt;(ssh somehost cat /etc/hosts)</div></pre></td></tr></table></figure>\n</li>\n<li><p>了解 Bash 中的“here documents”，例如 <code>cat &lt;&lt;EOF ...</code>。</p>\n</li>\n<li><p>在 Bash 中，同时重定向标准输出和标准错误，<code>some-command &gt;logfile 2&gt;&amp;1</code>。通常，为了保证命令不会在标准输入里残留一个打开了的文件句柄导致你当前所在的终端无法操作，添加 <code>&lt;/dev/null</code> 是一个好习惯。</p>\n</li>\n<li><p>使用 <code>man ascii</code> 查看具有十六进制和十进制值的ASCII表。<code>man unicode</code>，<code>man utf-8</code>，以及 <code>man latin1</code> 有助于你去了解通用的编码信息。</p>\n</li>\n<li><p>使用 <code>screen</code> 或 <a href=\"https://tmux.github.io/\" target=\"_blank\" rel=\"external\"><code>tmux</code></a> 来使用多个屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。另一个轻量级的解决方案是 <a href=\"https://github.com/bogner/dtach\" target=\"_blank\" rel=\"external\"><code>dtach</code></a>。</p>\n</li>\n<li><p>ssh 中，了解如何使用 <code>-L</code> 或 <code>-D</code>（偶尔需要用 <code>-R</code>）去开启隧道是非常有用的，例如当你需要从一台远程服务器上访问 web。</p>\n</li>\n<li><p>对 ssh 设置做一些小优化可能是很有用的，例如这个 <code>~/.ssh/config</code> 文件包含了防止特定环境下断开连接、压缩数据、多通道等选项：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><div class=\"line\">TCPKeepAlive=<span class=\"literal\">yes</span></div><div class=\"line\">ServerAliveInterval=<span class=\"number\">15</span></div><div class=\"line\">ServerAliveCountMax=<span class=\"number\">6</span></div><div class=\"line\">Compression=<span class=\"literal\">yes</span></div><div class=\"line\">ControlMaster auto</div><div class=\"line\">ControlPath <span class=\"regexp\">/tmp/</span>%r@%h:%p</div><div class=\"line\">ControlPersist <span class=\"literal\">yes</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>部分其他的关于 ssh 的选项是安全敏感的，而且应当小心启用。例如在可信任的网络中：<code>StrictHostKeyChecking=no</code>，<code>ForwardAgent=yes</code></p>\n</li>\n<li><p>考虑使用 <a href=\"https://mosh.mit.edu/\" target=\"_blank\" rel=\"external\"><code>mosh</code></a> 作为 ssh 的替代品，它使用 UDP 协议。</p>\n</li>\n<li><p>获取文件的八进制格式权限，使用类似如下的代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">stat</span> -c <span class=\"string\">'%A %a %n'</span> /etc/timezone</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <a href=\"https://github.com/mooz/percol\" target=\"_blank\" rel=\"external\"><code>percol</code></a> 或者 <a href=\"https://github.com/junegunn/fzf\" target=\"_blank\" rel=\"external\"><code>fzf</code></a> 可以交互式地从另一个命令输出中选取值。</p>\n</li>\n<li><p>使用 <code>fpp</code>（<a href=\"https://github.com/facebook/PathPicker\" target=\"_blank\" rel=\"external\">PathPicker</a>）可以与基于另一个命令(例如 <code>git</code>）输出的文件交互。</p>\n</li>\n<li><p>将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：<br><code>python -m SimpleHTTPServer 7777</code> （使用端口 7777 和 Python 2）或<code>python -m http.server 7777</code> （使用端口 7777 和 Python 3）。</p>\n</li>\n<li><p>以某种权限执行命令，使用<code>sudo</code>（root 权限）或<code>sudo -u</code>（其他用户）。使用<code>su</code>或者<code>sudo bash</code>来启动一个以对应用户权限运行的 shell。使用<code>su -</code>模拟其他用户的登录。</p>\n</li>\n<li><p>了解命令行的 <a href=\"https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong\" target=\"_blank\" rel=\"external\">128K 限制</a>。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 <code>find</code> 或 <code>xargs</code> 通常可以解决。）</p>\n</li>\n<li><p>要实现基本的计算器功能（或者一般地使用 Python），可以使用 <code>python</code> 解释器。例如：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; <span class=\"number\">2</span>+<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"文件及数据处理\"><a href=\"#文件及数据处理\" class=\"headerlink\" title=\"文件及数据处理\"></a>文件及数据处理</h2><ul>\n<li><p>在当前路径下通过文件名定位一个文件，<code>find . -iname &#39;*something*&#39;</code>（或类似的）。在所有路径下通过文件名查找文件，使用 <code>locate something</code> （但请记住 <code>updatedb</code> 可能没有对最近新建的文件建立索引）。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\" rel=\"external\"><code>ag</code></a> 在源代码或数据文件里检索（比 <code>grep -r</code> 更好）。</p>\n</li>\n<li><p>将 HTML 转为文本：<code>lynx -dump -stdin</code></p>\n</li>\n<li><p>Markdown，HTML，以及所有文档格式之间的转换，试试 <a href=\"http://pandoc.org/\" target=\"_blank\" rel=\"external\"><code>pandoc</code></a>。</p>\n</li>\n<li><p>如果你不得不处理 XML，<code>xmlstarlet</code> 宝刀未老。</p>\n</li>\n<li><p>使用 <a href=\"http://stedolan.github.io/jq/\" target=\"_blank\" rel=\"external\"><code>jq</code></a> 处理 JSON。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/0k/shyaml\" target=\"_blank\" rel=\"external\"><code>shyaml</code></a> 处理 YAML。</p>\n</li>\n<li><p>Excel 或 CSV 文件的处理，<a href=\"https://github.com/onyxfish/csvkit\" target=\"_blank\" rel=\"external\">csvkit</a> 提供了 <code>in2csv</code>，<code>csvcut</code>，<code>csvjoin</code>，<code>csvgrep</code> 等工具。</p>\n</li>\n<li><p>关于 Amazon S3，<a href=\"https://github.com/s3tools/s3cmd\" target=\"_blank\" rel=\"external\"><code>s3cmd</code></a> 很方便而 <a href=\"https://github.com/bloomreach/s4cmd\" target=\"_blank\" rel=\"external\"><code>s4cmd</code></a> 更快。Amazon 官方的 <a href=\"https://github.com/aws/aws-cli\" target=\"_blank\" rel=\"external\"><code>aws</code></a> 以及  <a href=\"https://github.com/donnemartin/saws\" target=\"_blank\" rel=\"external\"><code>saws</code></a> 是其他 AWS 相关工作的基础。</p>\n</li>\n<li><p>了解如何使用 <code>sort</code> 和 <code>uniq</code>，包括 uniq 的 <code>-u</code> 参数和 <code>-d</code> 参数，详见后文单行脚本节。另外可以了解一下 <code>comm</code>。</p>\n</li>\n<li><p>了解如何使用 <code>cut</code>，<code>paste</code> 和 <code>join</code> 来更改文件。很多人都会使用 <code>cut</code>，但几乎都不会使用 <code>join</code>。</p>\n</li>\n<li><p>了解如何运用 <code>wc</code> 去计算新行数（<code>-l</code>），字符数（<code>-m</code>），单词数（<code>-w</code>）以及字节数（<code>-c</code>）。</p>\n</li>\n<li><p>了解如何使用 <code>tee</code> 将标准输入复制到文件甚至标准输出，例如 <code>ls -al | tee file.txt</code>。</p>\n</li>\n<li><p>了解语言环境对许多命令行工具的微妙影响，包括排序的顺序和性能。大多数 Linux 的安装过程会将 <code>LANG</code> 或其他有关的变量设置为符合本地的设置。意识到当你改变语言环境时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降<em>许多倍</em>。某些情况下（例如集合运算）你可以放心的使用 <code>export LC_ALL=C</code> 来忽略掉国际化并使用基于字节的顺序。</p>\n</li>\n<li><p>你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在前面，例如 <code>TZ=Pacific/Fiji date</code>。</p>\n</li>\n<li><p>了解 <code>awk</code> 和 <code>sed</code> 关于数据的简单处理的用法。例如，将文本文件中第三列的所有数字求和：<code>awk &#39;{ x += $3 } END { print x }&#39;</code>. 这可能比同等作用的 Python 代码快三倍且代码量少三倍。</p>\n</li>\n<li><p>替换一个或多个文件中出现的字符串：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">perl -pi.bak <span class=\"_\">-e</span> <span class=\"string\">'s/old-string/new-string/g'</span> my-files-*.txt</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <a href=\"https://github.com/jlevy/repren\" target=\"_blank\" rel=\"external\"><code>repren</code></a> 来批量重命名，或是在多个文件中搜索替换。（有些时候 <code>rename</code> 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将文件、目录和内容全部重命名 foo -&gt; bar:</span></div><div class=\"line\">repren --full --preserve-case --from foo --to bar .</div><div class=\"line\"><span class=\"comment\"># 还原所有备份文件 whatever.bak -&gt; whatever:</span></div><div class=\"line\">repren --renames --from <span class=\"string\">'(.*)\\.bak'</span> --to <span class=\"string\">'\\1'</span> *.bak</div><div class=\"line\"><span class=\"comment\"># 用 rename 实现上述功能（若可用）:</span></div><div class=\"line\">rename <span class=\"string\">'s/\\.bak$//'</span> *.bak</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据 man 页面的描述，<code>rsync</code> 真的是一个快速且非常灵活的文件复制工具。它通常被用于机器间的同步，但在本地也同样有用。在安全限制允许下，用 <code>rsync</code> 代替 <code>scp</code> 可以实现续传，而不用重新从头开始。它同时也是删除大量文件的<a href=\"https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html\" target=\"_blank\" rel=\"external\">最快方法</a>之一：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; rmdir some-dir</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>shuf</code> 从一个文件中随机选取多行。</p>\n</li>\n<li><p>了解 <code>sort</code> 的参数。处理数字方面，使用 <code>-n</code> 或者 <code>-h</code> 来处理可读性数字（例如 <code>du -h</code> 的输出）。明白键的工作原理（<code>-t</code> 和 <code>-k</code>）。例如，注意到你需要 <code>-k1，1</code> 来仅按第一个域来排序，而 <code>-k1</code> 意味着按整行排序。稳定排序（<code>sort -s</code>）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 <code>sort -k1，1 | sort -s -k2，2</code>。</p>\n</li>\n<li><p>如果你想在 Bash 命令行中写 tab 制表符，按下 <strong>ctrl-v</strong> <strong>[Tab]</strong> 或键入 <code>$&#39;\\t&#39;</code> （后者可能更好，因为你可以复制粘贴它）。</p>\n</li>\n<li><p>标准的源代码对比及合并工具是 <code>diff</code> 和 <code>patch</code>。使用 <code>diffstat</code> 查看变更总览数据。注意到 <code>diff -r</code> 对整个文件夹有效。使用 <code>diff -r tree1 tree2 | diffstat</code> 查看变更总览数据。</p>\n</li>\n<li><p>对于二进制文件，使用 <code>hd</code> 使其以十六进制显示以及使用 <code>bvi</code> 来编辑二进制。</p>\n</li>\n<li><p>同样对于二进制文件，<code>strings</code>（包括 <code>grep</code> 等等）允许你查找一些文本。</p>\n</li>\n<li><p>二进制文件对比（Delta 压缩），使用 <code>xdelta3</code>。</p>\n</li>\n<li><p>使用 <code>iconv</code> 更改文本编码。而更高级的用法，可以使用 <code>uconv</code>，它支持一些高级的 Unicode 功能。例如，这条命令将所有元音字母转为小写并移除了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">uconv <span class=\"_\">-f</span> utf-8 -t utf-8 -x <span class=\"string\">'::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; '</span> &lt; input.txt &gt; output.txt</div></pre></td></tr></table></figure>\n</li>\n<li><p>拆分文件，查看 <code>split</code>（按大小拆分）和 <code>csplit</code>（按模式拆分）。</p>\n</li>\n<li><p>用 <a href=\"http://www.fresse.org/dateutils/\" target=\"_blank\" rel=\"external\"><code>dateutils</code></a> 中的 <code>dateadd</code>、<code>datediff</code>、<code>strptime</code> 等工具操作日期和时间表达式。</p>\n</li>\n<li><p>使用 <code>zless</code>、<code>zmore</code>、<code>zcat</code> 和 <code>zgrep</code> 对压缩过的文件进行操作。</p>\n</li>\n<li><p>文件属性可以通过 <code>chattr</code> 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：<code>sudo chattr +i /critical/directory/or/file</code></p>\n</li>\n<li><p>使用 <code>getfacl</code> 和 <code>setfacl</code> 以保存和恢复文件权限。例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">getfacl -R /some/path &gt; permissions.txt</div><div class=\"line\">setfacl --restore=permissions.txt</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"系统调试\"><a href=\"#系统调试\" class=\"headerlink\" title=\"系统调试\"></a>系统调试</h2><ul>\n<li><p><code>curl</code> 和 <code>curl -I</code> 可以便捷地被应用于 web 调试中，它们的好兄弟 <code>wget</code> 也可以，或者是更潮的 <a href=\"https://github.com/jkbrzt/httpie\" target=\"_blank\" rel=\"external\"><code>httpie</code></a>。</p>\n</li>\n<li><p>使用 <code>iostat</code>、<code>netstat</code>、<code>top</code> （<code>htop</code> 更佳）和 <code>dstat</code> 去获取硬盘、cpu 和网络的状态。熟练掌握这些工具可以使你快速的对系统的当前状态有一个大概的认识。</p>\n</li>\n<li><p>使用 <code>netstat</code> 和 <code>ss</code> 查看网络连接的细节。</p>\n</li>\n<li><p>若要对系统有一个深度的总体认识，使用 <a href=\"https://github.com/nicolargo/glances\" target=\"_blank\" rel=\"external\"><code>glances</code></a>。它在一个终端窗口中向你提供一些系统级的数据。这对于快速的检查各个子系统非常有帮助。</p>\n</li>\n<li><p>若要了解内存状态，运行并理解 <code>free</code> 和 <code>vmstat</code> 的输出。尤其注意“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，因此它与空闲内存无关。</p>\n</li>\n<li><p>Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 <code>kill -3 &lt;pid&gt;</code> 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准输出/日志文件。JDK 中的 <code>jps</code>，<code>jstat</code>，<code>jstack</code>，<code>jmap</code> 很有用。<a href=\"https://github.com/aragozin/jvm-tools\" target=\"_blank\" rel=\"external\">SJK tools</a> 更高级.</p>\n</li>\n<li><p>使用 <code>mtr</code> 去跟踪路由，用于确定网络问题。</p>\n</li>\n<li><p>用 <code>ncdu</code> 来查看磁盘使用情况，它比常用的命令，如 <code>du -sh *</code>，更节省时间。</p>\n</li>\n<li><p>查找正在使用带宽的套接字连接或进程，使用 <code>iftop</code> 或 <code>nethogs</code>。</p>\n</li>\n<li><p><code>ab</code> 工具（捆绑于 Apache）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 <code>siege</code>。</p>\n</li>\n<li><p><code>wireshark</code>，<code>tshark</code> 和 <code>ngrep</code> 可用于复杂的网络调试。</p>\n</li>\n<li><p>了解 <code>strace</code> 和 <code>ltrace</code>。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（<code>-c</code>）和附加到一个运行的进程参数 （<code>-p</code>）。</p>\n</li>\n<li><p>了解使用 <code>ldd</code> 来检查共享库。</p>\n</li>\n<li><p>了解如何运用 <code>gdb</code> 连接到一个运行着的进程并获取它的堆栈轨迹。</p>\n</li>\n<li><p>学会使用 <code>/proc</code>。它在调试正在出现的问题的时候有时会效果惊人。比如：<code>/proc/cpuinfo</code>，<code>/proc/meminfo</code>，<code>/proc/cmdline</code>，<code>/proc/xxx/cwd</code>，<code>/proc/xxx/exe</code>，<code>/proc/xxx/fd/</code>，<code>/proc/xxx/smaps</code>（这里的 <code>xxx</code> 表示进程的 id 或 pid）。</p>\n</li>\n<li><p>当调试一些之前出现的问题的时候，<code>sar</code> 非常有用。它展示了 cpu、内存以及网络等的历史数据。</p>\n</li>\n<li><p>关于更深层次的系统分析以及性能分析，看看 <code>stap</code>（<a href=\"https://sourceware.org/systemtap/wiki\" target=\"_blank\" rel=\"external\">SystemTap</a>），<a href=\"https://en.wikipedia.org/wiki/Perf_(Linux\" target=\"_blank\" rel=\"external\"><code>perf</code></a>)，以及<a href=\"https://github.com/draios/sysdig\" target=\"_blank\" rel=\"external\"><code>sysdig</code></a>。</p>\n</li>\n<li><p>查看你当前使用的系统，使用 <code>uname</code> ， <code>uname -a</code> （Unix／kernel 信息） 或者 <code>lsb_release -a</code> （Linux 发行版信息）。</p>\n</li>\n<li><p>无论什么东西工作得很欢乐时试试 <code>dmesg</code>（可能是硬件或驱动问题）。</p>\n</li>\n<li><p>如果你删除了一个文件，但通过 <code>du</code> 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：<br><code>lsof | grep deleted | grep &quot;filename-of-my-big-file&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"单行脚本\"><a href=\"#单行脚本\" class=\"headerlink\" title=\"单行脚本\"></a>单行脚本</h2><p>一些命令组合的例子：</p>\n<ul>\n<li><p>当你需要对文本文件做集合交、并、差运算时，结合使用 <code>sort</code>/<code>uniq</code> 很有帮助。假设 <code>a</code> 与 <code>b</code> 是两内容不同的文件。这种方式效率很高，并且在小文件和上G的文件上都能运用 （<code>sort</code> 不被内存大小约束，尽管在 <code>/tmp</code> 在一个小的根分区上时你可能需要 <code>-T</code> 参数），参阅前文中关于 <code>LC_ALL</code> 和 <code>sort</code> 的 <code>-u</code> 参数的部分。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">cat a b | sort | uniq &gt; c   <span class=\"comment\"># c is a union b</span></div><div class=\"line\">cat a b | sort | uniq <span class=\"_\">-d</span> &gt; c   <span class=\"comment\"># c is a intersect b</span></div><div class=\"line\">cat a b b | sort | uniq -u &gt; c   <span class=\"comment\"># c is set difference a - b</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>grep . *</code>（每行都会附上文件名）或者 <code>head -100 *</code>（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 <code>/sys</code>、<code>/proc</code>、<code>/etc</code>）时特别好用。</p>\n</li>\n</ul>\n<ul>\n<li><p>计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">awk <span class=\"string\">'&#123; x += $3 &#125; END &#123; print x &#125;'</span> myfile</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果你想在文件树上查看大小/日期，这可能看起来像递归版的 <code>ls -l</code> 但比 <code>ls -lR</code> 更易于理解：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">find . -type f -ls</div></pre></td></tr></table></figure>\n</li>\n<li><p>假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 <code>acct_id</code> 参数在URI中。如果你想计算出每个 <code>acct_id</code> 值有多少次请求，使用如下代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">cat access.log | egrep -o <span class=\"string\">'acct_id=[0-9]+'</span> | cut <span class=\"_\">-d</span>= <span class=\"_\">-f</span>2 | sort | uniq -c | sort -rn</div></pre></td></tr></table></figure>\n</li>\n<li><p>要连续地监测变化，可以使用 <code>watch</code>，例如检查某个文件夹中文件的改变，可以用 <code>watch -d -n 2 &#39;ls -rtlh | tail&#39;</code>；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 <code>watch -d -n 2 ifconfig</code>。</p>\n</li>\n<li><p>运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">taocl</span></span>() &#123;</div><div class=\"line\">  curl <span class=\"_\">-s</span> https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|</div><div class=\"line\">    pandoc <span class=\"_\">-f</span> markdown -t html |</div><div class=\"line\">    iconv <span class=\"_\">-f</span> <span class=\"string\">'utf-8'</span> -t <span class=\"string\">'unicode'</span> |</div><div class=\"line\">    xmlstarlet fo --html --dropdtd |</div><div class=\"line\">    xmlstarlet sel -t -v <span class=\"string\">\"(html/body/ul/li[count(p)&gt;0])[<span class=\"variable\">$RANDOM</span> mod last()+1]\"</span> |</div><div class=\"line\">    xmlstarlet unesc | fmt -80</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"冷门但有用\"><a href=\"#冷门但有用\" class=\"headerlink\" title=\"冷门但有用\"></a>冷门但有用</h2><ul>\n<li><p><code>expr</code>：计算表达式或正则匹配</p>\n</li>\n<li><p><code>m4</code>：简单地宏处理器</p>\n</li>\n<li><p><code>yes</code>：多次打印字符串</p>\n</li>\n<li><p><code>cal</code>：漂亮的日历</p>\n</li>\n<li><p><code>env</code>：执行一个命令（脚本文件中很有用）</p>\n</li>\n<li><p><code>printenv</code>：打印环境变量（调试时或在使用脚本文件时很有用）</p>\n</li>\n<li><p><code>look</code>：查找以特定字符串开头的单词</p>\n</li>\n<li><p><code>cut</code>、<code>paste</code> 和 <code>join</code>：数据修改</p>\n</li>\n<li><p><code>fmt</code>：格式化文本段落</p>\n</li>\n<li><p><code>pr</code>：将文本格式化成页/列形式</p>\n</li>\n<li><p><code>fold</code>：包裹文本中的几行</p>\n</li>\n<li><p><code>column</code>：将文本格式化成多列或表格</p>\n</li>\n<li><p><code>expand</code> 和 <code>unexpand</code>：制表符与空格之间转换</p>\n</li>\n<li><p><code>nl</code>：添加行号</p>\n</li>\n<li><p><code>seq</code>：打印数字</p>\n</li>\n<li><p><code>bc</code>：计算器</p>\n</li>\n<li><p><code>factor</code>：分解因数</p>\n</li>\n<li><p><a href=\"https://gnupg.org/\" target=\"_blank\" rel=\"external\"><code>gpg</code></a>：加密并签名文件</p>\n</li>\n<li><p><code>toe</code>：terminfo entries 列表</p>\n</li>\n<li><p><code>nc</code>：网络调试及数据传输</p>\n</li>\n<li><p><code>socat</code>：套接字代理，与 <code>netcat</code> 类似</p>\n</li>\n<li><p><a href=\"https://github.com/mattthias/slurm\" target=\"_blank\" rel=\"external\"><code>slurm</code></a>：网络可视化</p>\n</li>\n<li><p><code>dd</code>：文件或设备间传输数据</p>\n</li>\n<li><p><code>file</code>：确定文件类型</p>\n</li>\n<li><p><code>tree</code>：以树的形式显示路径和文件，类似于递归的 <code>ls</code></p>\n</li>\n<li><p><code>stat</code>：文件信息</p>\n</li>\n<li><p><code>time</code>：执行命令，并计算执行时间</p>\n</li>\n<li><p><code>timeout</code>：在指定时长范围内执行命令，并在规定时间结束后停止进程</p>\n</li>\n<li><p><code>lockfile</code>：使文件只能通过 <code>rm -f</code> 移除</p>\n</li>\n<li><p><code>logrotate</code>： 切换、压缩以及发送日志文件</p>\n</li>\n<li><p><code>watch</code>：重复运行同一个命令，展示结果并高亮有更改的部分</p>\n</li>\n<li><p><code>tac</code>：反向输出文件</p>\n</li>\n<li><p><code>shuf</code>：文件中随机选取几行</p>\n</li>\n<li><p><code>comm</code>：一行一行的比较排序过的文件</p>\n</li>\n<li><p><code>pv</code>：监视通过管道的数据</p>\n</li>\n<li><p><code>hd</code>，<code>hexdump</code>，<code>xxd</code>，<code>biew</code> 和 <code>bvi</code>：保存或编辑二进制文件</p>\n</li>\n<li><p><code>strings</code>：从二进制文件中抽取文本</p>\n</li>\n<li><p><code>tr</code>：转换字母</p>\n</li>\n<li><p><code>iconv</code> 或 <code>uconv</code>：简易的文件编码</p>\n</li>\n<li><p><code>split</code> 和 <code>csplit</code>：分割文件</p>\n</li>\n<li><p><code>sponge</code>：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 <code>grep -v something some-file | sponge some-file</code></p>\n</li>\n<li><p><code>units</code>：将一种计量单位转换为另一种等效的计量单位（参阅 <code>/usr/share/units/definitions.units</code>）</p>\n</li>\n<li><p><code>apg</code>：随机生成密码</p>\n</li>\n<li><p><code>7z</code>：高比例的文件压缩</p>\n</li>\n<li><p><code>ldd</code>：动态库信息</p>\n</li>\n<li><p><code>nm</code>：提取 obj 文件中的符号</p>\n</li>\n<li><p><code>ab</code>：性能分析 web 服务器</p>\n</li>\n<li><p><code>strace</code>：系统调用调试</p>\n</li>\n<li><p><code>mtr</code>：更好的网络调试跟踪工具</p>\n</li>\n<li><p><code>cssh</code>：可视化的并发 shell</p>\n</li>\n<li><p><code>rsync</code>：通过 ssh 或本地文件系统同步文件和文件夹</p>\n</li>\n<li><p><code>wireshark</code> 和 <code>tshark</code>：抓包和网络调试工具</p>\n</li>\n<li><p><code>ngrep</code>：网络层的 grep</p>\n</li>\n<li><p><code>host</code> 和 <code>dig</code>：DNS 查找</p>\n</li>\n<li><p><code>lsof</code>：列出当前系统打开文件的工具以及查看端口信息</p>\n</li>\n<li><p><code>dstat</code>：系统状态查看</p>\n</li>\n<li><p><a href=\"https://github.com/nicolargo/glances\" target=\"_blank\" rel=\"external\"><code>glances</code></a>：高层次的多子系统总览</p>\n</li>\n<li><p><code>iostat</code>：硬盘使用状态</p>\n</li>\n<li><p><code>mpstat</code>： CPU 使用状态</p>\n</li>\n<li><p><code>vmstat</code>： 内存使用状态</p>\n</li>\n<li><p><code>htop</code>：top 的加强版</p>\n</li>\n<li><p><code>last</code>：登入记录</p>\n</li>\n<li><p><code>w</code>：查看处于登录状态的用户</p>\n</li>\n<li><p><code>id</code>：用户/组 ID 信息</p>\n</li>\n<li><p><code>sar</code>：系统历史数据</p>\n</li>\n<li><p><code>iftop</code> 或 <code>nethogs</code>：套接字及进程的网络利用</p>\n</li>\n<li><p><code>ss</code>：套接字数据</p>\n</li>\n<li><p><code>dmesg</code>：引导及系统错误信息</p>\n</li>\n<li><p><code>sysctl</code>： 在内核运行时动态地查看和修改内核的运行参数</p>\n</li>\n<li><p><code>hdparm</code>：SATA/ATA 磁盘更改及性能分析</p>\n</li>\n<li><p><code>lsblk</code>：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息</p>\n</li>\n<li><p><code>lshw</code>，<code>lscpu</code>，<code>lspci</code>，<code>lsusb</code> 和 <code>dmidecode</code>：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等</p>\n</li>\n<li><p><code>lsmod</code> 和 <code>modinfo</code>：列出内核模块，并显示其细节</p>\n</li>\n<li><p><code>fortune</code>，<code>ddate</code> 和 <code>sl</code>：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”</p>\n</li>\n</ul>\n<h2 id=\"仅限-OS-X-系统\"><a href=\"#仅限-OS-X-系统\" class=\"headerlink\" title=\"仅限 OS X 系统\"></a>仅限 OS X 系统</h2><p>以下是<em>仅限于</em> OS X 系统的技巧</p>\n<ul>\n<li><p>用 <code>brew</code> （Homebrew）或者 <code>port</code> （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。</p>\n</li>\n<li><p>用 <code>pbcopy</code> 复制任何命令的输出到桌面应用，用 <code>pbpaste</code> 粘贴输入。</p>\n</li>\n<li><p>若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 <strong>alt-b</strong>、<strong>alt-f</strong> 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。</p>\n</li>\n<li><p>用 <code>open</code> 或者 <code>open -a /Applications/Whatever.app</code> 使用桌面应用打开文件。</p>\n</li>\n<li><p>Spotlight： 用 <code>mdfind</code> 搜索文件，用 <code>mdls</code> 列出元数据（例如照片的 EXIF 信息）。</p>\n</li>\n<li><p>注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 <code>ps</code>，<code>ls</code>，<code>tail</code>，<code>awk</code>，<code>sed</code>）都和 Linux 中有些微的不同，这些极大的被 System V-style Unix 和 GNU 工具影响。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 <code>gawk</code> 和 <code>gsed</code> 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 <code>perl</code> ）或者经过仔细的测试。</p>\n</li>\n<li><p>用 <code>sw_vers</code> 获取 OS X 的版本信息。</p>\n</li>\n</ul>\n<h2 id=\"仅限-Windows-系统\"><a href=\"#仅限-Windows-系统\" class=\"headerlink\" title=\"仅限 Windows 系统\"></a>仅限 Windows 系统</h2><ul>\n<li><p>要在 Microsoft Windows 中使用 Unix shell，可以安装 <a href=\"https://cygwin.com/\" target=\"_blank\" rel=\"external\">Cygwin</a>。本文档中介绍的大多数内容都将适用。</p>\n</li>\n<li><p>通过 Cygwin 的包管理器来安装额外的 Unix 程序。</p>\n</li>\n<li><p>使用 <code>mintty</code> 作为你的命令行窗口。</p>\n</li>\n<li><p>要访问 Windows 剪贴板，可以通过 <code>/dev/clipboard</code>。</p>\n</li>\n<li><p>运行 <code>cygstart</code> 以通过默认程序打开一个文件。</p>\n</li>\n<li><p>要访问 Windows 注册表，可以使用 <code>regtool</code>。</p>\n</li>\n<li><p>注意 Windows 驱动器路径 <code>C:\\</code> 在 Cygwin 中用 <code>/cygdrive/c</code> 代表，而 Cygwin 的 <code>/</code> 在 Windows 中显示在 <code>C:\\cygwin</code>。要转换 Cygwin 和 Windows 风格的路径可以用 <code>cygpath</code>。这在需要调用 Windows 程序的脚本里很有用。</p>\n</li>\n<li><p>学会使用 <code>wmic</code>，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。</p>\n</li>\n</ul>\n<h2 id=\"更多资源\"><a href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"></a>更多资源</h2><ul>\n<li><a href=\"https://github.com/alebcay/awesome-shell\" target=\"_blank\" rel=\"external\">awesome-shell</a>：一份精心组织的命令行工具及资源的列表。</li>\n<li><a href=\"https://github.com/herrbischoff/awesome-osx-command-line\" target=\"_blank\" rel=\"external\">awesome-osx-command-line</a>：一份针对 OS X 命令行的更深入的指南。</li>\n<li><a href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\" target=\"_blank\" rel=\"external\">Strict mode</a>：为了编写更好的脚本文件。</li>\n<li><a href=\"https://github.com/koalaman/shellcheck\" target=\"_blank\" rel=\"external\">shellcheck</a>：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。</li>\n<li><a href=\"http://www.dwheeler.com/essays/filenames-in-shell.html\" target=\"_blank\" rel=\"external\">Filenames and Pathnames in Shell</a>：有关如何在 shell 脚本里正确处理文件名的细枝末节。</li>\n<li><a href=\"http://datascienceatthecommandline.com/#tools\" target=\"_blank\" rel=\"external\">Data Science at the Command Line</a>：用于数据科学的一些命令和工具，摘自同名书籍。</li>\n</ul>\n<h2 id=\"免责声明\"><a href=\"#免责声明\" class=\"headerlink\" title=\"免责声明\"></a>免责声明</h2><p>除去特别微小的任务，编写代码是出于方便阅读的目的。能力往往伴随着责任。你 <em>可以</em> 在 Bash 中做一些事并不意味着你应该去做！;)</p>\n<h2 id=\"授权条款\"><a href=\"#授权条款\" class=\"headerlink\" title=\"授权条款\"></a>授权条款</h2><p><a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"external\"><img src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" alt=\"Creative Commons License\"></a></p>\n<p>本文使用授权协议 <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"external\">Creative Commons Attribution-ShareAlike 4.0 International License</a>。</p>\n","excerpt":"<p>🌍</p>\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#基础\">基础</a></li>\n<li><a href=\"#日常使用\">日常使用</a></li>\n<li><a href=\"#文件及数据处理\">文件及数据处理</a></li>\n<li><a href=\"#系统调试\">系统调试</a></li>\n<li><a href=\"#单行脚本\">单行脚本</a></li>\n<li><a href=\"#冷门但有用\">冷门但有用</a></li>\n<li><a href=\"#仅限-os-x-系统\">仅限 OS X 系统</a></li>\n<li><a href=\"#仅限-windows-系统\">仅限 Windows 系统</a></li>\n<li><a href=\"#更多资源\">更多资源</a></li>\n<li><a href=\"#免责声明\">免责声明</a></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/cowsay.png\" alt=\"curl -s &#39;https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md&#39; | egrep -o &#39;`\\w+`&#39; | tr -d &#39;`&#39; | cowsay -W50\"></p>","more":"<p>熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。</p>\n<p>这篇文章是<a href=\"AUTHORS.md\">许多作者和译者</a>共同的成果。<br>这里的部分内容<br><a href=\"http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands\">首次</a><br><a href=\"http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix\">出现</a><br>于 <a href=\"http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know\">Quora</a>，<br>但已经迁移到了 Github，并由众多高手做出了许多改进。<br>如果你在本文中发现了错误或者存在可以改善的地方，请<a href=\"/CONTRIBUTING.md\"><strong>贡献你的一份力量</strong></a>。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>涵盖范围：</p>\n<ul>\n<li>这篇文章对刚接触命令行的新手，以及具有命令行使用经验的人都有用处。本文致力于做到<em>覆盖面广</em>（尽量包括一切重要的内容），<em>具体</em>（给出最常见的具体的例子），以及<em>简洁</em>（避免不必要的，或是可以在其他地方轻松查到的细枝末节）。每个技巧在特定情境下或是基本的，或是能显著节约时间。</li>\n<li>本文为 Linux 所写，除了<a href=\"#仅限-os-x-系统\">仅限 OS X 系统</a>和<a href=\"#仅限-windows-系统\">仅限 Windows 系统</a>的部分。其它节中的大部分内容都适用于其它 Unix 系统或 OS X，甚至 Cygwin。</li>\n<li>本文关注于交互式 Bash，尽管很多技巧也适用于其他 shell 或 Bash 脚本。</li>\n<li>本文包括了“标准的”Unix 命令和需要安装特定包的命令，只要它们足够重要。</li>\n</ul>\n<p>注意事项：</p>\n<ul>\n<li>为了能在一页内展示尽量多的东西，一些具体的信息会被间接地包含在引用页里。聪明机智的你，如果掌握了使用 Google 搜索引擎的基本思路与命令，那么你将可以查阅到更多的详细信息。使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code>，<code>pacman</code>，<br><code>pip</code> 或 <code>brew</code>（以及其它合适的包管理器）来安装新程序。</li>\n<li>使用 <a href=\"http://explainshell.com/\">Explainshell</a> 去获取相关命令、参数、管道等内容的解释。</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p>学习 Bash 的基础知识。具体来说，输入 <code>man bash</code> 并至少全文浏览一遍; 它很简单并且不长。其他的 shell 可能很好用，但 Bash 功能强大到几乎所有情况下都是可用的 （ <em>只</em>学习 zsh，fish 或其他的 shell 的话，在你自己的电脑上会显得很方便，但在很多情况下会限制你，比如当你需要在服务器上工作时）。</p>\n</li>\n<li><p>学习并掌握至少一个基于文本的编辑器。通常 Vim （<code>vi</code>） 会是你最好的选择，因为在终端里进行随机编辑，Vim 真的毫无敌手，哪怕是 Emacs、某大型 IDE 甚至时下非常流行的编辑器。</p>\n</li>\n<li><p>学会如何使用 <code>man</code> 命令去阅读文档。学会使用 <code>apropos</code> 去查找文档。了解有些命令并不对应可执行文件，而是Bash内置的，可以使用 <code>help</code> 和 <code>help -d</code> 命令获取帮助信息。你可以用 <code>type 命令</code> 来判断它到底是可执行文件、shell 内置命令、还是别名。</p>\n</li>\n<li><p>学会使用 <code>&gt;</code> 和 <code>&lt;</code> 来重定向输出和输入，学会使用 <code>|</code> 来重定向管道。明白 <code>&gt;</code> 会覆盖了输出文件而 <code>&gt;&gt;</code> 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。</p>\n</li>\n<li><p>学会使用通配符 <code>*</code> （或许再算上 <code>?</code> 和 <code>[</code>…<code>]</code>） 和引用以及引用中 <code>&#39;</code> 和 <code>&quot;</code> 的区别。</p>\n</li>\n<li><p>熟悉 Bash 任务管理工具：<code>&amp;</code>，<strong>ctrl-z</strong>，<strong>ctrl-c</strong>，<code>jobs</code>，<code>fg</code>，<code>bg</code>，<code>kill</code> 等。</p>\n</li>\n<li><p>了解 <code>ssh</code>，以及学会通过使用 <code>ssh-agent</code>，<code>ssh-add</code> 等命令来实现基本的无密码认证。</p>\n</li>\n<li><p>学会基本的文件管理：<code>ls</code> 和 <code>ls -l</code> （了解 <code>ls -l</code> 中每一列代表的意义），<code>less</code>，<code>head</code>，<code>tail</code> 和 <code>tail -f</code> （甚至 <code>less +F</code>），<code>ln</code> 和 <code>ln -s</code> （了解硬链接与软链接的区别），<code>chown</code>，<code>chmod</code>，<code>du</code> （硬盘使用情况概述：<code>du -hs *</code>）。 关于文件系统的管理，学习 <code>df</code>，<code>mount</code>，<code>fdisk</code>，<code>mkfs</code>，<code>lsblk</code>。知道 inode 是什么（与 <code>ls -i</code> 和 <code>df -i</code> 等命令相关）。</p>\n</li>\n<li><p>学习基本的网络管理：<code>ip</code> 或 <code>ifconfig</code>，<code>dig</code>。</p>\n</li>\n<li><p>学习并使用一种版本控制管理系统，例如 <code>git</code>。</p>\n</li>\n<li><p>熟悉正则表达式，以及 <code>grep</code>／<code>egrep</code> 里不同参数的作用，例如 <code>-i</code>，<code>-o</code>，<code>-v</code>，<code>-A</code>，<code>-B</code> 和 <code>-C</code>，这些参数是值得学习并掌握的。</p>\n</li>\n<li><p>学会使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code> 或 <code>pacman</code> （取决于你使用的 Linux 发行版）来查找或安装软件包。并确保你的环境中有 <code>pip</code> 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 <code>pip</code> 来安装会很方便）。</p>\n</li>\n</ul>\n<h2 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h2><ul>\n<li><p>在 Bash 中，可以使用 <strong>Tab</strong> 自动补全参数，使用 <strong>ctrl-r</strong> 搜索命令行历史（在按下之后，键入便可以搜索，重复按下 <strong>ctrl-r</strong> 会在更多匹配中循环，按下 <strong>Enter</strong> 会执行找到的命令，按下右方向键会将结果放入当前行中，使你可以进行编辑）。</p>\n</li>\n<li><p>在 Bash 中，可以使用 <strong>ctrl-w</strong> 删除你键入的最后一个单词，使用 <strong>ctrl-u</strong> 删除整行，使用 <strong>alt-b</strong> 和 <strong>alt-f</strong> 以单词为单位移动光标，使用 <strong>ctrl-a</strong> 将光标移至行首，使用 <strong>ctrl-e</strong> 将光标移至行尾，使用 <strong>ctrl-k</strong> 删除光标至行尾的所有内容，使用 <strong>ctrl-l</strong> 清屏。键入 <code>man readline</code> 查看 Bash 中的默认快捷键，内容很多。例如 <strong>alt-.</strong> 循环地移向前一个参数，以及 <strong>alt-*</strong> 展开通配符。</p>\n</li>\n</ul>\n<ul>\n<li><p>你喜欢的话，可以键入 <code>set -o vi</code> 来使用 vi 风格的快捷键，而 <code>set -o emacs</code> 可以把它改回来。</p>\n</li>\n<li><p>为了方便地键入长命令，在设置你的编辑器后（例如 <code>export EDITOR=vim</code>），键入 <strong>ctrl-x</strong> <strong>ctrl-e</strong> 会打开一个编辑器来编辑当前命令。在 vi 模式下则键入 <strong>escape-v</strong> 实现相同的功能。</p>\n</li>\n<li><p>键入 <code>history</code> 查看命令行历史记录，再用 <code>!n</code>（<code>n</code> 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是用 <code>!$</code> 指代上次键入的参数，以及用 <code>!!</code> 指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些通常被 <strong>ctrl-r</strong> 和 <strong>alt-.</strong> 取代。</p>\n</li>\n<li><p>要进入 home 目录可以用 <code>cd</code>。要访问你的 home 目录中的文件，可以使用前缀 <code>~</code>（例如 <code>~/.bashrc</code>）。在 <code>sh</code> 脚本里则用 <code>$HOME</code> 指代 home 目录。</p>\n</li>\n<li><p>回到上一个工作路径：<code>cd -</code></p>\n</li>\n<li><p>如果你输入命令的时候改变了主意，按下 <strong>alt-#</strong> 在行首添加 <code>#</code>，或者依次按下 <strong>ctrl-a</strong>， <strong>#</strong>， <strong>enter</strong>。这样做的话，之后你可以很方便的利用命令行历史回到你刚才输入到一半的命令。</p>\n</li>\n<li><p>使用 <code>xargs</code> （ 或 <code>parallel</code>）。他们非常给力。注意到你可以控制每行参数个数（<code>-L</code>）和最大并行数（<code>-P</code>）。如果你不确定它们是否会按你想的那样工作，先使用 <code>xargs echo</code> 查看一下。此外，使用 <code>-I{}</code> 会很方便。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">find . -name <span class=\"string\">'*.py'</span> | xargs grep some_function</div><div class=\"line\">cat hosts | xargs -I&#123;&#125; ssh root@&#123;&#125; hostname</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>pstree -p</code> 有助于展示进程树。</p>\n</li>\n<li><p>使用 <code>pgrep</code> 和 <code>pkill</code> 根据名字查找进程或发送信号（<code>-f</code> 参数通常有用）。</p>\n</li>\n<li><p>了解你可以发往进程的信号的种类。比如，使用 <code>kill -STOP [pid]</code> 停止一个进程。使用 <code>man 7 signal</code> 查看详细列表。</p>\n</li>\n<li><p>使用 <code>nohup</code> 或 <code>disown</code> 使一个后台进程持续运行。</p>\n</li>\n<li><p>使用 <code>netstat -lntp</code> 或 <code>ss -plat</code> 检查哪些进程在监听端口（默认是检查 TCP 端口; 使用参数 <code>-u</code> 检查 UDP 端口）。</p>\n</li>\n<li><p>有关打开套接字和文件，请参阅 <code>lsof</code>。</p>\n</li>\n<li><p>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间。</p>\n</li>\n<li><p>使用 <code>alias</code> 来创建常用命令的快捷形式。例如：<code>alias ll=&#39;ls -latr&#39;</code> 创建了一个新的命令别名 <code>ll</code>。</p>\n</li>\n<li><p>把别名、shell 选项和常用函数保存在 <code>~/.bashrc</code>，然后<a href=\"http://superuser.com/a/183980/7106\">安排登陆 shell 来读取</a>。这样你就可以在所有 shell 会话中使用你的设定。</p>\n</li>\n<li><p>把环境变量的设定以及登陆时要执行的命令保存在 <code>~/.bash_profile</code>。对于从图形界面启动的，以及 <code>cron</code> 工作的 shell，需要单独配置。</p>\n</li>\n<li><p>要在几台电脑中同步你的配置文件（例如 <code>.bashrc</code> 和 <code>.bash_profile</code>），可以用 Git。</p>\n</li>\n<li><p>当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 <code>&quot;FOO&quot;</code>。尽量使用 <code>-0</code> 或 <code>-print0</code> 选项以便用空字符来分隔文件名，例如 <code>locate -0 pattern | xargs -0 ls -al</code> 或 <code>find / -print0 -type d | xargs -0 ls -al</code>。如果 for 循环中循环访问的文件名含有空格，只需用 <code>IFS=$&#39;\\n&#39;</code> 把内部字段分隔符设为换行符。</p>\n</li>\n<li><p>在 Bash 脚本中，使用 <code>set -x</code> 去调试输出，尽可能地使用严格模式，使用 <code>set -e</code> 令脚本在发生错误时退出而不是继续运行，使用 <code>set -u</code> 来检查是否使用了未赋值的变量，使用 <code>set -o pipefail</code> 严谨地对待错误（尽管问题可能很微妙）。当牵扯到很多脚本时，使用 <code>trap</code>。一个好的习惯是在脚本文件开头这样写，这会使它检测一些错误，并在错误发生时中断程序并输出信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> -euo pipefail</div><div class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">\"echo 'error: Script failed: see failed command above'\"</span> ERR</div></pre></td></tr></table></figure>\n</li>\n<li><p>在 Bash 脚本中，子 shell（使用括号 <code>(...)</code>）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># do something in current dir</span></div><div class=\"line\">(<span class=\"built_in\">cd</span> /some/other/dir &amp;&amp; other-command)</div><div class=\"line\"><span class=\"comment\"># continue in original dir</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在 Bash 中，要注意其中有许多形式的扩展。检查变量是否存在：<code>${name:?error message}</code>。例如，当 Bash 脚本需要一个参数时，可以使用这样的代码 <code>input_file=${1:?usage: $0 input_file}</code>。数学表达式：<code>i=$(( (i + 1) % 5 ))</code>。序列：<code>{1..10}</code>。截断字符串：<code>${var%suffix}</code> 和 <code>${var#prefix}</code>。例如，假设 <code>var=foo.pdf</code>，那么 <code>echo ${var%.pdf}.txt</code> 将输出 <code>foo.txt</code>。</p>\n</li>\n<li><p>使用括号扩展（<code>{</code>…<code>}</code>）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 <code>mv foo.{txt,pdf} some-dir</code>（同时移动两个文件），<code>cp somefile{,.bak}</code>（会被扩展成 <code>cp somefile somefile.bak</code>）或者 <code>mkdir -p test-{a,b,c}/subtest-{1,2,3}</code>（会被扩展成所有可能的组合，并创建一个目录树）。</p>\n</li>\n<li><p>通过使用 <code>&lt;(some command)</code> 可以将输出视为文件。例如，对比本地文件 <code>/etc/hosts</code> 和一个远程文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">diff /etc/hosts &lt;(ssh somehost cat /etc/hosts)</div></pre></td></tr></table></figure>\n</li>\n<li><p>了解 Bash 中的“here documents”，例如 <code>cat &lt;&lt;EOF ...</code>。</p>\n</li>\n<li><p>在 Bash 中，同时重定向标准输出和标准错误，<code>some-command &gt;logfile 2&gt;&amp;1</code>。通常，为了保证命令不会在标准输入里残留一个打开了的文件句柄导致你当前所在的终端无法操作，添加 <code>&lt;/dev/null</code> 是一个好习惯。</p>\n</li>\n<li><p>使用 <code>man ascii</code> 查看具有十六进制和十进制值的ASCII表。<code>man unicode</code>，<code>man utf-8</code>，以及 <code>man latin1</code> 有助于你去了解通用的编码信息。</p>\n</li>\n<li><p>使用 <code>screen</code> 或 <a href=\"https://tmux.github.io/\"><code>tmux</code></a> 来使用多个屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。另一个轻量级的解决方案是 <a href=\"https://github.com/bogner/dtach\"><code>dtach</code></a>。</p>\n</li>\n<li><p>ssh 中，了解如何使用 <code>-L</code> 或 <code>-D</code>（偶尔需要用 <code>-R</code>）去开启隧道是非常有用的，例如当你需要从一台远程服务器上访问 web。</p>\n</li>\n<li><p>对 ssh 设置做一些小优化可能是很有用的，例如这个 <code>~/.ssh/config</code> 文件包含了防止特定环境下断开连接、压缩数据、多通道等选项：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><div class=\"line\">TCPKeepAlive=<span class=\"literal\">yes</span></div><div class=\"line\">ServerAliveInterval=<span class=\"number\">15</span></div><div class=\"line\">ServerAliveCountMax=<span class=\"number\">6</span></div><div class=\"line\">Compression=<span class=\"literal\">yes</span></div><div class=\"line\">ControlMaster auto</div><div class=\"line\">ControlPath <span class=\"regexp\">/tmp/</span>%r@%h:%p</div><div class=\"line\">ControlPersist <span class=\"literal\">yes</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>部分其他的关于 ssh 的选项是安全敏感的，而且应当小心启用。例如在可信任的网络中：<code>StrictHostKeyChecking=no</code>，<code>ForwardAgent=yes</code></p>\n</li>\n<li><p>考虑使用 <a href=\"https://mosh.mit.edu/\"><code>mosh</code></a> 作为 ssh 的替代品，它使用 UDP 协议。</p>\n</li>\n<li><p>获取文件的八进制格式权限，使用类似如下的代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">stat</span> -c <span class=\"string\">'%A %a %n'</span> /etc/timezone</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <a href=\"https://github.com/mooz/percol\"><code>percol</code></a> 或者 <a href=\"https://github.com/junegunn/fzf\"><code>fzf</code></a> 可以交互式地从另一个命令输出中选取值。</p>\n</li>\n<li><p>使用 <code>fpp</code>（<a href=\"https://github.com/facebook/PathPicker\">PathPicker</a>）可以与基于另一个命令(例如 <code>git</code>）输出的文件交互。</p>\n</li>\n<li><p>将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：<br><code>python -m SimpleHTTPServer 7777</code> （使用端口 7777 和 Python 2）或<code>python -m http.server 7777</code> （使用端口 7777 和 Python 3）。</p>\n</li>\n<li><p>以某种权限执行命令，使用<code>sudo</code>（root 权限）或<code>sudo -u</code>（其他用户）。使用<code>su</code>或者<code>sudo bash</code>来启动一个以对应用户权限运行的 shell。使用<code>su -</code>模拟其他用户的登录。</p>\n</li>\n<li><p>了解命令行的 <a href=\"https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong\">128K 限制</a>。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 <code>find</code> 或 <code>xargs</code> 通常可以解决。）</p>\n</li>\n<li><p>要实现基本的计算器功能（或者一般地使用 Python），可以使用 <code>python</code> 解释器。例如：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; <span class=\"number\">2</span>+<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"文件及数据处理\"><a href=\"#文件及数据处理\" class=\"headerlink\" title=\"文件及数据处理\"></a>文件及数据处理</h2><ul>\n<li><p>在当前路径下通过文件名定位一个文件，<code>find . -iname &#39;*something*&#39;</code>（或类似的）。在所有路径下通过文件名查找文件，使用 <code>locate something</code> （但请记住 <code>updatedb</code> 可能没有对最近新建的文件建立索引）。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/ggreer/the_silver_searcher\"><code>ag</code></a> 在源代码或数据文件里检索（比 <code>grep -r</code> 更好）。</p>\n</li>\n<li><p>将 HTML 转为文本：<code>lynx -dump -stdin</code></p>\n</li>\n<li><p>Markdown，HTML，以及所有文档格式之间的转换，试试 <a href=\"http://pandoc.org/\"><code>pandoc</code></a>。</p>\n</li>\n<li><p>如果你不得不处理 XML，<code>xmlstarlet</code> 宝刀未老。</p>\n</li>\n<li><p>使用 <a href=\"http://stedolan.github.io/jq/\"><code>jq</code></a> 处理 JSON。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/0k/shyaml\"><code>shyaml</code></a> 处理 YAML。</p>\n</li>\n<li><p>Excel 或 CSV 文件的处理，<a href=\"https://github.com/onyxfish/csvkit\">csvkit</a> 提供了 <code>in2csv</code>，<code>csvcut</code>，<code>csvjoin</code>，<code>csvgrep</code> 等工具。</p>\n</li>\n<li><p>关于 Amazon S3，<a href=\"https://github.com/s3tools/s3cmd\"><code>s3cmd</code></a> 很方便而 <a href=\"https://github.com/bloomreach/s4cmd\"><code>s4cmd</code></a> 更快。Amazon 官方的 <a href=\"https://github.com/aws/aws-cli\"><code>aws</code></a> 以及  <a href=\"https://github.com/donnemartin/saws\"><code>saws</code></a> 是其他 AWS 相关工作的基础。</p>\n</li>\n<li><p>了解如何使用 <code>sort</code> 和 <code>uniq</code>，包括 uniq 的 <code>-u</code> 参数和 <code>-d</code> 参数，详见后文单行脚本节。另外可以了解一下 <code>comm</code>。</p>\n</li>\n<li><p>了解如何使用 <code>cut</code>，<code>paste</code> 和 <code>join</code> 来更改文件。很多人都会使用 <code>cut</code>，但几乎都不会使用 <code>join</code>。</p>\n</li>\n<li><p>了解如何运用 <code>wc</code> 去计算新行数（<code>-l</code>），字符数（<code>-m</code>），单词数（<code>-w</code>）以及字节数（<code>-c</code>）。</p>\n</li>\n<li><p>了解如何使用 <code>tee</code> 将标准输入复制到文件甚至标准输出，例如 <code>ls -al | tee file.txt</code>。</p>\n</li>\n<li><p>了解语言环境对许多命令行工具的微妙影响，包括排序的顺序和性能。大多数 Linux 的安装过程会将 <code>LANG</code> 或其他有关的变量设置为符合本地的设置。意识到当你改变语言环境时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降<em>许多倍</em>。某些情况下（例如集合运算）你可以放心的使用 <code>export LC_ALL=C</code> 来忽略掉国际化并使用基于字节的顺序。</p>\n</li>\n<li><p>你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在前面，例如 <code>TZ=Pacific/Fiji date</code>。</p>\n</li>\n<li><p>了解 <code>awk</code> 和 <code>sed</code> 关于数据的简单处理的用法。例如，将文本文件中第三列的所有数字求和：<code>awk &#39;{ x += $3 } END { print x }&#39;</code>. 这可能比同等作用的 Python 代码快三倍且代码量少三倍。</p>\n</li>\n<li><p>替换一个或多个文件中出现的字符串：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">perl -pi.bak <span class=\"_\">-e</span> <span class=\"string\">'s/old-string/new-string/g'</span> my-files-*.txt</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <a href=\"https://github.com/jlevy/repren\"><code>repren</code></a> 来批量重命名，或是在多个文件中搜索替换。（有些时候 <code>rename</code> 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将文件、目录和内容全部重命名 foo -&gt; bar:</span></div><div class=\"line\">repren --full --preserve-case --from foo --to bar .</div><div class=\"line\"><span class=\"comment\"># 还原所有备份文件 whatever.bak -&gt; whatever:</span></div><div class=\"line\">repren --renames --from <span class=\"string\">'(.*)\\.bak'</span> --to <span class=\"string\">'\\1'</span> *.bak</div><div class=\"line\"><span class=\"comment\"># 用 rename 实现上述功能（若可用）:</span></div><div class=\"line\">rename <span class=\"string\">'s/\\.bak$//'</span> *.bak</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据 man 页面的描述，<code>rsync</code> 真的是一个快速且非常灵活的文件复制工具。它通常被用于机器间的同步，但在本地也同样有用。在安全限制允许下，用 <code>rsync</code> 代替 <code>scp</code> 可以实现续传，而不用重新从头开始。它同时也是删除大量文件的<a href=\"https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html\">最快方法</a>之一：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; rmdir some-dir</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>shuf</code> 从一个文件中随机选取多行。</p>\n</li>\n<li><p>了解 <code>sort</code> 的参数。处理数字方面，使用 <code>-n</code> 或者 <code>-h</code> 来处理可读性数字（例如 <code>du -h</code> 的输出）。明白键的工作原理（<code>-t</code> 和 <code>-k</code>）。例如，注意到你需要 <code>-k1，1</code> 来仅按第一个域来排序，而 <code>-k1</code> 意味着按整行排序。稳定排序（<code>sort -s</code>）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 <code>sort -k1，1 | sort -s -k2，2</code>。</p>\n</li>\n<li><p>如果你想在 Bash 命令行中写 tab 制表符，按下 <strong>ctrl-v</strong> <strong>[Tab]</strong> 或键入 <code>$&#39;\\t&#39;</code> （后者可能更好，因为你可以复制粘贴它）。</p>\n</li>\n<li><p>标准的源代码对比及合并工具是 <code>diff</code> 和 <code>patch</code>。使用 <code>diffstat</code> 查看变更总览数据。注意到 <code>diff -r</code> 对整个文件夹有效。使用 <code>diff -r tree1 tree2 | diffstat</code> 查看变更总览数据。</p>\n</li>\n<li><p>对于二进制文件，使用 <code>hd</code> 使其以十六进制显示以及使用 <code>bvi</code> 来编辑二进制。</p>\n</li>\n<li><p>同样对于二进制文件，<code>strings</code>（包括 <code>grep</code> 等等）允许你查找一些文本。</p>\n</li>\n<li><p>二进制文件对比（Delta 压缩），使用 <code>xdelta3</code>。</p>\n</li>\n<li><p>使用 <code>iconv</code> 更改文本编码。而更高级的用法，可以使用 <code>uconv</code>，它支持一些高级的 Unicode 功能。例如，这条命令将所有元音字母转为小写并移除了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">uconv <span class=\"_\">-f</span> utf-8 -t utf-8 -x <span class=\"string\">'::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; '</span> &lt; input.txt &gt; output.txt</div></pre></td></tr></table></figure>\n</li>\n<li><p>拆分文件，查看 <code>split</code>（按大小拆分）和 <code>csplit</code>（按模式拆分）。</p>\n</li>\n<li><p>用 <a href=\"http://www.fresse.org/dateutils/\"><code>dateutils</code></a> 中的 <code>dateadd</code>、<code>datediff</code>、<code>strptime</code> 等工具操作日期和时间表达式。</p>\n</li>\n<li><p>使用 <code>zless</code>、<code>zmore</code>、<code>zcat</code> 和 <code>zgrep</code> 对压缩过的文件进行操作。</p>\n</li>\n<li><p>文件属性可以通过 <code>chattr</code> 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：<code>sudo chattr +i /critical/directory/or/file</code></p>\n</li>\n<li><p>使用 <code>getfacl</code> 和 <code>setfacl</code> 以保存和恢复文件权限。例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">getfacl -R /some/path &gt; permissions.txt</div><div class=\"line\">setfacl --restore=permissions.txt</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"系统调试\"><a href=\"#系统调试\" class=\"headerlink\" title=\"系统调试\"></a>系统调试</h2><ul>\n<li><p><code>curl</code> 和 <code>curl -I</code> 可以便捷地被应用于 web 调试中，它们的好兄弟 <code>wget</code> 也可以，或者是更潮的 <a href=\"https://github.com/jkbrzt/httpie\"><code>httpie</code></a>。</p>\n</li>\n<li><p>使用 <code>iostat</code>、<code>netstat</code>、<code>top</code> （<code>htop</code> 更佳）和 <code>dstat</code> 去获取硬盘、cpu 和网络的状态。熟练掌握这些工具可以使你快速的对系统的当前状态有一个大概的认识。</p>\n</li>\n<li><p>使用 <code>netstat</code> 和 <code>ss</code> 查看网络连接的细节。</p>\n</li>\n<li><p>若要对系统有一个深度的总体认识，使用 <a href=\"https://github.com/nicolargo/glances\"><code>glances</code></a>。它在一个终端窗口中向你提供一些系统级的数据。这对于快速的检查各个子系统非常有帮助。</p>\n</li>\n<li><p>若要了解内存状态，运行并理解 <code>free</code> 和 <code>vmstat</code> 的输出。尤其注意“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，因此它与空闲内存无关。</p>\n</li>\n<li><p>Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 <code>kill -3 &lt;pid&gt;</code> 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准输出/日志文件。JDK 中的 <code>jps</code>，<code>jstat</code>，<code>jstack</code>，<code>jmap</code> 很有用。<a href=\"https://github.com/aragozin/jvm-tools\">SJK tools</a> 更高级.</p>\n</li>\n<li><p>使用 <code>mtr</code> 去跟踪路由，用于确定网络问题。</p>\n</li>\n<li><p>用 <code>ncdu</code> 来查看磁盘使用情况，它比常用的命令，如 <code>du -sh *</code>，更节省时间。</p>\n</li>\n<li><p>查找正在使用带宽的套接字连接或进程，使用 <code>iftop</code> 或 <code>nethogs</code>。</p>\n</li>\n<li><p><code>ab</code> 工具（捆绑于 Apache）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 <code>siege</code>。</p>\n</li>\n<li><p><code>wireshark</code>，<code>tshark</code> 和 <code>ngrep</code> 可用于复杂的网络调试。</p>\n</li>\n<li><p>了解 <code>strace</code> 和 <code>ltrace</code>。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（<code>-c</code>）和附加到一个运行的进程参数 （<code>-p</code>）。</p>\n</li>\n<li><p>了解使用 <code>ldd</code> 来检查共享库。</p>\n</li>\n<li><p>了解如何运用 <code>gdb</code> 连接到一个运行着的进程并获取它的堆栈轨迹。</p>\n</li>\n<li><p>学会使用 <code>/proc</code>。它在调试正在出现的问题的时候有时会效果惊人。比如：<code>/proc/cpuinfo</code>，<code>/proc/meminfo</code>，<code>/proc/cmdline</code>，<code>/proc/xxx/cwd</code>，<code>/proc/xxx/exe</code>，<code>/proc/xxx/fd/</code>，<code>/proc/xxx/smaps</code>（这里的 <code>xxx</code> 表示进程的 id 或 pid）。</p>\n</li>\n<li><p>当调试一些之前出现的问题的时候，<code>sar</code> 非常有用。它展示了 cpu、内存以及网络等的历史数据。</p>\n</li>\n<li><p>关于更深层次的系统分析以及性能分析，看看 <code>stap</code>（<a href=\"https://sourceware.org/systemtap/wiki\">SystemTap</a>），<a href=\"https://en.wikipedia.org/wiki/Perf_(Linux\"><code>perf</code></a>)，以及<a href=\"https://github.com/draios/sysdig\"><code>sysdig</code></a>。</p>\n</li>\n<li><p>查看你当前使用的系统，使用 <code>uname</code> ， <code>uname -a</code> （Unix／kernel 信息） 或者 <code>lsb_release -a</code> （Linux 发行版信息）。</p>\n</li>\n<li><p>无论什么东西工作得很欢乐时试试 <code>dmesg</code>（可能是硬件或驱动问题）。</p>\n</li>\n<li><p>如果你删除了一个文件，但通过 <code>du</code> 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：<br><code>lsof | grep deleted | grep &quot;filename-of-my-big-file&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"单行脚本\"><a href=\"#单行脚本\" class=\"headerlink\" title=\"单行脚本\"></a>单行脚本</h2><p>一些命令组合的例子：</p>\n<ul>\n<li><p>当你需要对文本文件做集合交、并、差运算时，结合使用 <code>sort</code>/<code>uniq</code> 很有帮助。假设 <code>a</code> 与 <code>b</code> 是两内容不同的文件。这种方式效率很高，并且在小文件和上G的文件上都能运用 （<code>sort</code> 不被内存大小约束，尽管在 <code>/tmp</code> 在一个小的根分区上时你可能需要 <code>-T</code> 参数），参阅前文中关于 <code>LC_ALL</code> 和 <code>sort</code> 的 <code>-u</code> 参数的部分。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">cat a b | sort | uniq &gt; c   <span class=\"comment\"># c is a union b</span></div><div class=\"line\">cat a b | sort | uniq <span class=\"_\">-d</span> &gt; c   <span class=\"comment\"># c is a intersect b</span></div><div class=\"line\">cat a b b | sort | uniq -u &gt; c   <span class=\"comment\"># c is set difference a - b</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>grep . *</code>（每行都会附上文件名）或者 <code>head -100 *</code>（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 <code>/sys</code>、<code>/proc</code>、<code>/etc</code>）时特别好用。</p>\n</li>\n</ul>\n<ul>\n<li><p>计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">awk <span class=\"string\">'&#123; x += $3 &#125; END &#123; print x &#125;'</span> myfile</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果你想在文件树上查看大小/日期，这可能看起来像递归版的 <code>ls -l</code> 但比 <code>ls -lR</code> 更易于理解：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">find . -type f -ls</div></pre></td></tr></table></figure>\n</li>\n<li><p>假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 <code>acct_id</code> 参数在URI中。如果你想计算出每个 <code>acct_id</code> 值有多少次请求，使用如下代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">cat access.log | egrep -o <span class=\"string\">'acct_id=[0-9]+'</span> | cut <span class=\"_\">-d</span>= <span class=\"_\">-f</span>2 | sort | uniq -c | sort -rn</div></pre></td></tr></table></figure>\n</li>\n<li><p>要连续地监测变化，可以使用 <code>watch</code>，例如检查某个文件夹中文件的改变，可以用 <code>watch -d -n 2 &#39;ls -rtlh | tail&#39;</code>；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 <code>watch -d -n 2 ifconfig</code>。</p>\n</li>\n<li><p>运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">taocl</span></span>() &#123;</div><div class=\"line\">  curl <span class=\"_\">-s</span> https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|</div><div class=\"line\">    pandoc <span class=\"_\">-f</span> markdown -t html |</div><div class=\"line\">    iconv <span class=\"_\">-f</span> <span class=\"string\">'utf-8'</span> -t <span class=\"string\">'unicode'</span> |</div><div class=\"line\">    xmlstarlet fo --html --dropdtd |</div><div class=\"line\">    xmlstarlet sel -t -v <span class=\"string\">\"(html/body/ul/li[count(p)&gt;0])[<span class=\"variable\">$RANDOM</span> mod last()+1]\"</span> |</div><div class=\"line\">    xmlstarlet unesc | fmt -80</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"冷门但有用\"><a href=\"#冷门但有用\" class=\"headerlink\" title=\"冷门但有用\"></a>冷门但有用</h2><ul>\n<li><p><code>expr</code>：计算表达式或正则匹配</p>\n</li>\n<li><p><code>m4</code>：简单地宏处理器</p>\n</li>\n<li><p><code>yes</code>：多次打印字符串</p>\n</li>\n<li><p><code>cal</code>：漂亮的日历</p>\n</li>\n<li><p><code>env</code>：执行一个命令（脚本文件中很有用）</p>\n</li>\n<li><p><code>printenv</code>：打印环境变量（调试时或在使用脚本文件时很有用）</p>\n</li>\n<li><p><code>look</code>：查找以特定字符串开头的单词</p>\n</li>\n<li><p><code>cut</code>、<code>paste</code> 和 <code>join</code>：数据修改</p>\n</li>\n<li><p><code>fmt</code>：格式化文本段落</p>\n</li>\n<li><p><code>pr</code>：将文本格式化成页/列形式</p>\n</li>\n<li><p><code>fold</code>：包裹文本中的几行</p>\n</li>\n<li><p><code>column</code>：将文本格式化成多列或表格</p>\n</li>\n<li><p><code>expand</code> 和 <code>unexpand</code>：制表符与空格之间转换</p>\n</li>\n<li><p><code>nl</code>：添加行号</p>\n</li>\n<li><p><code>seq</code>：打印数字</p>\n</li>\n<li><p><code>bc</code>：计算器</p>\n</li>\n<li><p><code>factor</code>：分解因数</p>\n</li>\n<li><p><a href=\"https://gnupg.org/\"><code>gpg</code></a>：加密并签名文件</p>\n</li>\n<li><p><code>toe</code>：terminfo entries 列表</p>\n</li>\n<li><p><code>nc</code>：网络调试及数据传输</p>\n</li>\n<li><p><code>socat</code>：套接字代理，与 <code>netcat</code> 类似</p>\n</li>\n<li><p><a href=\"https://github.com/mattthias/slurm\"><code>slurm</code></a>：网络可视化</p>\n</li>\n<li><p><code>dd</code>：文件或设备间传输数据</p>\n</li>\n<li><p><code>file</code>：确定文件类型</p>\n</li>\n<li><p><code>tree</code>：以树的形式显示路径和文件，类似于递归的 <code>ls</code></p>\n</li>\n<li><p><code>stat</code>：文件信息</p>\n</li>\n<li><p><code>time</code>：执行命令，并计算执行时间</p>\n</li>\n<li><p><code>timeout</code>：在指定时长范围内执行命令，并在规定时间结束后停止进程</p>\n</li>\n<li><p><code>lockfile</code>：使文件只能通过 <code>rm -f</code> 移除</p>\n</li>\n<li><p><code>logrotate</code>： 切换、压缩以及发送日志文件</p>\n</li>\n<li><p><code>watch</code>：重复运行同一个命令，展示结果并高亮有更改的部分</p>\n</li>\n<li><p><code>tac</code>：反向输出文件</p>\n</li>\n<li><p><code>shuf</code>：文件中随机选取几行</p>\n</li>\n<li><p><code>comm</code>：一行一行的比较排序过的文件</p>\n</li>\n<li><p><code>pv</code>：监视通过管道的数据</p>\n</li>\n<li><p><code>hd</code>，<code>hexdump</code>，<code>xxd</code>，<code>biew</code> 和 <code>bvi</code>：保存或编辑二进制文件</p>\n</li>\n<li><p><code>strings</code>：从二进制文件中抽取文本</p>\n</li>\n<li><p><code>tr</code>：转换字母</p>\n</li>\n<li><p><code>iconv</code> 或 <code>uconv</code>：简易的文件编码</p>\n</li>\n<li><p><code>split</code> 和 <code>csplit</code>：分割文件</p>\n</li>\n<li><p><code>sponge</code>：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 <code>grep -v something some-file | sponge some-file</code></p>\n</li>\n<li><p><code>units</code>：将一种计量单位转换为另一种等效的计量单位（参阅 <code>/usr/share/units/definitions.units</code>）</p>\n</li>\n<li><p><code>apg</code>：随机生成密码</p>\n</li>\n<li><p><code>7z</code>：高比例的文件压缩</p>\n</li>\n<li><p><code>ldd</code>：动态库信息</p>\n</li>\n<li><p><code>nm</code>：提取 obj 文件中的符号</p>\n</li>\n<li><p><code>ab</code>：性能分析 web 服务器</p>\n</li>\n<li><p><code>strace</code>：系统调用调试</p>\n</li>\n<li><p><code>mtr</code>：更好的网络调试跟踪工具</p>\n</li>\n<li><p><code>cssh</code>：可视化的并发 shell</p>\n</li>\n<li><p><code>rsync</code>：通过 ssh 或本地文件系统同步文件和文件夹</p>\n</li>\n<li><p><code>wireshark</code> 和 <code>tshark</code>：抓包和网络调试工具</p>\n</li>\n<li><p><code>ngrep</code>：网络层的 grep</p>\n</li>\n<li><p><code>host</code> 和 <code>dig</code>：DNS 查找</p>\n</li>\n<li><p><code>lsof</code>：列出当前系统打开文件的工具以及查看端口信息</p>\n</li>\n<li><p><code>dstat</code>：系统状态查看</p>\n</li>\n<li><p><a href=\"https://github.com/nicolargo/glances\"><code>glances</code></a>：高层次的多子系统总览</p>\n</li>\n<li><p><code>iostat</code>：硬盘使用状态</p>\n</li>\n<li><p><code>mpstat</code>： CPU 使用状态</p>\n</li>\n<li><p><code>vmstat</code>： 内存使用状态</p>\n</li>\n<li><p><code>htop</code>：top 的加强版</p>\n</li>\n<li><p><code>last</code>：登入记录</p>\n</li>\n<li><p><code>w</code>：查看处于登录状态的用户</p>\n</li>\n<li><p><code>id</code>：用户/组 ID 信息</p>\n</li>\n<li><p><code>sar</code>：系统历史数据</p>\n</li>\n<li><p><code>iftop</code> 或 <code>nethogs</code>：套接字及进程的网络利用</p>\n</li>\n<li><p><code>ss</code>：套接字数据</p>\n</li>\n<li><p><code>dmesg</code>：引导及系统错误信息</p>\n</li>\n<li><p><code>sysctl</code>： 在内核运行时动态地查看和修改内核的运行参数</p>\n</li>\n<li><p><code>hdparm</code>：SATA/ATA 磁盘更改及性能分析</p>\n</li>\n<li><p><code>lsblk</code>：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息</p>\n</li>\n<li><p><code>lshw</code>，<code>lscpu</code>，<code>lspci</code>，<code>lsusb</code> 和 <code>dmidecode</code>：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等</p>\n</li>\n<li><p><code>lsmod</code> 和 <code>modinfo</code>：列出内核模块，并显示其细节</p>\n</li>\n<li><p><code>fortune</code>，<code>ddate</code> 和 <code>sl</code>：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”</p>\n</li>\n</ul>\n<h2 id=\"仅限-OS-X-系统\"><a href=\"#仅限-OS-X-系统\" class=\"headerlink\" title=\"仅限 OS X 系统\"></a>仅限 OS X 系统</h2><p>以下是<em>仅限于</em> OS X 系统的技巧</p>\n<ul>\n<li><p>用 <code>brew</code> （Homebrew）或者 <code>port</code> （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。</p>\n</li>\n<li><p>用 <code>pbcopy</code> 复制任何命令的输出到桌面应用，用 <code>pbpaste</code> 粘贴输入。</p>\n</li>\n<li><p>若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 <strong>alt-b</strong>、<strong>alt-f</strong> 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。</p>\n</li>\n<li><p>用 <code>open</code> 或者 <code>open -a /Applications/Whatever.app</code> 使用桌面应用打开文件。</p>\n</li>\n<li><p>Spotlight： 用 <code>mdfind</code> 搜索文件，用 <code>mdls</code> 列出元数据（例如照片的 EXIF 信息）。</p>\n</li>\n<li><p>注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 <code>ps</code>，<code>ls</code>，<code>tail</code>，<code>awk</code>，<code>sed</code>）都和 Linux 中有些微的不同，这些极大的被 System V-style Unix 和 GNU 工具影响。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 <code>gawk</code> 和 <code>gsed</code> 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 <code>perl</code> ）或者经过仔细的测试。</p>\n</li>\n<li><p>用 <code>sw_vers</code> 获取 OS X 的版本信息。</p>\n</li>\n</ul>\n<h2 id=\"仅限-Windows-系统\"><a href=\"#仅限-Windows-系统\" class=\"headerlink\" title=\"仅限 Windows 系统\"></a>仅限 Windows 系统</h2><ul>\n<li><p>要在 Microsoft Windows 中使用 Unix shell，可以安装 <a href=\"https://cygwin.com/\">Cygwin</a>。本文档中介绍的大多数内容都将适用。</p>\n</li>\n<li><p>通过 Cygwin 的包管理器来安装额外的 Unix 程序。</p>\n</li>\n<li><p>使用 <code>mintty</code> 作为你的命令行窗口。</p>\n</li>\n<li><p>要访问 Windows 剪贴板，可以通过 <code>/dev/clipboard</code>。</p>\n</li>\n<li><p>运行 <code>cygstart</code> 以通过默认程序打开一个文件。</p>\n</li>\n<li><p>要访问 Windows 注册表，可以使用 <code>regtool</code>。</p>\n</li>\n<li><p>注意 Windows 驱动器路径 <code>C:\\</code> 在 Cygwin 中用 <code>/cygdrive/c</code> 代表，而 Cygwin 的 <code>/</code> 在 Windows 中显示在 <code>C:\\cygwin</code>。要转换 Cygwin 和 Windows 风格的路径可以用 <code>cygpath</code>。这在需要调用 Windows 程序的脚本里很有用。</p>\n</li>\n<li><p>学会使用 <code>wmic</code>，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。</p>\n</li>\n</ul>\n<h2 id=\"更多资源\"><a href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"></a>更多资源</h2><ul>\n<li><a href=\"https://github.com/alebcay/awesome-shell\">awesome-shell</a>：一份精心组织的命令行工具及资源的列表。</li>\n<li><a href=\"https://github.com/herrbischoff/awesome-osx-command-line\">awesome-osx-command-line</a>：一份针对 OS X 命令行的更深入的指南。</li>\n<li><a href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\">Strict mode</a>：为了编写更好的脚本文件。</li>\n<li><a href=\"https://github.com/koalaman/shellcheck\">shellcheck</a>：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。</li>\n<li><a href=\"http://www.dwheeler.com/essays/filenames-in-shell.html\">Filenames and Pathnames in Shell</a>：有关如何在 shell 脚本里正确处理文件名的细枝末节。</li>\n<li><a href=\"http://datascienceatthecommandline.com/#tools\">Data Science at the Command Line</a>：用于数据科学的一些命令和工具，摘自同名书籍。</li>\n</ul>\n<h2 id=\"免责声明\"><a href=\"#免责声明\" class=\"headerlink\" title=\"免责声明\"></a>免责声明</h2><p>除去特别微小的任务，编写代码是出于方便阅读的目的。能力往往伴随着责任。你 <em>可以</em> 在 Bash 中做一些事并不意味着你应该去做！;)</p>\n<h2 id=\"授权条款\"><a href=\"#授权条款\" class=\"headerlink\" title=\"授权条款\"></a>授权条款</h2><p><a href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" alt=\"Creative Commons License\"></a></p>\n<p>本文使用授权协议 <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>。</p>"},{"title":"匿名网络--Tor","date":"2016-08-09T08:13:46.000Z","updated":"2016-08-18T15:23:00.000Z","_content":"![Arm](/images/arm.jpg \"tor demo\")\n\n### 本文的目的\n\n在当下大数据行业中，数据尤为宝贵，像我们一样的创业公司并没有大量的数据来源，只能通过爬虫的方式从互联网补充数据源。同样的道理在被爬取的网站中也得到印证，那些持有大量数据的公司也把数据看的尤为重要，所以在开发爬虫时会碰到各种各样的反爬虫手段。其中最为有效的手段就为封禁IP，tor网络可以获取大量的免费IP，本文会详细讲解如何通过tor网络突破IP封禁。\n\n### Tor的由来\n\nTor（The Onion Router，洋葱路由器）是实现匿名通信的自由软件。Tor是第二代洋葱路由的一种实现，用户通过Tor可以在因特网上进行匿名交流。最初该项目由美国海军研究实验室赞助。\n\n### Tor的搭建\n\nTor环境的搭建需要安装`tor`、`privoxy`、`arm`等程序，其中tor用来连接tor网络，privoxy用来将tor的socks代理转换为http代理，arm用来对tor进行监控（类似于top）和操作（切换出口IP）。**最终对外提供HTTP代理，`127.0.0.1:8118`。**\n\n<!-- more -->\n#### 准备\n\n- VPN，比如多态、Shadowsocks等\n\n#### 安装\n\n- Centos\n\n    ```\n    yum install -y tor privoxy\n    wget https://www.atagar.com/arm/resources/static/arm-1.4.5.0-1.rpm\n    rpm -ivh arm-1.4.5.0-1.rpm\n    ```\n\n- macOS\n\n    ```\n    brew install tor privoxy arm\n    ```\n\n#### 配置\n\n- Centos\n\n    - tor\n\n        拷贝[torrc](https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc)文件到`/etc/tor/torrc`。配置tor前置代理`HTTPProxy`、 `HTTPSProxy`。\n\n        ```\n        wget https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc\n        sudo cp torrc /etc/tor/torrc\n\n        # 开机自启\n        systemctl enable tor\n\n        # 启动\n        systemctl start tor\n        ```\n\n    - privoxy\n\n        拷贝[config](https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config)文件到`/etc/privoxy/config`。\n\n        ```\n        wget https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config\n        sudo cp config /etc/privoxy/config\n        systemctl enable privoxy\n        systemctl start privoxy\n        ```\n\n    - arm\n\n        启动tor之后，`-i`选项可以指定tor的控制端口9151。\n\n        ```\n        arm -i 9151\n        ```\n\n- macOS\n\n    - tor\n\n        拷贝[torrc](https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc)文件到`/usr/local/etc/tor/torrc`。配置tor前置代理`HTTPProxy`、 `HTTPSProxy`。\n\n        ```\n        wget https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc\n        sudo cp torrc /usr/local/etc/tor/torrc\n        brew services start tor\n        tor start\n        ```\n\n    - privoxy\n\n        拷贝[config](https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config)文件到`/usr/local/etc/privoxy/config`。\n\n        ```\n        wget https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config\n        sudo cp config /usr/local/etc/privoxy/config\n        brew services start privoxy\n        /usr/local/opt/sbin/privoxy /usr/local/etc/privoxy/config\n        ```\n\n    - arm\n\n        启动tor之后，`-i`选项可以指定tor的控制端口9151。\n\n        ```\n        arm -i 9151\n        ```\n\n#### 切换IP\n\n可以封装成脚本，crontab定时调用。\n\n```\npidof tor | xargs sudo kill -HUP\n```\n\n### Python示例\n\n```\nimport requests\n\nrequests.get('https://baidu.com', proxies={'http': '127.0.0.1:8118'})\n```\n\n### 相关文章\n\n- [Tor wiki](https://zh.wikipedia.org/wiki/Tor)\n- [使用 Tor ——安全匿名地访问互联网](https://techyan.me/2016/03/26/%E4%BD%BF%E7%94%A8-tor-%E5%AE%89%E5%85%A8%E5%8C%BF%E5%90%8D%E5%9C%B0%E8%AE%BF%E9%97%AE%E4%BA%92%E8%81%94%E7%BD%91/)\n- [Tor下载使用指南](http://www.tor123.biz/)\n- [Linux下Tor的安裝和Meek的配置（非Browser Bundle模式）](http://allinfa.com/linux-tor-meek.html)\n- [New Tor Identity in Terminal](http://stackoverflow.com/questions/16987518/how-to-request-new-tor-identity-in-terminal)\n","source":"_posts/tor.md","raw":"title: 匿名网络--Tor\ndate: 2016-08-09 16:13:46\nupdated: 2016-08-18 23:23\ncategory: 技术\ntags:\n  - tor\n  - proxy\n  - crawler\n  - spider\n  - 爬虫\n  - 匿名网络\n---\n![Arm](/images/arm.jpg \"tor demo\")\n\n### 本文的目的\n\n在当下大数据行业中，数据尤为宝贵，像我们一样的创业公司并没有大量的数据来源，只能通过爬虫的方式从互联网补充数据源。同样的道理在被爬取的网站中也得到印证，那些持有大量数据的公司也把数据看的尤为重要，所以在开发爬虫时会碰到各种各样的反爬虫手段。其中最为有效的手段就为封禁IP，tor网络可以获取大量的免费IP，本文会详细讲解如何通过tor网络突破IP封禁。\n\n### Tor的由来\n\nTor（The Onion Router，洋葱路由器）是实现匿名通信的自由软件。Tor是第二代洋葱路由的一种实现，用户通过Tor可以在因特网上进行匿名交流。最初该项目由美国海军研究实验室赞助。\n\n### Tor的搭建\n\nTor环境的搭建需要安装`tor`、`privoxy`、`arm`等程序，其中tor用来连接tor网络，privoxy用来将tor的socks代理转换为http代理，arm用来对tor进行监控（类似于top）和操作（切换出口IP）。**最终对外提供HTTP代理，`127.0.0.1:8118`。**\n\n<!-- more -->\n#### 准备\n\n- VPN，比如多态、Shadowsocks等\n\n#### 安装\n\n- Centos\n\n    ```\n    yum install -y tor privoxy\n    wget https://www.atagar.com/arm/resources/static/arm-1.4.5.0-1.rpm\n    rpm -ivh arm-1.4.5.0-1.rpm\n    ```\n\n- macOS\n\n    ```\n    brew install tor privoxy arm\n    ```\n\n#### 配置\n\n- Centos\n\n    - tor\n\n        拷贝[torrc](https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc)文件到`/etc/tor/torrc`。配置tor前置代理`HTTPProxy`、 `HTTPSProxy`。\n\n        ```\n        wget https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc\n        sudo cp torrc /etc/tor/torrc\n\n        # 开机自启\n        systemctl enable tor\n\n        # 启动\n        systemctl start tor\n        ```\n\n    - privoxy\n\n        拷贝[config](https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config)文件到`/etc/privoxy/config`。\n\n        ```\n        wget https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config\n        sudo cp config /etc/privoxy/config\n        systemctl enable privoxy\n        systemctl start privoxy\n        ```\n\n    - arm\n\n        启动tor之后，`-i`选项可以指定tor的控制端口9151。\n\n        ```\n        arm -i 9151\n        ```\n\n- macOS\n\n    - tor\n\n        拷贝[torrc](https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc)文件到`/usr/local/etc/tor/torrc`。配置tor前置代理`HTTPProxy`、 `HTTPSProxy`。\n\n        ```\n        wget https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc\n        sudo cp torrc /usr/local/etc/tor/torrc\n        brew services start tor\n        tor start\n        ```\n\n    - privoxy\n\n        拷贝[config](https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config)文件到`/usr/local/etc/privoxy/config`。\n\n        ```\n        wget https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config\n        sudo cp config /usr/local/etc/privoxy/config\n        brew services start privoxy\n        /usr/local/opt/sbin/privoxy /usr/local/etc/privoxy/config\n        ```\n\n    - arm\n\n        启动tor之后，`-i`选项可以指定tor的控制端口9151。\n\n        ```\n        arm -i 9151\n        ```\n\n#### 切换IP\n\n可以封装成脚本，crontab定时调用。\n\n```\npidof tor | xargs sudo kill -HUP\n```\n\n### Python示例\n\n```\nimport requests\n\nrequests.get('https://baidu.com', proxies={'http': '127.0.0.1:8118'})\n```\n\n### 相关文章\n\n- [Tor wiki](https://zh.wikipedia.org/wiki/Tor)\n- [使用 Tor ——安全匿名地访问互联网](https://techyan.me/2016/03/26/%E4%BD%BF%E7%94%A8-tor-%E5%AE%89%E5%85%A8%E5%8C%BF%E5%90%8D%E5%9C%B0%E8%AE%BF%E9%97%AE%E4%BA%92%E8%81%94%E7%BD%91/)\n- [Tor下载使用指南](http://www.tor123.biz/)\n- [Linux下Tor的安裝和Meek的配置（非Browser Bundle模式）](http://allinfa.com/linux-tor-meek.html)\n- [New Tor Identity in Terminal](http://stackoverflow.com/questions/16987518/how-to-request-new-tor-identity-in-terminal)\n","slug":"tor","published":1,"_id":"ciwqg8ny9000a5qxzqv43hoer","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/arm.jpg\" alt=\"Arm\" title=\"tor demo\"></p>\n<h3 id=\"本文的目的\"><a href=\"#本文的目的\" class=\"headerlink\" title=\"本文的目的\"></a>本文的目的</h3><p>在当下大数据行业中，数据尤为宝贵，像我们一样的创业公司并没有大量的数据来源，只能通过爬虫的方式从互联网补充数据源。同样的道理在被爬取的网站中也得到印证，那些持有大量数据的公司也把数据看的尤为重要，所以在开发爬虫时会碰到各种各样的反爬虫手段。其中最为有效的手段就为封禁IP，tor网络可以获取大量的免费IP，本文会详细讲解如何通过tor网络突破IP封禁。</p>\n<h3 id=\"Tor的由来\"><a href=\"#Tor的由来\" class=\"headerlink\" title=\"Tor的由来\"></a>Tor的由来</h3><p>Tor（The Onion Router，洋葱路由器）是实现匿名通信的自由软件。Tor是第二代洋葱路由的一种实现，用户通过Tor可以在因特网上进行匿名交流。最初该项目由美国海军研究实验室赞助。</p>\n<h3 id=\"Tor的搭建\"><a href=\"#Tor的搭建\" class=\"headerlink\" title=\"Tor的搭建\"></a>Tor的搭建</h3><p>Tor环境的搭建需要安装<code>tor</code>、<code>privoxy</code>、<code>arm</code>等程序，其中tor用来连接tor网络，privoxy用来将tor的socks代理转换为http代理，arm用来对tor进行监控（类似于top）和操作（切换出口IP）。<strong>最终对外提供HTTP代理，<code>127.0.0.1:8118</code>。</strong></p>\n<a id=\"more\"></a>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><ul>\n<li>VPN，比如多态、Shadowsocks等</li>\n</ul>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li><p>Centos</p>\n  <figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><div class=\"line\">yum install -y tor privoxy</div><div class=\"line\">wget https://www.atagar.com/arm/resources/static/arm<span class=\"string\">-1</span>.4.5.0<span class=\"string\">-1</span>.rpm</div><div class=\"line\">rpm -ivh arm<span class=\"string\">-1</span>.4.5.0<span class=\"string\">-1</span>.rpm</div></pre></td></tr></table></figure>\n</li>\n<li><p>macOS</p>\n  <figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span>install tor privoxy <span class=\"meta\">arm</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li><p>Centos</p>\n<ul>\n<li><p>tor</p>\n<p>  拷贝<a href=\"https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc\" target=\"_blank\" rel=\"external\">torrc</a>文件到<code>/etc/tor/torrc</code>。配置tor前置代理<code>HTTPProxy</code>、 <code>HTTPSProxy</code>。</p>\n  <figure class=\"highlight vala\"><table><tr><td class=\"code\"><pre><div class=\"line\">wget https:<span class=\"comment\">//raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc</span></div><div class=\"line\">sudo cp torrc /etc/tor/torrc</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 开机自启</span></div><div class=\"line\">systemctl enable tor</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 启动</span></div><div class=\"line\">systemctl start tor</div></pre></td></tr></table></figure>\n</li>\n<li><p>privoxy</p>\n<p>  拷贝<a href=\"https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config\" target=\"_blank\" rel=\"external\">config</a>文件到<code>/etc/privoxy/config</code>。</p>\n  <figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><div class=\"line\">wget https:<span class=\"comment\">//raw.githubusercontent.com/PrinceTechs/use_tor/master/config</span></div><div class=\"line\">sudo cp <span class=\"built_in\">config</span> /etc/privoxy/<span class=\"built_in\">config</span></div><div class=\"line\">systemctl enable privoxy</div><div class=\"line\">systemctl start privoxy</div></pre></td></tr></table></figure>\n</li>\n<li><p>arm</p>\n<p>  启动tor之后，<code>-i</code>选项可以指定tor的控制端口9151。</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">arm -<span class=\"selector-tag\">i</span> <span class=\"number\">9151</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>macOS</p>\n<ul>\n<li><p>tor</p>\n<p>  拷贝<a href=\"https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc\" target=\"_blank\" rel=\"external\">torrc</a>文件到<code>/usr/local/etc/tor/torrc</code>。配置tor前置代理<code>HTTPProxy</code>、 <code>HTTPSProxy</code>。</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><div class=\"line\">wget <span class=\"string\">https:</span><span class=\"comment\">//raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc</span></div><div class=\"line\">sudo cp torrc <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/etc/</span>tor/torrc</div><div class=\"line\">brew services start tor</div><div class=\"line\">tor start</div></pre></td></tr></table></figure>\n</li>\n<li><p>privoxy</p>\n<p>  拷贝<a href=\"https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config\" target=\"_blank\" rel=\"external\">config</a>文件到<code>/usr/local/etc/privoxy/config</code>。</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><div class=\"line\">wget <span class=\"string\">https:</span><span class=\"comment\">//raw.githubusercontent.com/PrinceTechs/use_tor/master/config</span></div><div class=\"line\">sudo cp config <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/etc/</span>privoxy/config</div><div class=\"line\">brew services start privoxy</div><div class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/opt/</span>sbin<span class=\"regexp\">/privoxy /</span>usr<span class=\"regexp\">/local/</span>etc<span class=\"regexp\">/privoxy/</span>config</div></pre></td></tr></table></figure>\n</li>\n<li><p>arm</p>\n<p>  启动tor之后，<code>-i</code>选项可以指定tor的控制端口9151。</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">arm -<span class=\"selector-tag\">i</span> <span class=\"number\">9151</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"切换IP\"><a href=\"#切换IP\" class=\"headerlink\" title=\"切换IP\"></a>切换IP</h4><p>可以封装成脚本，crontab定时调用。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><div class=\"line\">pidof tor <span class=\"string\">| xargs sudo kill -HUP</span></div></pre></td></tr></table></figure>\n<h3 id=\"Python示例\"><a href=\"#Python示例\" class=\"headerlink\" title=\"Python示例\"></a>Python示例</h3><figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"></div><div class=\"line\">requests.<span class=\"built_in\">get</span>(<span class=\"string\">'https://baidu.com'</span>, proxies=&#123;<span class=\"string\">'http'</span>: <span class=\"string\">'127.0.0.1:8118'</span>&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/Tor\" target=\"_blank\" rel=\"external\">Tor wiki</a></li>\n<li><a href=\"https://techyan.me/2016/03/26/%E4%BD%BF%E7%94%A8-tor-%E5%AE%89%E5%85%A8%E5%8C%BF%E5%90%8D%E5%9C%B0%E8%AE%BF%E9%97%AE%E4%BA%92%E8%81%94%E7%BD%91/\" target=\"_blank\" rel=\"external\">使用 Tor ——安全匿名地访问互联网</a></li>\n<li><a href=\"http://www.tor123.biz/\" target=\"_blank\" rel=\"external\">Tor下载使用指南</a></li>\n<li><a href=\"http://allinfa.com/linux-tor-meek.html\" target=\"_blank\" rel=\"external\">Linux下Tor的安裝和Meek的配置（非Browser Bundle模式）</a></li>\n<li><a href=\"http://stackoverflow.com/questions/16987518/how-to-request-new-tor-identity-in-terminal\" target=\"_blank\" rel=\"external\">New Tor Identity in Terminal</a></li>\n</ul>\n","excerpt":"<p><img src=\"/images/arm.jpg\" alt=\"Arm\" title=\"tor demo\"></p>\n<h3 id=\"本文的目的\"><a href=\"#本文的目的\" class=\"headerlink\" title=\"本文的目的\"></a>本文的目的</h3><p>在当下大数据行业中，数据尤为宝贵，像我们一样的创业公司并没有大量的数据来源，只能通过爬虫的方式从互联网补充数据源。同样的道理在被爬取的网站中也得到印证，那些持有大量数据的公司也把数据看的尤为重要，所以在开发爬虫时会碰到各种各样的反爬虫手段。其中最为有效的手段就为封禁IP，tor网络可以获取大量的免费IP，本文会详细讲解如何通过tor网络突破IP封禁。</p>\n<h3 id=\"Tor的由来\"><a href=\"#Tor的由来\" class=\"headerlink\" title=\"Tor的由来\"></a>Tor的由来</h3><p>Tor（The Onion Router，洋葱路由器）是实现匿名通信的自由软件。Tor是第二代洋葱路由的一种实现，用户通过Tor可以在因特网上进行匿名交流。最初该项目由美国海军研究实验室赞助。</p>\n<h3 id=\"Tor的搭建\"><a href=\"#Tor的搭建\" class=\"headerlink\" title=\"Tor的搭建\"></a>Tor的搭建</h3><p>Tor环境的搭建需要安装<code>tor</code>、<code>privoxy</code>、<code>arm</code>等程序，其中tor用来连接tor网络，privoxy用来将tor的socks代理转换为http代理，arm用来对tor进行监控（类似于top）和操作（切换出口IP）。<strong>最终对外提供HTTP代理，<code>127.0.0.1:8118</code>。</strong></p>","more":"<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><ul>\n<li>VPN，比如多态、Shadowsocks等</li>\n</ul>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li><p>Centos</p>\n  <figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><div class=\"line\">yum install -y tor privoxy</div><div class=\"line\">wget https://www.atagar.com/arm/resources/static/arm<span class=\"string\">-1</span>.4.5.0<span class=\"string\">-1</span>.rpm</div><div class=\"line\">rpm -ivh arm<span class=\"string\">-1</span>.4.5.0<span class=\"string\">-1</span>.rpm</div></pre></td></tr></table></figure>\n</li>\n<li><p>macOS</p>\n  <figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span>install tor privoxy <span class=\"meta\">arm</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li><p>Centos</p>\n<ul>\n<li><p>tor</p>\n<p>  拷贝<a href=\"https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc\">torrc</a>文件到<code>/etc/tor/torrc</code>。配置tor前置代理<code>HTTPProxy</code>、 <code>HTTPSProxy</code>。</p>\n  <figure class=\"highlight vala\"><table><tr><td class=\"code\"><pre><div class=\"line\">wget https:<span class=\"comment\">//raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc</span></div><div class=\"line\">sudo cp torrc /etc/tor/torrc</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 开机自启</span></div><div class=\"line\">systemctl enable tor</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 启动</span></div><div class=\"line\">systemctl start tor</div></pre></td></tr></table></figure>\n</li>\n<li><p>privoxy</p>\n<p>  拷贝<a href=\"https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config\">config</a>文件到<code>/etc/privoxy/config</code>。</p>\n  <figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><div class=\"line\">wget https:<span class=\"comment\">//raw.githubusercontent.com/PrinceTechs/use_tor/master/config</span></div><div class=\"line\">sudo cp <span class=\"built_in\">config</span> /etc/privoxy/<span class=\"built_in\">config</span></div><div class=\"line\">systemctl enable privoxy</div><div class=\"line\">systemctl start privoxy</div></pre></td></tr></table></figure>\n</li>\n<li><p>arm</p>\n<p>  启动tor之后，<code>-i</code>选项可以指定tor的控制端口9151。</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">arm -<span class=\"selector-tag\">i</span> <span class=\"number\">9151</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>macOS</p>\n<ul>\n<li><p>tor</p>\n<p>  拷贝<a href=\"https://raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc\">torrc</a>文件到<code>/usr/local/etc/tor/torrc</code>。配置tor前置代理<code>HTTPProxy</code>、 <code>HTTPSProxy</code>。</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><div class=\"line\">wget <span class=\"string\">https:</span><span class=\"comment\">//raw.githubusercontent.com/PrinceTechs/use_tor/master/torrc</span></div><div class=\"line\">sudo cp torrc <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/etc/</span>tor/torrc</div><div class=\"line\">brew services start tor</div><div class=\"line\">tor start</div></pre></td></tr></table></figure>\n</li>\n<li><p>privoxy</p>\n<p>  拷贝<a href=\"https://raw.githubusercontent.com/PrinceTechs/use_tor/master/config\">config</a>文件到<code>/usr/local/etc/privoxy/config</code>。</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><div class=\"line\">wget <span class=\"string\">https:</span><span class=\"comment\">//raw.githubusercontent.com/PrinceTechs/use_tor/master/config</span></div><div class=\"line\">sudo cp config <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/etc/</span>privoxy/config</div><div class=\"line\">brew services start privoxy</div><div class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/opt/</span>sbin<span class=\"regexp\">/privoxy /</span>usr<span class=\"regexp\">/local/</span>etc<span class=\"regexp\">/privoxy/</span>config</div></pre></td></tr></table></figure>\n</li>\n<li><p>arm</p>\n<p>  启动tor之后，<code>-i</code>选项可以指定tor的控制端口9151。</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">arm -<span class=\"selector-tag\">i</span> <span class=\"number\">9151</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"切换IP\"><a href=\"#切换IP\" class=\"headerlink\" title=\"切换IP\"></a>切换IP</h4><p>可以封装成脚本，crontab定时调用。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><div class=\"line\">pidof tor <span class=\"string\">| xargs sudo kill -HUP</span></div></pre></td></tr></table></figure>\n<h3 id=\"Python示例\"><a href=\"#Python示例\" class=\"headerlink\" title=\"Python示例\"></a>Python示例</h3><figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"></div><div class=\"line\">requests.<span class=\"built_in\">get</span>(<span class=\"string\">'https://baidu.com'</span>, proxies=&#123;<span class=\"string\">'http'</span>: <span class=\"string\">'127.0.0.1:8118'</span>&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/Tor\">Tor wiki</a></li>\n<li><a href=\"https://techyan.me/2016/03/26/%E4%BD%BF%E7%94%A8-tor-%E5%AE%89%E5%85%A8%E5%8C%BF%E5%90%8D%E5%9C%B0%E8%AE%BF%E9%97%AE%E4%BA%92%E8%81%94%E7%BD%91/\">使用 Tor ——安全匿名地访问互联网</a></li>\n<li><a href=\"http://www.tor123.biz/\">Tor下载使用指南</a></li>\n<li><a href=\"http://allinfa.com/linux-tor-meek.html\">Linux下Tor的安裝和Meek的配置（非Browser Bundle模式）</a></li>\n<li><a href=\"http://stackoverflow.com/questions/16987518/how-to-request-new-tor-identity-in-terminal\">New Tor Identity in Terminal</a></li>\n</ul>"},{"title":"我在普林","date":"2016-01-04T07:54:49.000Z","_content":"\n到今天为止参加工作马上满18个月了，说说这段时间的感受。\n\n18个月前，我怀揣着梦想来到北京，迷茫但又憧憬着，一路走来也算磕磕碰碰。一直以来我都认为自己与众不同，不想按部就班走别人走过的路。在职业生涯的起步阶段我想尝试更多的自己，不为自己设定任何界限，我要一直告诉自己“Yes，I can do it.”。\n\n<!-- more -->\n第一段工作经历大概三个月，是在一家做“玩具”机器人的公司，工作内容主要是用C语言写一些机器人控制代码。从这里离职的原因是老板因为我迟到扣了我100快钱。是的，这就是我离职的原因，倒不是我对钱看的有多重，而是因为通过这一段时间对公司的了解，这家公司并不能为我提供学习的技术的场景，再加上如此刻薄的领导。来过北京的朋友都知道北京的交通真是太xx了，我到公司上班每天需要2小时，公司8:30上班（从北京的海淀的西北边到通州的东南边）。\n在这家公司上班期间我其实就发现了自己的不足，报名参加了嵌入式软件开发的课程，只是没想到导火线来的这么快。其实领导也找过我（说教），我当时很想告诉他这里根本就不在我的名单内。总之在这家公司其实没学到多少有价值的技术，但是有一点我认清了自己的不足和当前实力才是王道的职场。\n\n第二段工作经历大概12个月，我加入了挣钱最多也最幸苦的手游行业，我把这里定义为职业生涯的开始。在这家公司我认识了敬坤（老大）、铎哥（师傅）、云飞（老乡）、高峰（好友）等等。我开始学习使用Erlang语言开发服务器后端程序。我是一个非常愿意为喜欢的东西付出努力的人，为了学习Erlang语言我从网上罗列许多优秀的资料和官方的文档打印成纸质版本随身携带，甚至有一段时间连上厕所都拿一本啃着，为了学习Vim（编辑器之神），我适用了许多优秀的配置，翻看了无数的技术博客和书籍，等等。就这样埋头苦干了快一年，游戏也上线了还取得了不错的成绩，本来信心满满的投入到新游戏的制作（独立开发后端），不知为何团队莫名其妙就解散了（当然我不在离职的名单），短短数日同事们走了一大半。后来才知道是项目经理带着团队离开了（看来我还是没有成长为核心成员）。这时大概是2015年6月左右，开发任务基本终止了，每天就做一些维护的工作和玩游戏，这样一直持续到8月份我开始决定离开了，大概是9月份的时候云飞说“有一个小团队需要后端程序员，你有兴趣没有，工资福利都好说？”，我说“可以啊，反正我是不想这样闲着了。”。就这样我提出了离职申请并开始学习Node（下一个项目使用的语言），离职被一直拖着到10月份的时候终于满一个月离职加入新团队。在这里学到了许多有价值的技术和一些获取技术的途径（比如github），我自己也实现了自增长（不需要人带着学习，自己能够处理遇到的问题）。当然也要感谢曾帮助过我的那些同事们，也祝他们在新的团队实现自己的价值。\n\n第三段工作经历大概2个月，就是上边提到的游戏创业团队，我们加入时大概10个人左右，然后就风风火火的投入战斗了，到12月份的时候游戏雏型已经完成，可惜生不逢时啊，投资人撤资了。于是这段经历就这样over了。\n\n第四段工作经历，也是我目前在职的公司普林科技，于2016.1.4加入公司。由于之前失败的经验，这一次我经过慎重的考虑决定入职普林。在这里有一种找到了组织的感觉，反正就是状态莫名的好。涛哥对我很信任，安排我负责好几个项目的工作和一些面试的工作（感觉受宠若惊），当然为了回馈这份信任我投入了100%的热情。同事们也好优秀，什么“博士后、博士、北大、北航”，听听这些词组都让人好生羡慕，看来我只有更努力、更努力和更努力奔跑才能赶的上他们的步伐了。\n\n我希望自己不忘初衷，努力学习、努力工作、努力生活。\n\n","source":"_posts/我在普林.md","raw":"title: 我在普林\ndate: 2016-01-04 15:54:49\ncategory: 写给5年后的自己\ntags:\n- 感悟\n- 心得\n---\n\n到今天为止参加工作马上满18个月了，说说这段时间的感受。\n\n18个月前，我怀揣着梦想来到北京，迷茫但又憧憬着，一路走来也算磕磕碰碰。一直以来我都认为自己与众不同，不想按部就班走别人走过的路。在职业生涯的起步阶段我想尝试更多的自己，不为自己设定任何界限，我要一直告诉自己“Yes，I can do it.”。\n\n<!-- more -->\n第一段工作经历大概三个月，是在一家做“玩具”机器人的公司，工作内容主要是用C语言写一些机器人控制代码。从这里离职的原因是老板因为我迟到扣了我100快钱。是的，这就是我离职的原因，倒不是我对钱看的有多重，而是因为通过这一段时间对公司的了解，这家公司并不能为我提供学习的技术的场景，再加上如此刻薄的领导。来过北京的朋友都知道北京的交通真是太xx了，我到公司上班每天需要2小时，公司8:30上班（从北京的海淀的西北边到通州的东南边）。\n在这家公司上班期间我其实就发现了自己的不足，报名参加了嵌入式软件开发的课程，只是没想到导火线来的这么快。其实领导也找过我（说教），我当时很想告诉他这里根本就不在我的名单内。总之在这家公司其实没学到多少有价值的技术，但是有一点我认清了自己的不足和当前实力才是王道的职场。\n\n第二段工作经历大概12个月，我加入了挣钱最多也最幸苦的手游行业，我把这里定义为职业生涯的开始。在这家公司我认识了敬坤（老大）、铎哥（师傅）、云飞（老乡）、高峰（好友）等等。我开始学习使用Erlang语言开发服务器后端程序。我是一个非常愿意为喜欢的东西付出努力的人，为了学习Erlang语言我从网上罗列许多优秀的资料和官方的文档打印成纸质版本随身携带，甚至有一段时间连上厕所都拿一本啃着，为了学习Vim（编辑器之神），我适用了许多优秀的配置，翻看了无数的技术博客和书籍，等等。就这样埋头苦干了快一年，游戏也上线了还取得了不错的成绩，本来信心满满的投入到新游戏的制作（独立开发后端），不知为何团队莫名其妙就解散了（当然我不在离职的名单），短短数日同事们走了一大半。后来才知道是项目经理带着团队离开了（看来我还是没有成长为核心成员）。这时大概是2015年6月左右，开发任务基本终止了，每天就做一些维护的工作和玩游戏，这样一直持续到8月份我开始决定离开了，大概是9月份的时候云飞说“有一个小团队需要后端程序员，你有兴趣没有，工资福利都好说？”，我说“可以啊，反正我是不想这样闲着了。”。就这样我提出了离职申请并开始学习Node（下一个项目使用的语言），离职被一直拖着到10月份的时候终于满一个月离职加入新团队。在这里学到了许多有价值的技术和一些获取技术的途径（比如github），我自己也实现了自增长（不需要人带着学习，自己能够处理遇到的问题）。当然也要感谢曾帮助过我的那些同事们，也祝他们在新的团队实现自己的价值。\n\n第三段工作经历大概2个月，就是上边提到的游戏创业团队，我们加入时大概10个人左右，然后就风风火火的投入战斗了，到12月份的时候游戏雏型已经完成，可惜生不逢时啊，投资人撤资了。于是这段经历就这样over了。\n\n第四段工作经历，也是我目前在职的公司普林科技，于2016.1.4加入公司。由于之前失败的经验，这一次我经过慎重的考虑决定入职普林。在这里有一种找到了组织的感觉，反正就是状态莫名的好。涛哥对我很信任，安排我负责好几个项目的工作和一些面试的工作（感觉受宠若惊），当然为了回馈这份信任我投入了100%的热情。同事们也好优秀，什么“博士后、博士、北大、北航”，听听这些词组都让人好生羡慕，看来我只有更努力、更努力和更努力奔跑才能赶的上他们的步伐了。\n\n我希望自己不忘初衷，努力学习、努力工作、努力生活。\n\n","slug":"我在普林","published":1,"updated":"2016-12-07T05:41:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwqg8nyk000f5qxzhqlc5ij0","content":"<p>到今天为止参加工作马上满18个月了，说说这段时间的感受。</p>\n<p>18个月前，我怀揣着梦想来到北京，迷茫但又憧憬着，一路走来也算磕磕碰碰。一直以来我都认为自己与众不同，不想按部就班走别人走过的路。在职业生涯的起步阶段我想尝试更多的自己，不为自己设定任何界限，我要一直告诉自己“Yes，I can do it.”。</p>\n<a id=\"more\"></a>\n<p>第一段工作经历大概三个月，是在一家做“玩具”机器人的公司，工作内容主要是用C语言写一些机器人控制代码。从这里离职的原因是老板因为我迟到扣了我100快钱。是的，这就是我离职的原因，倒不是我对钱看的有多重，而是因为通过这一段时间对公司的了解，这家公司并不能为我提供学习的技术的场景，再加上如此刻薄的领导。来过北京的朋友都知道北京的交通真是太xx了，我到公司上班每天需要2小时，公司8:30上班（从北京的海淀的西北边到通州的东南边）。<br>在这家公司上班期间我其实就发现了自己的不足，报名参加了嵌入式软件开发的课程，只是没想到导火线来的这么快。其实领导也找过我（说教），我当时很想告诉他这里根本就不在我的名单内。总之在这家公司其实没学到多少有价值的技术，但是有一点我认清了自己的不足和当前实力才是王道的职场。</p>\n<p>第二段工作经历大概12个月，我加入了挣钱最多也最幸苦的手游行业，我把这里定义为职业生涯的开始。在这家公司我认识了敬坤（老大）、铎哥（师傅）、云飞（老乡）、高峰（好友）等等。我开始学习使用Erlang语言开发服务器后端程序。我是一个非常愿意为喜欢的东西付出努力的人，为了学习Erlang语言我从网上罗列许多优秀的资料和官方的文档打印成纸质版本随身携带，甚至有一段时间连上厕所都拿一本啃着，为了学习Vim（编辑器之神），我适用了许多优秀的配置，翻看了无数的技术博客和书籍，等等。就这样埋头苦干了快一年，游戏也上线了还取得了不错的成绩，本来信心满满的投入到新游戏的制作（独立开发后端），不知为何团队莫名其妙就解散了（当然我不在离职的名单），短短数日同事们走了一大半。后来才知道是项目经理带着团队离开了（看来我还是没有成长为核心成员）。这时大概是2015年6月左右，开发任务基本终止了，每天就做一些维护的工作和玩游戏，这样一直持续到8月份我开始决定离开了，大概是9月份的时候云飞说“有一个小团队需要后端程序员，你有兴趣没有，工资福利都好说？”，我说“可以啊，反正我是不想这样闲着了。”。就这样我提出了离职申请并开始学习Node（下一个项目使用的语言），离职被一直拖着到10月份的时候终于满一个月离职加入新团队。在这里学到了许多有价值的技术和一些获取技术的途径（比如github），我自己也实现了自增长（不需要人带着学习，自己能够处理遇到的问题）。当然也要感谢曾帮助过我的那些同事们，也祝他们在新的团队实现自己的价值。</p>\n<p>第三段工作经历大概2个月，就是上边提到的游戏创业团队，我们加入时大概10个人左右，然后就风风火火的投入战斗了，到12月份的时候游戏雏型已经完成，可惜生不逢时啊，投资人撤资了。于是这段经历就这样over了。</p>\n<p>第四段工作经历，也是我目前在职的公司普林科技，于2016.1.4加入公司。由于之前失败的经验，这一次我经过慎重的考虑决定入职普林。在这里有一种找到了组织的感觉，反正就是状态莫名的好。涛哥对我很信任，安排我负责好几个项目的工作和一些面试的工作（感觉受宠若惊），当然为了回馈这份信任我投入了100%的热情。同事们也好优秀，什么“博士后、博士、北大、北航”，听听这些词组都让人好生羡慕，看来我只有更努力、更努力和更努力奔跑才能赶的上他们的步伐了。</p>\n<p>我希望自己不忘初衷，努力学习、努力工作、努力生活。</p>\n","excerpt":"<p>到今天为止参加工作马上满18个月了，说说这段时间的感受。</p>\n<p>18个月前，我怀揣着梦想来到北京，迷茫但又憧憬着，一路走来也算磕磕碰碰。一直以来我都认为自己与众不同，不想按部就班走别人走过的路。在职业生涯的起步阶段我想尝试更多的自己，不为自己设定任何界限，我要一直告诉自己“Yes，I can do it.”。</p>","more":"<p>第一段工作经历大概三个月，是在一家做“玩具”机器人的公司，工作内容主要是用C语言写一些机器人控制代码。从这里离职的原因是老板因为我迟到扣了我100快钱。是的，这就是我离职的原因，倒不是我对钱看的有多重，而是因为通过这一段时间对公司的了解，这家公司并不能为我提供学习的技术的场景，再加上如此刻薄的领导。来过北京的朋友都知道北京的交通真是太xx了，我到公司上班每天需要2小时，公司8:30上班（从北京的海淀的西北边到通州的东南边）。<br>在这家公司上班期间我其实就发现了自己的不足，报名参加了嵌入式软件开发的课程，只是没想到导火线来的这么快。其实领导也找过我（说教），我当时很想告诉他这里根本就不在我的名单内。总之在这家公司其实没学到多少有价值的技术，但是有一点我认清了自己的不足和当前实力才是王道的职场。</p>\n<p>第二段工作经历大概12个月，我加入了挣钱最多也最幸苦的手游行业，我把这里定义为职业生涯的开始。在这家公司我认识了敬坤（老大）、铎哥（师傅）、云飞（老乡）、高峰（好友）等等。我开始学习使用Erlang语言开发服务器后端程序。我是一个非常愿意为喜欢的东西付出努力的人，为了学习Erlang语言我从网上罗列许多优秀的资料和官方的文档打印成纸质版本随身携带，甚至有一段时间连上厕所都拿一本啃着，为了学习Vim（编辑器之神），我适用了许多优秀的配置，翻看了无数的技术博客和书籍，等等。就这样埋头苦干了快一年，游戏也上线了还取得了不错的成绩，本来信心满满的投入到新游戏的制作（独立开发后端），不知为何团队莫名其妙就解散了（当然我不在离职的名单），短短数日同事们走了一大半。后来才知道是项目经理带着团队离开了（看来我还是没有成长为核心成员）。这时大概是2015年6月左右，开发任务基本终止了，每天就做一些维护的工作和玩游戏，这样一直持续到8月份我开始决定离开了，大概是9月份的时候云飞说“有一个小团队需要后端程序员，你有兴趣没有，工资福利都好说？”，我说“可以啊，反正我是不想这样闲着了。”。就这样我提出了离职申请并开始学习Node（下一个项目使用的语言），离职被一直拖着到10月份的时候终于满一个月离职加入新团队。在这里学到了许多有价值的技术和一些获取技术的途径（比如github），我自己也实现了自增长（不需要人带着学习，自己能够处理遇到的问题）。当然也要感谢曾帮助过我的那些同事们，也祝他们在新的团队实现自己的价值。</p>\n<p>第三段工作经历大概2个月，就是上边提到的游戏创业团队，我们加入时大概10个人左右，然后就风风火火的投入战斗了，到12月份的时候游戏雏型已经完成，可惜生不逢时啊，投资人撤资了。于是这段经历就这样over了。</p>\n<p>第四段工作经历，也是我目前在职的公司普林科技，于2016.1.4加入公司。由于之前失败的经验，这一次我经过慎重的考虑决定入职普林。在这里有一种找到了组织的感觉，反正就是状态莫名的好。涛哥对我很信任，安排我负责好几个项目的工作和一些面试的工作（感觉受宠若惊），当然为了回馈这份信任我投入了100%的热情。同事们也好优秀，什么“博士后、博士、北大、北航”，听听这些词组都让人好生羡慕，看来我只有更努力、更努力和更努力奔跑才能赶的上他们的步伐了。</p>\n<p>我希望自己不忘初衷，努力学习、努力工作、努力生活。</p>"},{"title":"时速云面试总结","date":"2015-12-30T09:39:56.000Z","_content":"\n### 1. 实现字符串按word逆序，假如字符串\"This is Jack\"，逆序为\"Jack is This\"。\n解：第一步翻转整个字符串得到\"kcaJ si sihT\"，第二步翻转字符串中每个单词得到\"Jack is This\"。\n```c\n    void reverse(char *begin, char *end) {\n      if (begin == NULL || end == NULL) {\n        return;\n      }\n\n      while (begin < end) {\n        // swap *begin and *end\n        *begin = *begin + *end;\n        *end   = *begin - *end;\n        *begin = *begin - *end;\n\n        begin++;\n        end--;\n      }\n    }\n\n    char *reverse_words(char *data) {\n      // check input\n      if (data == NULL) {\n        return NULL;\n      }\n\n      char *begin = data;\n      char *end = data;\n\n      // find the end of the data\n      while (*end != '\\0') {\n        end++;\n      }\n      end = end - 1;\n\n      // reverse data\n      reverse(begin, end);\n\n      // reverse word in data\n      begin = end = data;\n      while (*begin != '\\0') {\n        if (*begin == ' ') {\n          begin++;\n          end++;\n        } else if (*end == ' ' || *end == '\\0') {\n          reverse(begin, --end);\n          begin = ++end;\n        } else {\n          end++;\n        }\n      }\n\n      return data;\n    }\n```\n\n<!-- more -->\n### 2. 如何判断一个单链表是有环的？\n解：设定两个指针slow和fast，slow每次移动一位，fast每次移动2位，如果有环路必定相遇既slow=fast\n\n```c\n    int is_exist_loop(struct List *head) {\n      if (head == NULL) {\n        return 0;\n      }\n      struct List *slow = head;\n      struct List *fast = head;\n\n      while (fast != NULL && fast->next != NULL) {\n        slow = slow->next;\n        fast = fast->next->next;\n        if (slow == fast) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n```\n\n### 3. 如何逆序单链表\n解：将列表的下一个指针分别指向前一个，这里需注意在指正修改之前应该先保存下一个指针。\n\n```c\n    struct List *reverse_list(struct List *head) {\n      struct List *new_head = NULL;\n      struct List *cur = head;\n      struct List *pre = NULL;\n\n      while (cur != NULL) {\n        struct List *next = cur->next;\n        if (next == NULL) {\n          new_head = cur;\n        }\n        cur->next = pre;\n        pre = cur;\n        cur = next;\n      }\n    }\n```\n","source":"_posts/时速云面试总结.md","raw":"title: 时速云面试总结\ndate: 2015-12-30 17:39:56\ncategory: 面试\ntags: C语言\n---\n\n### 1. 实现字符串按word逆序，假如字符串\"This is Jack\"，逆序为\"Jack is This\"。\n解：第一步翻转整个字符串得到\"kcaJ si sihT\"，第二步翻转字符串中每个单词得到\"Jack is This\"。\n```c\n    void reverse(char *begin, char *end) {\n      if (begin == NULL || end == NULL) {\n        return;\n      }\n\n      while (begin < end) {\n        // swap *begin and *end\n        *begin = *begin + *end;\n        *end   = *begin - *end;\n        *begin = *begin - *end;\n\n        begin++;\n        end--;\n      }\n    }\n\n    char *reverse_words(char *data) {\n      // check input\n      if (data == NULL) {\n        return NULL;\n      }\n\n      char *begin = data;\n      char *end = data;\n\n      // find the end of the data\n      while (*end != '\\0') {\n        end++;\n      }\n      end = end - 1;\n\n      // reverse data\n      reverse(begin, end);\n\n      // reverse word in data\n      begin = end = data;\n      while (*begin != '\\0') {\n        if (*begin == ' ') {\n          begin++;\n          end++;\n        } else if (*end == ' ' || *end == '\\0') {\n          reverse(begin, --end);\n          begin = ++end;\n        } else {\n          end++;\n        }\n      }\n\n      return data;\n    }\n```\n\n<!-- more -->\n### 2. 如何判断一个单链表是有环的？\n解：设定两个指针slow和fast，slow每次移动一位，fast每次移动2位，如果有环路必定相遇既slow=fast\n\n```c\n    int is_exist_loop(struct List *head) {\n      if (head == NULL) {\n        return 0;\n      }\n      struct List *slow = head;\n      struct List *fast = head;\n\n      while (fast != NULL && fast->next != NULL) {\n        slow = slow->next;\n        fast = fast->next->next;\n        if (slow == fast) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n```\n\n### 3. 如何逆序单链表\n解：将列表的下一个指针分别指向前一个，这里需注意在指正修改之前应该先保存下一个指针。\n\n```c\n    struct List *reverse_list(struct List *head) {\n      struct List *new_head = NULL;\n      struct List *cur = head;\n      struct List *pre = NULL;\n\n      while (cur != NULL) {\n        struct List *next = cur->next;\n        if (next == NULL) {\n          new_head = cur;\n        }\n        cur->next = pre;\n        pre = cur;\n        cur = next;\n      }\n    }\n```\n","slug":"时速云面试总结","published":1,"updated":"2016-12-07T05:41:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwqg8nyx000j5qxz0ggxwz7a","content":"<h3 id=\"1-实现字符串按word逆序，假如字符串”This-is-Jack”，逆序为”Jack-is-This”。\"><a href=\"#1-实现字符串按word逆序，假如字符串”This-is-Jack”，逆序为”Jack-is-This”。\" class=\"headerlink\" title=\"1. 实现字符串按word逆序，假如字符串”This is Jack”，逆序为”Jack is This”。\"></a>1. 实现字符串按word逆序，假如字符串”This is Jack”，逆序为”Jack is This”。</h3><p>解：第一步翻转整个字符串得到”kcaJ si sihT”，第二步翻转字符串中每个单词得到”Jack is This”。<br><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">char</span> *begin, <span class=\"keyword\">char</span> *end)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (begin == <span class=\"literal\">NULL</span> || end == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span> (begin &lt; end) &#123;</div><div class=\"line\">    <span class=\"comment\">// swap *begin and *end</span></div><div class=\"line\">    *begin = *begin + *end;</div><div class=\"line\">    *end   = *begin - *end;</div><div class=\"line\">    *begin = *begin - *end;</div><div class=\"line\"></div><div class=\"line\">    begin++;</div><div class=\"line\">    end--;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">reverse_words</span><span class=\"params\">(<span class=\"keyword\">char</span> *data)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// check input</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (data == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">char</span> *begin = data;</div><div class=\"line\">  <span class=\"keyword\">char</span> *end = data;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// find the end of the data</span></div><div class=\"line\">  <span class=\"keyword\">while</span> (*end != <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">    end++;</div><div class=\"line\">  &#125;</div><div class=\"line\">  end = end - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// reverse data</span></div><div class=\"line\">  reverse(begin, end);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// reverse word in data</span></div><div class=\"line\">  begin = end = data;</div><div class=\"line\">  <span class=\"keyword\">while</span> (*begin != <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (*begin == <span class=\"string\">' '</span>) &#123;</div><div class=\"line\">      begin++;</div><div class=\"line\">      end++;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*end == <span class=\"string\">' '</span> || *end == <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">      reverse(begin, --end);</div><div class=\"line\">      begin = ++end;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      end++;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> data;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"2-如何判断一个单链表是有环的？\"><a href=\"#2-如何判断一个单链表是有环的？\" class=\"headerlink\" title=\"2. 如何判断一个单链表是有环的？\"></a>2. 如何判断一个单链表是有环的？</h3><p>解：设定两个指针slow和fast，slow每次移动一位，fast每次移动2位，如果有环路必定相遇既slow=fast</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">is_exist_loop</span><span class=\"params\">(<span class=\"keyword\">struct</span> List *head)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">struct</span> List *slow = head;</div><div class=\"line\">  <span class=\"keyword\">struct</span> List *fast = head;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span> (fast != <span class=\"literal\">NULL</span> &amp;&amp; fast-&gt;next != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    slow = slow-&gt;next;</div><div class=\"line\">    fast = fast-&gt;next-&gt;next;</div><div class=\"line\">    <span class=\"keyword\">if</span> (slow == fast) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-如何逆序单链表\"><a href=\"#3-如何逆序单链表\" class=\"headerlink\" title=\"3. 如何逆序单链表\"></a>3. 如何逆序单链表</h3><p>解：将列表的下一个指针分别指向前一个，这里需注意在指正修改之前应该先保存下一个指针。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> List *<span class=\"title\">reverse_list</span><span class=\"params\">(<span class=\"keyword\">struct</span> List *head)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">struct</span> List *new_head = <span class=\"literal\">NULL</span>;</div><div class=\"line\">  <span class=\"keyword\">struct</span> List *cur = head;</div><div class=\"line\">  <span class=\"keyword\">struct</span> List *pre = <span class=\"literal\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span> (cur != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> List *next = cur-&gt;next;</div><div class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">      new_head = cur;</div><div class=\"line\">    &#125;</div><div class=\"line\">    cur-&gt;next = pre;</div><div class=\"line\">    pre = cur;</div><div class=\"line\">    cur = next;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h3 id=\"1-实现字符串按word逆序，假如字符串”This-is-Jack”，逆序为”Jack-is-This”。\"><a href=\"#1-实现字符串按word逆序，假如字符串”This-is-Jack”，逆序为”Jack-is-This”。\" class=\"headerlink\" title=\"1. 实现字符串按word逆序，假如字符串”This is Jack”，逆序为”Jack is This”。\"></a>1. 实现字符串按word逆序，假如字符串”This is Jack”，逆序为”Jack is This”。</h3><p>解：第一步翻转整个字符串得到”kcaJ si sihT”，第二步翻转字符串中每个单词得到”Jack is This”。<br><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">char</span> *begin, <span class=\"keyword\">char</span> *end)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (begin == <span class=\"literal\">NULL</span> || end == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span> (begin &lt; end) &#123;</div><div class=\"line\">    <span class=\"comment\">// swap *begin and *end</span></div><div class=\"line\">    *begin = *begin + *end;</div><div class=\"line\">    *end   = *begin - *end;</div><div class=\"line\">    *begin = *begin - *end;</div><div class=\"line\"></div><div class=\"line\">    begin++;</div><div class=\"line\">    end--;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">reverse_words</span><span class=\"params\">(<span class=\"keyword\">char</span> *data)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// check input</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (data == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">char</span> *begin = data;</div><div class=\"line\">  <span class=\"keyword\">char</span> *end = data;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// find the end of the data</span></div><div class=\"line\">  <span class=\"keyword\">while</span> (*end != <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">    end++;</div><div class=\"line\">  &#125;</div><div class=\"line\">  end = end - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// reverse data</span></div><div class=\"line\">  reverse(begin, end);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// reverse word in data</span></div><div class=\"line\">  begin = end = data;</div><div class=\"line\">  <span class=\"keyword\">while</span> (*begin != <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (*begin == <span class=\"string\">' '</span>) &#123;</div><div class=\"line\">      begin++;</div><div class=\"line\">      end++;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*end == <span class=\"string\">' '</span> || *end == <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">      reverse(begin, --end);</div><div class=\"line\">      begin = ++end;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      end++;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> data;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"2-如何判断一个单链表是有环的？\"><a href=\"#2-如何判断一个单链表是有环的？\" class=\"headerlink\" title=\"2. 如何判断一个单链表是有环的？\"></a>2. 如何判断一个单链表是有环的？</h3><p>解：设定两个指针slow和fast，slow每次移动一位，fast每次移动2位，如果有环路必定相遇既slow=fast</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">is_exist_loop</span><span class=\"params\">(<span class=\"keyword\">struct</span> List *head)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">struct</span> List *slow = head;</div><div class=\"line\">  <span class=\"keyword\">struct</span> List *fast = head;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span> (fast != <span class=\"literal\">NULL</span> &amp;&amp; fast-&gt;next != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    slow = slow-&gt;next;</div><div class=\"line\">    fast = fast-&gt;next-&gt;next;</div><div class=\"line\">    <span class=\"keyword\">if</span> (slow == fast) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-如何逆序单链表\"><a href=\"#3-如何逆序单链表\" class=\"headerlink\" title=\"3. 如何逆序单链表\"></a>3. 如何逆序单链表</h3><p>解：将列表的下一个指针分别指向前一个，这里需注意在指正修改之前应该先保存下一个指针。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> List *<span class=\"title\">reverse_list</span><span class=\"params\">(<span class=\"keyword\">struct</span> List *head)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">struct</span> List *new_head = <span class=\"literal\">NULL</span>;</div><div class=\"line\">  <span class=\"keyword\">struct</span> List *cur = head;</div><div class=\"line\">  <span class=\"keyword\">struct</span> List *pre = <span class=\"literal\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span> (cur != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> List *next = cur-&gt;next;</div><div class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">      new_head = cur;</div><div class=\"line\">    &#125;</div><div class=\"line\">    cur-&gt;next = pre;</div><div class=\"line\">    pre = cur;</div><div class=\"line\">    cur = next;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"如何使用Cloudera Manager快速构建大数据平台","date":"2016-12-15T14:10:54.000Z","_content":"![Cloudera Manager](/images/cloudera-manager.jpeg)\n\n## 介绍\nCloudera 提供一个可扩展、灵活、集成的平台，可用来方便地管理您的企业中快速增长的多种多样的数据。业界领先的 Cloudera 产品和解决方案使您能够部署并管理 Apache Hadoop 和相关项目、操作和分析您的数据以及保护数据的安全。\n\nCloudera 提供下列产品和工具：\n- CDH — Cloudera 分发的 Apache Hadoop 和其他相关开放源代码项目，包括 Impala 和 Cloudera Search。CDH 还提供安全保护以及与许多硬件和软件解决方案的集成。\n- Cloudera Manager — 一个复杂的应用程序，用于部署、管理、监控您的 CDH 部署并诊断问题。Cloudera Manager 提供 Admin Console，这是一种基于 Web 的用户界面，使您的企业数据管理简单而直接。它还包括 Cloudera Manager API，可用来获取群集运行状况信息和度量以及配置 Cloudera Manager。\n- Cloudera Navigator — CDH 平台的端到端数据管理工具。Cloudera Navigator 使管理员、数据经理和分析师能够了解 Hadoop 中的大量数据。Cloudera Navigator 中强大的审核、数据管理、沿袭管理和生命周期管理使企业能够遵守严格的法规遵从性和法规要求。\n- Cloudera Impala — 一种大规模并行处理 SQL 引擎，用于交互式分析和商业智能。其高度优化的体系结构使它非常适合用于具有联接、聚合和子查询的传统 BI 样式的查询。它可以查询来自各种源的 Hadoop 数据文件，包括由 MapReduce 作业生成的数据文件或加载到 Hive 表中的数据文件。YARN 和 Llama 资源管理组件让 Impala 能够共存于使用 Impala SQL 查询并发运行批处理工作负载的群集上。您可以通过 Cloudera Manager 用户界面管理 Impala 及其他 Hadoop 组件，并通过 Sentry 授权框架保护其数据。\n<!--more-->\n\n## 部署\n### Step1，服务器集群准备\n#### 初始化机器\n准备如下5台服务器，`cloudera-manager`用于部署Cloudera管理服务程序，以`hadoop`开头的机器用于hadoop平台搭建。为了便于管理所有的机器都应设置同样的账号和密码，本文中所有机器都具有相同的账户`cdh`和相同的密码`******`。\n\n| HOSTNAME         | IP       | CORE | MEM(G) |  SYSTEM   |\n|------------------|----------|------|--------|-----------|\n| cloudera-manager | 10.1.3.4 |  2   |   8    | CentOS7.2 |\n| hadoop-master-1  | 10.1.3.5 |  4   |  16    | CentOS7.2 |\n| hadoop-slave-1   | 10.1.3.6 |  4   |  16    | CentOS7.2 |\n| hadoop-slave-2   | 10.1.3.7 |  4   |  16    | CentOS7.2 |\n| hadoop-slave-3   | 10.1.3.8 |  4   |  16    | CentOS7.2 |\n\n#### 配置秘钥登录\n为了避免每次都输入密码，我们需要做`cloudera-manager`到所有机器的秘钥登录，用于部署；Hadoop群集要求`master`可以秘钥登录所有`slave`，具体执行过程如下：\n\n    # on cloudera-manager\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-master-1\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-1\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-2\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-3\n\n    # on hadoop-master-1\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-1\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-2\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-3\n\n#### 配置hosts文件\n在hadoop集群中有许多rpc调用，调用时是通过hostname找ip，因此我们在以`hadoop开头的所有机器`配置hosts信息，修改方式为编辑`/etc/hosts`文件，添加如下内容:\n\n    10.1.3.5        hadoop-master-1\n    10.1.3.6        hadoop-slave-1\n    10.1.3.7        hadoop-slave-2\n    10.1.3.8        hadoop-slave-3\n\n#### 关闭防火墙及selinux\n同样在hadoop集群之间rpc调用会涉及到网络端口，我们暂时需要关闭防火墙和selinux，建议生成环境设置相应的规则。\n关闭防火墙操作如下：\n\n    sudo systemctl stop firewalld     # 关闭\n    sudo systemctl disable firewalld  # 取消开机启动\n\n暂时关闭selinux操作如下：\n\n    setenforce 0\n\n永久关闭需要修改`/etc/sysconfig/selinux`中`SELINUX=disabled`并重新启动机器。\n#### sudo无密码配置\n在部署过程中服务器会用到`sudo`命令且不能有密码操作如下：\n\n    sudo visudo\n\n在末尾加入如下两行内容：\n\n    root    ALL=(ALL)       NOPASSWD: ALL\n    cdh     ALL=(ALL)       NOPASSWD: ALL\n\n### Step2，软件安装包准备\n> CDH：5.7.5\n#### 下载\n\n    mkdir cloudera\n    cd cloudera\n    \n1) cloudera-manager.repo\n\n    wget http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo\n\n2) cloudera-manager-installer-external.bin\n\n    wget http://archive.cloudera.com/cm5/installer/5.7.5/cloudera-manager-installer-external.bin\n\n3) RPMS\n\n    mkdir RPMS\n    wget -r -nd http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/5.7.5/RPMS/x86_64/ -P RPMS/\n\n4) Parcel\n\n    mkdir parcel-repo\n    wget http://archive.cloudera.com/cdh5/parcels/5.7.5/CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel -P parcel-repo/\n    wget -O CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha http://archive.cloudera.com/cdh5/parcels/5.7.5/CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha1 -P parcel-repo/\n    wget http://archive.cloudera.com/cdh5/parcels/5.7.5/manifest.json -P parcel-repo/\n\n#### 目录结构\n\n    ├── cloudera-manager-installer-external.bin\n    ├── cloudera-manager.repo\n    ├── parcel-repo\n    │   ├── CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel\n    │   ├── CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha\n    │   └── manifest.json\n    └── RPMS\n       ├── cloudera-manager-agent-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n       ├── cloudera-manager-daemons-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n       ├── cloudera-manager-server-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n       ├── cloudera-manager-server-db-2-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n       ├── enterprise-debuginfo-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n       ├── jdk-6u31-linux-amd64.rpm\n       └── oracle-j2sdk1.7-1.7.0+update67-1.x86_64.rpm\n\n### Step3，安装\n在**所有机器**上执行如下操作：\n1) 将`cloudera/cloudera-manager.repo`拷贝到`/etc/yum.repos.d/`\n\n    sudo mv cloudera/cloudera-manager.repo /etc/yum.repos.d\n\n2) 安装所有rpm包\n\n    sudo yum -y install cloudera/RPMS/*.rpm\n\n3) 将`cloudera/parcel-repo`下所有文件拷贝到默认本地parcel库`/opt/cloudera/parcel-repo`下，在自动安装时会尝试搜索本地parcel文件。\n\n    sudo mkdir -p /opt/cloudera/parcel-repo\n    sudo mv cloudera/parcel-repo/* /opt/cloudera/parcel-repo\n\n在**cloudera-manager**上执行如下操作：\n\n    sudo cloudera/cloudera-manager-installer-external.bin\n\ncm安装成功后在浏览器访问`http://IP:7180`，根据web管理台提示执行安装操作。\n\n## 测试\n### PI\n\n    ssh 10.1.3.5\n    sudo su hdfs\n    cd /opt/cloudera/parcels/CDH/jars\n    hadoop jar hadoop-mapreduce-examples-2.6.0-cdh5.7.5.jar pi 8 64\n\n得到如下结果，表明hadoop相关组件已经运行正常。\n\n    Job Finished in 29.153 seconds\n    Estimated value of Pi is 3.14843750000000000000\n\n### benchmark\n#### 写入10个1G文件\n\n    hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar TestDFSIO -write -nrFiles 10 -fileSize 1000\n\n#### 读取10个1G文件\n\n    hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar TestDFSIO -read -nrFiles 10 -fileSize 1000\n\n#### 压力测试\n\n    hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar mrbench -numRuns 50\n\n## Q & A\nQ: 在下载软件安装包时速度非常慢，如何解决？\nA：使用VPN，推荐[多态](https://duotai.org)。\nQ: 在安装rpm文件时速度非常慢且频繁出错，如何解决？\nA：使用代理在一台服务器上同步仓库，搭建本地repo，将cloudera-manager.repo中baseurl改为本地仓库地址，详情见附A。\nQ: 在管理控制台安装时有些机器经常失败，如何解决？\nA: 正常，多试几次就好😏。\nQ：在管理控制台安装时失败重试卡在“正在获取锁”，如何解决？\nA：删除对应机器`/tmp/*`文件并重启。\nQ：我未完全按您的步骤操作最后没成功，如何解决?\nA：滚...\n\n## 附A：本地yum仓库搭建\n1）下载CDH5的repo文件，修改x86\\_64/cdh/5/为x86\\_64/cdh/5.7.5/，将其保存在 /etc/yum.repos.d/ 目录中。\n\n    wget http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo\n\n2) 安装 yum-utils 和 createrepo RPM 软件包（如果其尚未安装）。yum-utils 软件包包含 reposync 命令，需要用其创建逻辑 Yum 存储库。\n\n    sudo yum install yum-utils createrepo\n\n3) 同步yum 存储库下载至本地文件夹cloudera-manager。（最好使用代理`export http_proxy`和`https_proxy`，外国源较慢）\n\n    reposync -r cloudera-manager\n    cd cloudera-cdh5\n    createrepo .\n\n4) 安装epel源和nginx，搭建文件服务器。\n\n    sudo yum -y install epel-release\n    sudo yum -y install nginx\n\n5) 将cloudera-cdh5/\\*复制到/srv/cloudera/cdh/5/（不存在则创建），作为nginx静态文件路径。\n\n    sudo mkdir -p /srv/cloudera/cdh/5\n    sudo mv cloudera-cdh5/* /srv/cloudera/cdh/5\n    sudo chown -R nginx:nginx /srv/cloudera\n\n6) 修改nginx配置文件/etc/nginx/nginx.conf中server部分为如下内容。\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /srv/cloudera/;\n\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        autoindex on;\n        autoindex_exact_size on;\n        autoindex_localtime on;\n        }\n    }\n\n7) 测试文件服务器是否可用，否则检查步骤1-6。\n8) 编辑您在步骤1中下载的存储库文件并使用步骤5中的URL将以`baseurl=`为开头的行替换为`baseurl=http://<yourwebserver>/cdh/5/`，将文件保存至`/etc/yum.repos.d/`。\n","source":"_posts/cloudera-manager.md","raw":"title: 如何使用Cloudera Manager快速构建大数据平台\ndate: 2016-12-15 22:10:54\ncategory: Big Data\ntags:\n    - cloudera\n    - hadoop\n    - big data\n---\n![Cloudera Manager](/images/cloudera-manager.jpeg)\n\n## 介绍\nCloudera 提供一个可扩展、灵活、集成的平台，可用来方便地管理您的企业中快速增长的多种多样的数据。业界领先的 Cloudera 产品和解决方案使您能够部署并管理 Apache Hadoop 和相关项目、操作和分析您的数据以及保护数据的安全。\n\nCloudera 提供下列产品和工具：\n- CDH — Cloudera 分发的 Apache Hadoop 和其他相关开放源代码项目，包括 Impala 和 Cloudera Search。CDH 还提供安全保护以及与许多硬件和软件解决方案的集成。\n- Cloudera Manager — 一个复杂的应用程序，用于部署、管理、监控您的 CDH 部署并诊断问题。Cloudera Manager 提供 Admin Console，这是一种基于 Web 的用户界面，使您的企业数据管理简单而直接。它还包括 Cloudera Manager API，可用来获取群集运行状况信息和度量以及配置 Cloudera Manager。\n- Cloudera Navigator — CDH 平台的端到端数据管理工具。Cloudera Navigator 使管理员、数据经理和分析师能够了解 Hadoop 中的大量数据。Cloudera Navigator 中强大的审核、数据管理、沿袭管理和生命周期管理使企业能够遵守严格的法规遵从性和法规要求。\n- Cloudera Impala — 一种大规模并行处理 SQL 引擎，用于交互式分析和商业智能。其高度优化的体系结构使它非常适合用于具有联接、聚合和子查询的传统 BI 样式的查询。它可以查询来自各种源的 Hadoop 数据文件，包括由 MapReduce 作业生成的数据文件或加载到 Hive 表中的数据文件。YARN 和 Llama 资源管理组件让 Impala 能够共存于使用 Impala SQL 查询并发运行批处理工作负载的群集上。您可以通过 Cloudera Manager 用户界面管理 Impala 及其他 Hadoop 组件，并通过 Sentry 授权框架保护其数据。\n<!--more-->\n\n## 部署\n### Step1，服务器集群准备\n#### 初始化机器\n准备如下5台服务器，`cloudera-manager`用于部署Cloudera管理服务程序，以`hadoop`开头的机器用于hadoop平台搭建。为了便于管理所有的机器都应设置同样的账号和密码，本文中所有机器都具有相同的账户`cdh`和相同的密码`******`。\n\n| HOSTNAME         | IP       | CORE | MEM(G) |  SYSTEM   |\n|------------------|----------|------|--------|-----------|\n| cloudera-manager | 10.1.3.4 |  2   |   8    | CentOS7.2 |\n| hadoop-master-1  | 10.1.3.5 |  4   |  16    | CentOS7.2 |\n| hadoop-slave-1   | 10.1.3.6 |  4   |  16    | CentOS7.2 |\n| hadoop-slave-2   | 10.1.3.7 |  4   |  16    | CentOS7.2 |\n| hadoop-slave-3   | 10.1.3.8 |  4   |  16    | CentOS7.2 |\n\n#### 配置秘钥登录\n为了避免每次都输入密码，我们需要做`cloudera-manager`到所有机器的秘钥登录，用于部署；Hadoop群集要求`master`可以秘钥登录所有`slave`，具体执行过程如下：\n\n    # on cloudera-manager\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-master-1\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-1\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-2\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-3\n\n    # on hadoop-master-1\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-1\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-2\n    ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-3\n\n#### 配置hosts文件\n在hadoop集群中有许多rpc调用，调用时是通过hostname找ip，因此我们在以`hadoop开头的所有机器`配置hosts信息，修改方式为编辑`/etc/hosts`文件，添加如下内容:\n\n    10.1.3.5        hadoop-master-1\n    10.1.3.6        hadoop-slave-1\n    10.1.3.7        hadoop-slave-2\n    10.1.3.8        hadoop-slave-3\n\n#### 关闭防火墙及selinux\n同样在hadoop集群之间rpc调用会涉及到网络端口，我们暂时需要关闭防火墙和selinux，建议生成环境设置相应的规则。\n关闭防火墙操作如下：\n\n    sudo systemctl stop firewalld     # 关闭\n    sudo systemctl disable firewalld  # 取消开机启动\n\n暂时关闭selinux操作如下：\n\n    setenforce 0\n\n永久关闭需要修改`/etc/sysconfig/selinux`中`SELINUX=disabled`并重新启动机器。\n#### sudo无密码配置\n在部署过程中服务器会用到`sudo`命令且不能有密码操作如下：\n\n    sudo visudo\n\n在末尾加入如下两行内容：\n\n    root    ALL=(ALL)       NOPASSWD: ALL\n    cdh     ALL=(ALL)       NOPASSWD: ALL\n\n### Step2，软件安装包准备\n> CDH：5.7.5\n#### 下载\n\n    mkdir cloudera\n    cd cloudera\n    \n1) cloudera-manager.repo\n\n    wget http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo\n\n2) cloudera-manager-installer-external.bin\n\n    wget http://archive.cloudera.com/cm5/installer/5.7.5/cloudera-manager-installer-external.bin\n\n3) RPMS\n\n    mkdir RPMS\n    wget -r -nd http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/5.7.5/RPMS/x86_64/ -P RPMS/\n\n4) Parcel\n\n    mkdir parcel-repo\n    wget http://archive.cloudera.com/cdh5/parcels/5.7.5/CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel -P parcel-repo/\n    wget -O CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha http://archive.cloudera.com/cdh5/parcels/5.7.5/CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha1 -P parcel-repo/\n    wget http://archive.cloudera.com/cdh5/parcels/5.7.5/manifest.json -P parcel-repo/\n\n#### 目录结构\n\n    ├── cloudera-manager-installer-external.bin\n    ├── cloudera-manager.repo\n    ├── parcel-repo\n    │   ├── CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel\n    │   ├── CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha\n    │   └── manifest.json\n    └── RPMS\n       ├── cloudera-manager-agent-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n       ├── cloudera-manager-daemons-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n       ├── cloudera-manager-server-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n       ├── cloudera-manager-server-db-2-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n       ├── enterprise-debuginfo-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n       ├── jdk-6u31-linux-amd64.rpm\n       └── oracle-j2sdk1.7-1.7.0+update67-1.x86_64.rpm\n\n### Step3，安装\n在**所有机器**上执行如下操作：\n1) 将`cloudera/cloudera-manager.repo`拷贝到`/etc/yum.repos.d/`\n\n    sudo mv cloudera/cloudera-manager.repo /etc/yum.repos.d\n\n2) 安装所有rpm包\n\n    sudo yum -y install cloudera/RPMS/*.rpm\n\n3) 将`cloudera/parcel-repo`下所有文件拷贝到默认本地parcel库`/opt/cloudera/parcel-repo`下，在自动安装时会尝试搜索本地parcel文件。\n\n    sudo mkdir -p /opt/cloudera/parcel-repo\n    sudo mv cloudera/parcel-repo/* /opt/cloudera/parcel-repo\n\n在**cloudera-manager**上执行如下操作：\n\n    sudo cloudera/cloudera-manager-installer-external.bin\n\ncm安装成功后在浏览器访问`http://IP:7180`，根据web管理台提示执行安装操作。\n\n## 测试\n### PI\n\n    ssh 10.1.3.5\n    sudo su hdfs\n    cd /opt/cloudera/parcels/CDH/jars\n    hadoop jar hadoop-mapreduce-examples-2.6.0-cdh5.7.5.jar pi 8 64\n\n得到如下结果，表明hadoop相关组件已经运行正常。\n\n    Job Finished in 29.153 seconds\n    Estimated value of Pi is 3.14843750000000000000\n\n### benchmark\n#### 写入10个1G文件\n\n    hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar TestDFSIO -write -nrFiles 10 -fileSize 1000\n\n#### 读取10个1G文件\n\n    hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar TestDFSIO -read -nrFiles 10 -fileSize 1000\n\n#### 压力测试\n\n    hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar mrbench -numRuns 50\n\n## Q & A\nQ: 在下载软件安装包时速度非常慢，如何解决？\nA：使用VPN，推荐[多态](https://duotai.org)。\nQ: 在安装rpm文件时速度非常慢且频繁出错，如何解决？\nA：使用代理在一台服务器上同步仓库，搭建本地repo，将cloudera-manager.repo中baseurl改为本地仓库地址，详情见附A。\nQ: 在管理控制台安装时有些机器经常失败，如何解决？\nA: 正常，多试几次就好😏。\nQ：在管理控制台安装时失败重试卡在“正在获取锁”，如何解决？\nA：删除对应机器`/tmp/*`文件并重启。\nQ：我未完全按您的步骤操作最后没成功，如何解决?\nA：滚...\n\n## 附A：本地yum仓库搭建\n1）下载CDH5的repo文件，修改x86\\_64/cdh/5/为x86\\_64/cdh/5.7.5/，将其保存在 /etc/yum.repos.d/ 目录中。\n\n    wget http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo\n\n2) 安装 yum-utils 和 createrepo RPM 软件包（如果其尚未安装）。yum-utils 软件包包含 reposync 命令，需要用其创建逻辑 Yum 存储库。\n\n    sudo yum install yum-utils createrepo\n\n3) 同步yum 存储库下载至本地文件夹cloudera-manager。（最好使用代理`export http_proxy`和`https_proxy`，外国源较慢）\n\n    reposync -r cloudera-manager\n    cd cloudera-cdh5\n    createrepo .\n\n4) 安装epel源和nginx，搭建文件服务器。\n\n    sudo yum -y install epel-release\n    sudo yum -y install nginx\n\n5) 将cloudera-cdh5/\\*复制到/srv/cloudera/cdh/5/（不存在则创建），作为nginx静态文件路径。\n\n    sudo mkdir -p /srv/cloudera/cdh/5\n    sudo mv cloudera-cdh5/* /srv/cloudera/cdh/5\n    sudo chown -R nginx:nginx /srv/cloudera\n\n6) 修改nginx配置文件/etc/nginx/nginx.conf中server部分为如下内容。\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /srv/cloudera/;\n\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        autoindex on;\n        autoindex_exact_size on;\n        autoindex_localtime on;\n        }\n    }\n\n7) 测试文件服务器是否可用，否则检查步骤1-6。\n8) 编辑您在步骤1中下载的存储库文件并使用步骤5中的URL将以`baseurl=`为开头的行替换为`baseurl=http://<yourwebserver>/cdh/5/`，将文件保存至`/etc/yum.repos.d/`。\n","slug":"cloudera-manager","published":1,"updated":"2016-12-15T14:40:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwqh4ny70000lwxz3iu5e223","content":"<p><img src=\"/images/cloudera-manager.jpeg\" alt=\"Cloudera Manager\"></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Cloudera 提供一个可扩展、灵活、集成的平台，可用来方便地管理您的企业中快速增长的多种多样的数据。业界领先的 Cloudera 产品和解决方案使您能够部署并管理 Apache Hadoop 和相关项目、操作和分析您的数据以及保护数据的安全。</p>\n<p>Cloudera 提供下列产品和工具：</p>\n<ul>\n<li>CDH — Cloudera 分发的 Apache Hadoop 和其他相关开放源代码项目，包括 Impala 和 Cloudera Search。CDH 还提供安全保护以及与许多硬件和软件解决方案的集成。</li>\n<li>Cloudera Manager — 一个复杂的应用程序，用于部署、管理、监控您的 CDH 部署并诊断问题。Cloudera Manager 提供 Admin Console，这是一种基于 Web 的用户界面，使您的企业数据管理简单而直接。它还包括 Cloudera Manager API，可用来获取群集运行状况信息和度量以及配置 Cloudera Manager。</li>\n<li>Cloudera Navigator — CDH 平台的端到端数据管理工具。Cloudera Navigator 使管理员、数据经理和分析师能够了解 Hadoop 中的大量数据。Cloudera Navigator 中强大的审核、数据管理、沿袭管理和生命周期管理使企业能够遵守严格的法规遵从性和法规要求。</li>\n<li>Cloudera Impala — 一种大规模并行处理 SQL 引擎，用于交互式分析和商业智能。其高度优化的体系结构使它非常适合用于具有联接、聚合和子查询的传统 BI 样式的查询。它可以查询来自各种源的 Hadoop 数据文件，包括由 MapReduce 作业生成的数据文件或加载到 Hive 表中的数据文件。YARN 和 Llama 资源管理组件让 Impala 能够共存于使用 Impala SQL 查询并发运行批处理工作负载的群集上。您可以通过 Cloudera Manager 用户界面管理 Impala 及其他 Hadoop 组件，并通过 Sentry 授权框架保护其数据。<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"Step1，服务器集群准备\"><a href=\"#Step1，服务器集群准备\" class=\"headerlink\" title=\"Step1，服务器集群准备\"></a>Step1，服务器集群准备</h3><h4 id=\"初始化机器\"><a href=\"#初始化机器\" class=\"headerlink\" title=\"初始化机器\"></a>初始化机器</h4><p>准备如下5台服务器，<code>cloudera-manager</code>用于部署Cloudera管理服务程序，以<code>hadoop</code>开头的机器用于hadoop平台搭建。为了便于管理所有的机器都应设置同样的账号和密码，本文中所有机器都具有相同的账户<code>cdh</code>和相同的密码<code>******</code>。</p>\n<table>\n<thead>\n<tr>\n<th>HOSTNAME</th>\n<th>IP</th>\n<th>CORE</th>\n<th>MEM(G)</th>\n<th>SYSTEM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cloudera-manager</td>\n<td>10.1.3.4</td>\n<td>2</td>\n<td>8</td>\n<td>CentOS7.2</td>\n</tr>\n<tr>\n<td>hadoop-master-1</td>\n<td>10.1.3.5</td>\n<td>4</td>\n<td>16</td>\n<td>CentOS7.2</td>\n</tr>\n<tr>\n<td>hadoop-slave-1</td>\n<td>10.1.3.6</td>\n<td>4</td>\n<td>16</td>\n<td>CentOS7.2</td>\n</tr>\n<tr>\n<td>hadoop-slave-2</td>\n<td>10.1.3.7</td>\n<td>4</td>\n<td>16</td>\n<td>CentOS7.2</td>\n</tr>\n<tr>\n<td>hadoop-slave-3</td>\n<td>10.1.3.8</td>\n<td>4</td>\n<td>16</td>\n<td>CentOS7.2</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"配置秘钥登录\"><a href=\"#配置秘钥登录\" class=\"headerlink\" title=\"配置秘钥登录\"></a>配置秘钥登录</h4><p>为了避免每次都输入密码，我们需要做<code>cloudera-manager</code>到所有机器的秘钥登录，用于部署；Hadoop群集要求<code>master</code>可以秘钥登录所有<code>slave</code>，具体执行过程如下：</p>\n<pre><code># on cloudera-manager\nssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-master-1\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-1\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-2\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-3\n\n# on hadoop-master-1\nssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-1\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-2\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-3\n</code></pre><h4 id=\"配置hosts文件\"><a href=\"#配置hosts文件\" class=\"headerlink\" title=\"配置hosts文件\"></a>配置hosts文件</h4><p>在hadoop集群中有许多rpc调用，调用时是通过hostname找ip，因此我们在以<code>hadoop开头的所有机器</code>配置hosts信息，修改方式为编辑<code>/etc/hosts</code>文件，添加如下内容:</p>\n<pre><code>10.1.3.5        hadoop-master-1\n10.1.3.6        hadoop-slave-1\n10.1.3.7        hadoop-slave-2\n10.1.3.8        hadoop-slave-3\n</code></pre><h4 id=\"关闭防火墙及selinux\"><a href=\"#关闭防火墙及selinux\" class=\"headerlink\" title=\"关闭防火墙及selinux\"></a>关闭防火墙及selinux</h4><p>同样在hadoop集群之间rpc调用会涉及到网络端口，我们暂时需要关闭防火墙和selinux，建议生成环境设置相应的规则。<br>关闭防火墙操作如下：</p>\n<pre><code>sudo systemctl stop firewalld     # 关闭\nsudo systemctl disable firewalld  # 取消开机启动\n</code></pre><p>暂时关闭selinux操作如下：</p>\n<pre><code>setenforce 0\n</code></pre><p>永久关闭需要修改<code>/etc/sysconfig/selinux</code>中<code>SELINUX=disabled</code>并重新启动机器。</p>\n<h4 id=\"sudo无密码配置\"><a href=\"#sudo无密码配置\" class=\"headerlink\" title=\"sudo无密码配置\"></a>sudo无密码配置</h4><p>在部署过程中服务器会用到<code>sudo</code>命令且不能有密码操作如下：</p>\n<pre><code>sudo visudo\n</code></pre><p>在末尾加入如下两行内容：</p>\n<pre><code>root    ALL=(ALL)       NOPASSWD: ALL\ncdh     ALL=(ALL)       NOPASSWD: ALL\n</code></pre><h3 id=\"Step2，软件安装包准备\"><a href=\"#Step2，软件安装包准备\" class=\"headerlink\" title=\"Step2，软件安装包准备\"></a>Step2，软件安装包准备</h3><blockquote>\n<p>CDH：5.7.5</p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4></blockquote>\n<pre><code>mkdir cloudera\ncd cloudera\n</code></pre><p>1) cloudera-manager.repo</p>\n<pre><code>wget http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo\n</code></pre><p>2) cloudera-manager-installer-external.bin</p>\n<pre><code>wget http://archive.cloudera.com/cm5/installer/5.7.5/cloudera-manager-installer-external.bin\n</code></pre><p>3) RPMS</p>\n<pre><code>mkdir RPMS\nwget -r -nd http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/5.7.5/RPMS/x86_64/ -P RPMS/\n</code></pre><p>4) Parcel</p>\n<pre><code>mkdir parcel-repo\nwget http://archive.cloudera.com/cdh5/parcels/5.7.5/CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel -P parcel-repo/\nwget -O CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha http://archive.cloudera.com/cdh5/parcels/5.7.5/CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha1 -P parcel-repo/\nwget http://archive.cloudera.com/cdh5/parcels/5.7.5/manifest.json -P parcel-repo/\n</code></pre><h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><pre><code>├── cloudera-manager-installer-external.bin\n├── cloudera-manager.repo\n├── parcel-repo\n│   ├── CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel\n│   ├── CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha\n│   └── manifest.json\n└── RPMS\n   ├── cloudera-manager-agent-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n   ├── cloudera-manager-daemons-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n   ├── cloudera-manager-server-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n   ├── cloudera-manager-server-db-2-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n   ├── enterprise-debuginfo-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n   ├── jdk-6u31-linux-amd64.rpm\n   └── oracle-j2sdk1.7-1.7.0+update67-1.x86_64.rpm\n</code></pre><h3 id=\"Step3，安装\"><a href=\"#Step3，安装\" class=\"headerlink\" title=\"Step3，安装\"></a>Step3，安装</h3><p>在<strong>所有机器</strong>上执行如下操作：<br>1) 将<code>cloudera/cloudera-manager.repo</code>拷贝到<code>/etc/yum.repos.d/</code></p>\n<pre><code>sudo mv cloudera/cloudera-manager.repo /etc/yum.repos.d\n</code></pre><p>2) 安装所有rpm包</p>\n<pre><code>sudo yum -y install cloudera/RPMS/*.rpm\n</code></pre><p>3) 将<code>cloudera/parcel-repo</code>下所有文件拷贝到默认本地parcel库<code>/opt/cloudera/parcel-repo</code>下，在自动安装时会尝试搜索本地parcel文件。</p>\n<pre><code>sudo mkdir -p /opt/cloudera/parcel-repo\nsudo mv cloudera/parcel-repo/* /opt/cloudera/parcel-repo\n</code></pre><p>在<strong>cloudera-manager</strong>上执行如下操作：</p>\n<pre><code>sudo cloudera/cloudera-manager-installer-external.bin\n</code></pre><p>cm安装成功后在浏览器访问<code>http://IP:7180</code>，根据web管理台提示执行安装操作。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"PI\"><a href=\"#PI\" class=\"headerlink\" title=\"PI\"></a>PI</h3><pre><code>ssh 10.1.3.5\nsudo su hdfs\ncd /opt/cloudera/parcels/CDH/jars\nhadoop jar hadoop-mapreduce-examples-2.6.0-cdh5.7.5.jar pi 8 64\n</code></pre><p>得到如下结果，表明hadoop相关组件已经运行正常。</p>\n<pre><code>Job Finished in 29.153 seconds\nEstimated value of Pi is 3.14843750000000000000\n</code></pre><h3 id=\"benchmark\"><a href=\"#benchmark\" class=\"headerlink\" title=\"benchmark\"></a>benchmark</h3><h4 id=\"写入10个1G文件\"><a href=\"#写入10个1G文件\" class=\"headerlink\" title=\"写入10个1G文件\"></a>写入10个1G文件</h4><pre><code>hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar TestDFSIO -write -nrFiles 10 -fileSize 1000\n</code></pre><h4 id=\"读取10个1G文件\"><a href=\"#读取10个1G文件\" class=\"headerlink\" title=\"读取10个1G文件\"></a>读取10个1G文件</h4><pre><code>hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar TestDFSIO -read -nrFiles 10 -fileSize 1000\n</code></pre><h4 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h4><pre><code>hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar mrbench -numRuns 50\n</code></pre><h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q &amp; A\"></a>Q &amp; A</h2><p>Q: 在下载软件安装包时速度非常慢，如何解决？<br>A：使用VPN，推荐<a href=\"https://duotai.org\" target=\"_blank\" rel=\"external\">多态</a>。<br>Q: 在安装rpm文件时速度非常慢且频繁出错，如何解决？<br>A：使用代理在一台服务器上同步仓库，搭建本地repo，将cloudera-manager.repo中baseurl改为本地仓库地址，详情见附A。<br>Q: 在管理控制台安装时有些机器经常失败，如何解决？<br>A: 正常，多试几次就好😏。<br>Q：在管理控制台安装时失败重试卡在“正在获取锁”，如何解决？<br>A：删除对应机器<code>/tmp/*</code>文件并重启。<br>Q：我未完全按您的步骤操作最后没成功，如何解决?<br>A：滚…</p>\n<h2 id=\"附A：本地yum仓库搭建\"><a href=\"#附A：本地yum仓库搭建\" class=\"headerlink\" title=\"附A：本地yum仓库搭建\"></a>附A：本地yum仓库搭建</h2><p>1）下载CDH5的repo文件，修改x86_64/cdh/5/为x86_64/cdh/5.7.5/，将其保存在 /etc/yum.repos.d/ 目录中。</p>\n<pre><code>wget http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo\n</code></pre><p>2) 安装 yum-utils 和 createrepo RPM 软件包（如果其尚未安装）。yum-utils 软件包包含 reposync 命令，需要用其创建逻辑 Yum 存储库。</p>\n<pre><code>sudo yum install yum-utils createrepo\n</code></pre><p>3) 同步yum 存储库下载至本地文件夹cloudera-manager。（最好使用代理<code>export http_proxy</code>和<code>https_proxy</code>，外国源较慢）</p>\n<pre><code>reposync -r cloudera-manager\ncd cloudera-cdh5\ncreaterepo .\n</code></pre><p>4) 安装epel源和nginx，搭建文件服务器。</p>\n<pre><code>sudo yum -y install epel-release\nsudo yum -y install nginx\n</code></pre><p>5) 将cloudera-cdh5/*复制到/srv/cloudera/cdh/5/（不存在则创建），作为nginx静态文件路径。</p>\n<pre><code>sudo mkdir -p /srv/cloudera/cdh/5\nsudo mv cloudera-cdh5/* /srv/cloudera/cdh/5\nsudo chown -R nginx:nginx /srv/cloudera\n</code></pre><p>6) 修改nginx配置文件/etc/nginx/nginx.conf中server部分为如下内容。</p>\n<pre><code>server {\n    listen       80 default_server;\n    listen       [::]:80 default_server;\n    server_name  _;\n    root         /srv/cloudera/;\n\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n    autoindex on;\n    autoindex_exact_size on;\n    autoindex_localtime on;\n    }\n}\n</code></pre><p>7) 测试文件服务器是否可用，否则检查步骤1-6。<br>8) 编辑您在步骤1中下载的存储库文件并使用步骤5中的URL将以<code>baseurl=</code>为开头的行替换为<code>baseurl=http://&lt;yourwebserver&gt;/cdh/5/</code>，将文件保存至<code>/etc/yum.repos.d/</code>。</p>\n","excerpt":"<p><img src=\"/images/cloudera-manager.jpeg\" alt=\"Cloudera Manager\"></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Cloudera 提供一个可扩展、灵活、集成的平台，可用来方便地管理您的企业中快速增长的多种多样的数据。业界领先的 Cloudera 产品和解决方案使您能够部署并管理 Apache Hadoop 和相关项目、操作和分析您的数据以及保护数据的安全。</p>\n<p>Cloudera 提供下列产品和工具：</p>\n<ul>\n<li>CDH — Cloudera 分发的 Apache Hadoop 和其他相关开放源代码项目，包括 Impala 和 Cloudera Search。CDH 还提供安全保护以及与许多硬件和软件解决方案的集成。</li>\n<li>Cloudera Manager — 一个复杂的应用程序，用于部署、管理、监控您的 CDH 部署并诊断问题。Cloudera Manager 提供 Admin Console，这是一种基于 Web 的用户界面，使您的企业数据管理简单而直接。它还包括 Cloudera Manager API，可用来获取群集运行状况信息和度量以及配置 Cloudera Manager。</li>\n<li>Cloudera Navigator — CDH 平台的端到端数据管理工具。Cloudera Navigator 使管理员、数据经理和分析师能够了解 Hadoop 中的大量数据。Cloudera Navigator 中强大的审核、数据管理、沿袭管理和生命周期管理使企业能够遵守严格的法规遵从性和法规要求。</li>\n<li>Cloudera Impala — 一种大规模并行处理 SQL 引擎，用于交互式分析和商业智能。其高度优化的体系结构使它非常适合用于具有联接、聚合和子查询的传统 BI 样式的查询。它可以查询来自各种源的 Hadoop 数据文件，包括由 MapReduce 作业生成的数据文件或加载到 Hive 表中的数据文件。YARN 和 Llama 资源管理组件让 Impala 能够共存于使用 Impala SQL 查询并发运行批处理工作负载的群集上。您可以通过 Cloudera Manager 用户界面管理 Impala 及其他 Hadoop 组件，并通过 Sentry 授权框架保护其数据。","more":"</li>\n</ul>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"Step1，服务器集群准备\"><a href=\"#Step1，服务器集群准备\" class=\"headerlink\" title=\"Step1，服务器集群准备\"></a>Step1，服务器集群准备</h3><h4 id=\"初始化机器\"><a href=\"#初始化机器\" class=\"headerlink\" title=\"初始化机器\"></a>初始化机器</h4><p>准备如下5台服务器，<code>cloudera-manager</code>用于部署Cloudera管理服务程序，以<code>hadoop</code>开头的机器用于hadoop平台搭建。为了便于管理所有的机器都应设置同样的账号和密码，本文中所有机器都具有相同的账户<code>cdh</code>和相同的密码<code>******</code>。</p>\n<table>\n<thead>\n<tr>\n<th>HOSTNAME</th>\n<th>IP</th>\n<th>CORE</th>\n<th>MEM(G)</th>\n<th>SYSTEM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cloudera-manager</td>\n<td>10.1.3.4</td>\n<td>2</td>\n<td>8</td>\n<td>CentOS7.2</td>\n</tr>\n<tr>\n<td>hadoop-master-1</td>\n<td>10.1.3.5</td>\n<td>4</td>\n<td>16</td>\n<td>CentOS7.2</td>\n</tr>\n<tr>\n<td>hadoop-slave-1</td>\n<td>10.1.3.6</td>\n<td>4</td>\n<td>16</td>\n<td>CentOS7.2</td>\n</tr>\n<tr>\n<td>hadoop-slave-2</td>\n<td>10.1.3.7</td>\n<td>4</td>\n<td>16</td>\n<td>CentOS7.2</td>\n</tr>\n<tr>\n<td>hadoop-slave-3</td>\n<td>10.1.3.8</td>\n<td>4</td>\n<td>16</td>\n<td>CentOS7.2</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"配置秘钥登录\"><a href=\"#配置秘钥登录\" class=\"headerlink\" title=\"配置秘钥登录\"></a>配置秘钥登录</h4><p>为了避免每次都输入密码，我们需要做<code>cloudera-manager</code>到所有机器的秘钥登录，用于部署；Hadoop群集要求<code>master</code>可以秘钥登录所有<code>slave</code>，具体执行过程如下：</p>\n<pre><code># on cloudera-manager\nssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-master-1\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-1\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-2\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-3\n\n# on hadoop-master-1\nssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-1\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-2\nssh-copy-id -i ~/.ssh/id_rsa.pub hadoop-slave-3\n</code></pre><h4 id=\"配置hosts文件\"><a href=\"#配置hosts文件\" class=\"headerlink\" title=\"配置hosts文件\"></a>配置hosts文件</h4><p>在hadoop集群中有许多rpc调用，调用时是通过hostname找ip，因此我们在以<code>hadoop开头的所有机器</code>配置hosts信息，修改方式为编辑<code>/etc/hosts</code>文件，添加如下内容:</p>\n<pre><code>10.1.3.5        hadoop-master-1\n10.1.3.6        hadoop-slave-1\n10.1.3.7        hadoop-slave-2\n10.1.3.8        hadoop-slave-3\n</code></pre><h4 id=\"关闭防火墙及selinux\"><a href=\"#关闭防火墙及selinux\" class=\"headerlink\" title=\"关闭防火墙及selinux\"></a>关闭防火墙及selinux</h4><p>同样在hadoop集群之间rpc调用会涉及到网络端口，我们暂时需要关闭防火墙和selinux，建议生成环境设置相应的规则。<br>关闭防火墙操作如下：</p>\n<pre><code>sudo systemctl stop firewalld     # 关闭\nsudo systemctl disable firewalld  # 取消开机启动\n</code></pre><p>暂时关闭selinux操作如下：</p>\n<pre><code>setenforce 0\n</code></pre><p>永久关闭需要修改<code>/etc/sysconfig/selinux</code>中<code>SELINUX=disabled</code>并重新启动机器。</p>\n<h4 id=\"sudo无密码配置\"><a href=\"#sudo无密码配置\" class=\"headerlink\" title=\"sudo无密码配置\"></a>sudo无密码配置</h4><p>在部署过程中服务器会用到<code>sudo</code>命令且不能有密码操作如下：</p>\n<pre><code>sudo visudo\n</code></pre><p>在末尾加入如下两行内容：</p>\n<pre><code>root    ALL=(ALL)       NOPASSWD: ALL\ncdh     ALL=(ALL)       NOPASSWD: ALL\n</code></pre><h3 id=\"Step2，软件安装包准备\"><a href=\"#Step2，软件安装包准备\" class=\"headerlink\" title=\"Step2，软件安装包准备\"></a>Step2，软件安装包准备</h3><blockquote>\n<p>CDH：5.7.5</p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4></blockquote>\n<pre><code>mkdir cloudera\ncd cloudera\n</code></pre><p>1) cloudera-manager.repo</p>\n<pre><code>wget http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo\n</code></pre><p>2) cloudera-manager-installer-external.bin</p>\n<pre><code>wget http://archive.cloudera.com/cm5/installer/5.7.5/cloudera-manager-installer-external.bin\n</code></pre><p>3) RPMS</p>\n<pre><code>mkdir RPMS\nwget -r -nd http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/5.7.5/RPMS/x86_64/ -P RPMS/\n</code></pre><p>4) Parcel</p>\n<pre><code>mkdir parcel-repo\nwget http://archive.cloudera.com/cdh5/parcels/5.7.5/CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel -P parcel-repo/\nwget -O CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha http://archive.cloudera.com/cdh5/parcels/5.7.5/CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha1 -P parcel-repo/\nwget http://archive.cloudera.com/cdh5/parcels/5.7.5/manifest.json -P parcel-repo/\n</code></pre><h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><pre><code>├── cloudera-manager-installer-external.bin\n├── cloudera-manager.repo\n├── parcel-repo\n│   ├── CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel\n│   ├── CDH-5.7.5-1.cdh5.7.5.p0.3-el7.parcel.sha\n│   └── manifest.json\n└── RPMS\n   ├── cloudera-manager-agent-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n   ├── cloudera-manager-daemons-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n   ├── cloudera-manager-server-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n   ├── cloudera-manager-server-db-2-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n   ├── enterprise-debuginfo-5.7.5-1.cm575.p0.3.el7.x86_64.rpm\n   ├── jdk-6u31-linux-amd64.rpm\n   └── oracle-j2sdk1.7-1.7.0+update67-1.x86_64.rpm\n</code></pre><h3 id=\"Step3，安装\"><a href=\"#Step3，安装\" class=\"headerlink\" title=\"Step3，安装\"></a>Step3，安装</h3><p>在<strong>所有机器</strong>上执行如下操作：<br>1) 将<code>cloudera/cloudera-manager.repo</code>拷贝到<code>/etc/yum.repos.d/</code></p>\n<pre><code>sudo mv cloudera/cloudera-manager.repo /etc/yum.repos.d\n</code></pre><p>2) 安装所有rpm包</p>\n<pre><code>sudo yum -y install cloudera/RPMS/*.rpm\n</code></pre><p>3) 将<code>cloudera/parcel-repo</code>下所有文件拷贝到默认本地parcel库<code>/opt/cloudera/parcel-repo</code>下，在自动安装时会尝试搜索本地parcel文件。</p>\n<pre><code>sudo mkdir -p /opt/cloudera/parcel-repo\nsudo mv cloudera/parcel-repo/* /opt/cloudera/parcel-repo\n</code></pre><p>在<strong>cloudera-manager</strong>上执行如下操作：</p>\n<pre><code>sudo cloudera/cloudera-manager-installer-external.bin\n</code></pre><p>cm安装成功后在浏览器访问<code>http://IP:7180</code>，根据web管理台提示执行安装操作。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"PI\"><a href=\"#PI\" class=\"headerlink\" title=\"PI\"></a>PI</h3><pre><code>ssh 10.1.3.5\nsudo su hdfs\ncd /opt/cloudera/parcels/CDH/jars\nhadoop jar hadoop-mapreduce-examples-2.6.0-cdh5.7.5.jar pi 8 64\n</code></pre><p>得到如下结果，表明hadoop相关组件已经运行正常。</p>\n<pre><code>Job Finished in 29.153 seconds\nEstimated value of Pi is 3.14843750000000000000\n</code></pre><h3 id=\"benchmark\"><a href=\"#benchmark\" class=\"headerlink\" title=\"benchmark\"></a>benchmark</h3><h4 id=\"写入10个1G文件\"><a href=\"#写入10个1G文件\" class=\"headerlink\" title=\"写入10个1G文件\"></a>写入10个1G文件</h4><pre><code>hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar TestDFSIO -write -nrFiles 10 -fileSize 1000\n</code></pre><h4 id=\"读取10个1G文件\"><a href=\"#读取10个1G文件\" class=\"headerlink\" title=\"读取10个1G文件\"></a>读取10个1G文件</h4><pre><code>hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar TestDFSIO -read -nrFiles 10 -fileSize 1000\n</code></pre><h4 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h4><pre><code>hadoop jar hadoop-test-2.6.0-mr1-cdh5.7.5.jar mrbench -numRuns 50\n</code></pre><h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q &amp; A\"></a>Q &amp; A</h2><p>Q: 在下载软件安装包时速度非常慢，如何解决？<br>A：使用VPN，推荐<a href=\"https://duotai.org\">多态</a>。<br>Q: 在安装rpm文件时速度非常慢且频繁出错，如何解决？<br>A：使用代理在一台服务器上同步仓库，搭建本地repo，将cloudera-manager.repo中baseurl改为本地仓库地址，详情见附A。<br>Q: 在管理控制台安装时有些机器经常失败，如何解决？<br>A: 正常，多试几次就好😏。<br>Q：在管理控制台安装时失败重试卡在“正在获取锁”，如何解决？<br>A：删除对应机器<code>/tmp/*</code>文件并重启。<br>Q：我未完全按您的步骤操作最后没成功，如何解决?<br>A：滚…</p>\n<h2 id=\"附A：本地yum仓库搭建\"><a href=\"#附A：本地yum仓库搭建\" class=\"headerlink\" title=\"附A：本地yum仓库搭建\"></a>附A：本地yum仓库搭建</h2><p>1）下载CDH5的repo文件，修改x86_64/cdh/5/为x86_64/cdh/5.7.5/，将其保存在 /etc/yum.repos.d/ 目录中。</p>\n<pre><code>wget http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo\n</code></pre><p>2) 安装 yum-utils 和 createrepo RPM 软件包（如果其尚未安装）。yum-utils 软件包包含 reposync 命令，需要用其创建逻辑 Yum 存储库。</p>\n<pre><code>sudo yum install yum-utils createrepo\n</code></pre><p>3) 同步yum 存储库下载至本地文件夹cloudera-manager。（最好使用代理<code>export http_proxy</code>和<code>https_proxy</code>，外国源较慢）</p>\n<pre><code>reposync -r cloudera-manager\ncd cloudera-cdh5\ncreaterepo .\n</code></pre><p>4) 安装epel源和nginx，搭建文件服务器。</p>\n<pre><code>sudo yum -y install epel-release\nsudo yum -y install nginx\n</code></pre><p>5) 将cloudera-cdh5/*复制到/srv/cloudera/cdh/5/（不存在则创建），作为nginx静态文件路径。</p>\n<pre><code>sudo mkdir -p /srv/cloudera/cdh/5\nsudo mv cloudera-cdh5/* /srv/cloudera/cdh/5\nsudo chown -R nginx:nginx /srv/cloudera\n</code></pre><p>6) 修改nginx配置文件/etc/nginx/nginx.conf中server部分为如下内容。</p>\n<pre><code>server {\n    listen       80 default_server;\n    listen       [::]:80 default_server;\n    server_name  _;\n    root         /srv/cloudera/;\n\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n    autoindex on;\n    autoindex_exact_size on;\n    autoindex_localtime on;\n    }\n}\n</code></pre><p>7) 测试文件服务器是否可用，否则检查步骤1-6。<br>8) 编辑您在步骤1中下载的存储库文件并使用步骤5中的URL将以<code>baseurl=</code>为开头的行替换为<code>baseurl=http://&lt;yourwebserver&gt;/cdh/5/</code>，将文件保存至<code>/etc/yum.repos.d/</code>。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciwqg8nxg00015qxztwynq7co","category_id":"ciwqg8nxw00055qxzh6za8pr6","_id":"ciwqg8nyj000e5qxzzsu9e6l6"},{"post_id":"ciwqg8ny9000a5qxzqv43hoer","category_id":"ciwqg8nxw00055qxzh6za8pr6","_id":"ciwqg8nyw000i5qxzwdgx2k58"},{"post_id":"ciwqg8nxr00035qxzb3ahvp0n","category_id":"ciwqg8nxw00055qxzh6za8pr6","_id":"ciwqg8nyz000k5qxzbctbg6a8"},{"post_id":"ciwqg8ny100095qxzg80osrhp","category_id":"ciwqg8nym000g5qxz0w3aa375","_id":"ciwqg8nz2000n5qxzvelfxco8"},{"post_id":"ciwqg8nyk000f5qxzhqlc5ij0","category_id":"ciwqg8nz2000o5qxzwm2tw17t","_id":"ciwqg8nz6000u5qxzxv5kx6jz"},{"post_id":"ciwqg8nyx000j5qxz0ggxwz7a","category_id":"ciwqg8nz3000r5qxzde9f90db","_id":"ciwqg8nz7000y5qxz5rxswnvv"},{"post_id":"ciwqh4ny70000lwxz3iu5e223","category_id":"ciwqg8nz0000l5qxzlnakm9l4","_id":"ciwqh4nyd0002lwxz5zne0q38"}],"PostTag":[{"post_id":"ciwqg8nxg00015qxztwynq7co","tag_id":"ciwqg8nxy00065qxzugp667wr","_id":"ciwqg8nz4000t5qxz2xdk2xgf"},{"post_id":"ciwqg8nxg00015qxztwynq7co","tag_id":"ciwqg8nyc000c5qxzrww652ue","_id":"ciwqg8nz6000v5qxzwwemhysg"},{"post_id":"ciwqg8nxg00015qxztwynq7co","tag_id":"ciwqg8nyu000h5qxzsbikelpm","_id":"ciwqg8nz7000x5qxzmira88fo"},{"post_id":"ciwqg8nxg00015qxztwynq7co","tag_id":"ciwqg8nz1000m5qxzprz2zj14","_id":"ciwqg8nz7000z5qxzzmpuddp0"},{"post_id":"ciwqg8nxg00015qxztwynq7co","tag_id":"ciwqg8nz2000p5qxzmxbu7jqw","_id":"ciwqg8nz800115qxzyhl12zht"},{"post_id":"ciwqg8nxr00035qxzb3ahvp0n","tag_id":"ciwqg8nz3000s5qxzjyl6yh88","_id":"ciwqg8nzb00155qxzngcruuhj"},{"post_id":"ciwqg8nxr00035qxzb3ahvp0n","tag_id":"ciwqg8nz6000w5qxz6zq036m9","_id":"ciwqg8nzb00165qxz1hfvlkf4"},{"post_id":"ciwqg8nxr00035qxzb3ahvp0n","tag_id":"ciwqg8nz700105qxzjoxhqfzc","_id":"ciwqg8nzd00185qxzss2aupwg"},{"post_id":"ciwqg8nxr00035qxzb3ahvp0n","tag_id":"ciwqg8nyu000h5qxzsbikelpm","_id":"ciwqg8nzd00195qxzj32nl734"},{"post_id":"ciwqg8nxr00035qxzb3ahvp0n","tag_id":"ciwqg8nyc000c5qxzrww652ue","_id":"ciwqg8nzf001b5qxzk6m7o5kh"},{"post_id":"ciwqg8ny100095qxzg80osrhp","tag_id":"ciwqg8nzb00145qxzbap2u5g0","_id":"ciwqg8nzl001f5qxznbyqsuoe"},{"post_id":"ciwqg8ny100095qxzg80osrhp","tag_id":"ciwqg8nz3000s5qxzjyl6yh88","_id":"ciwqg8nzl001g5qxz3e4l27tl"},{"post_id":"ciwqg8ny100095qxzg80osrhp","tag_id":"ciwqg8nyu000h5qxzsbikelpm","_id":"ciwqg8nzl001i5qxzpallbvi6"},{"post_id":"ciwqg8ny100095qxzg80osrhp","tag_id":"ciwqg8nzh001c5qxzjxdjahnl","_id":"ciwqg8nzm001j5qxzneqxfkwh"},{"post_id":"ciwqg8ny100095qxzg80osrhp","tag_id":"ciwqg8nz1000m5qxzprz2zj14","_id":"ciwqg8nzn001l5qxzrzuwk4xc"},{"post_id":"ciwqg8ny9000a5qxzqv43hoer","tag_id":"ciwqg8nzk001e5qxzj466wt92","_id":"ciwqg8nzq001q5qxzuonm5wuh"},{"post_id":"ciwqg8ny9000a5qxzqv43hoer","tag_id":"ciwqg8nzl001h5qxze6ll8hyu","_id":"ciwqg8nzr001r5qxzb2pwxlkc"},{"post_id":"ciwqg8ny9000a5qxzqv43hoer","tag_id":"ciwqg8nzm001k5qxzajtlzv8g","_id":"ciwqg8nzr001t5qxzm48va9io"},{"post_id":"ciwqg8ny9000a5qxzqv43hoer","tag_id":"ciwqg8nzo001m5qxz51d38q6b","_id":"ciwqg8nzs001u5qxzplaewm5d"},{"post_id":"ciwqg8ny9000a5qxzqv43hoer","tag_id":"ciwqg8nzo001n5qxzt0ecrl25","_id":"ciwqg8nzt001w5qxzupmimp0t"},{"post_id":"ciwqg8ny9000a5qxzqv43hoer","tag_id":"ciwqg8nzp001o5qxzg0u82gpf","_id":"ciwqg8nzt001x5qxznfj18tiz"},{"post_id":"ciwqg8nyk000f5qxzhqlc5ij0","tag_id":"ciwqg8nzt001y5qxzfvkrqshd","_id":"ciwqg8nzw00245qxzs927cqcb"},{"post_id":"ciwqg8nyk000f5qxzhqlc5ij0","tag_id":"ciwqg8nzu00215qxzhzf9vg27","_id":"ciwqg8nzw00255qxzkty9biuy"},{"post_id":"ciwqg8nyx000j5qxz0ggxwz7a","tag_id":"ciwqg8nzv00235qxzua61i944","_id":"ciwqg8nzw00265qxzjid5dqvp"},{"post_id":"ciwqh4ny70000lwxz3iu5e223","tag_id":"ciwqg8nzq001p5qxz0mriodst","_id":"ciwqh4nyd0001lwxz8svxkd46"},{"post_id":"ciwqh4ny70000lwxz3iu5e223","tag_id":"ciwqg8nzr001s5qxzjwcv22ko","_id":"ciwqh4nyd0003lwxzx96bz4sx"},{"post_id":"ciwqh4ny70000lwxz3iu5e223","tag_id":"ciwqg8nzs001v5qxzxijzmhhk","_id":"ciwqh4nye0004lwxz4czm507l"}],"Tag":[{"name":"electron","_id":"ciwqg8nxy00065qxzugp667wr"},{"name":"mac","_id":"ciwqg8nyc000c5qxzrww652ue"},{"name":"linux","_id":"ciwqg8nyu000h5qxzsbikelpm"},{"name":"windows","_id":"ciwqg8nz1000m5qxzprz2zj14"},{"name":"cross platform","_id":"ciwqg8nz2000p5qxzmxbu7jqw"},{"name":"shell","_id":"ciwqg8nz3000s5qxzjyl6yh88"},{"name":"mysql","_id":"ciwqg8nz6000w5qxz6zq036m9"},{"name":"git","_id":"ciwqg8nz700105qxzjoxhqfzc"},{"name":"bash","_id":"ciwqg8nzb00145qxzbap2u5g0"},{"name":"macOS","_id":"ciwqg8nzh001c5qxzjxdjahnl"},{"name":"tor","_id":"ciwqg8nzk001e5qxzj466wt92"},{"name":"proxy","_id":"ciwqg8nzl001h5qxze6ll8hyu"},{"name":"crawler","_id":"ciwqg8nzm001k5qxzajtlzv8g"},{"name":"spider","_id":"ciwqg8nzo001m5qxz51d38q6b"},{"name":"爬虫","_id":"ciwqg8nzo001n5qxzt0ecrl25"},{"name":"匿名网络","_id":"ciwqg8nzp001o5qxzg0u82gpf"},{"name":"cloudera","_id":"ciwqg8nzq001p5qxz0mriodst"},{"name":"hadoop","_id":"ciwqg8nzr001s5qxzjwcv22ko"},{"name":"big data","_id":"ciwqg8nzs001v5qxzxijzmhhk"},{"name":"感悟","_id":"ciwqg8nzt001y5qxzfvkrqshd"},{"name":"心得","_id":"ciwqg8nzu00215qxzhzf9vg27"},{"name":"C语言","_id":"ciwqg8nzv00235qxzua61i944"}]}}